<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>riusksk&#39;s blog</title>
  <subtitle>攀蟾折桂摄寰宇，摘星揽月御乾坤。踏云踩雾骋宵壤，驱风逐日闯天地。 ------泉哥</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://riusksk.github.io/"/>
  <updated>2019-06-29T03:54:46.000Z</updated>
  <id>http://riusksk.github.io/</id>
  
  <author>
    <name>riusksk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Infiltrate2019议题学习</title>
    <link href="http://riusksk.github.io/2019/06/29/Infiltrate2019%E8%AE%AE%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <id>http://riusksk.github.io/2019/06/29/Infiltrate2019议题学习/</id>
    <published>2019-06-29T02:26:18.000Z</published>
    <updated>2019-06-29T03:54:46.000Z</updated>
    
    <content type="html">&lt;p&gt;Infiltrate2019安全大会是在5月初举办的，会议资料收集后放在电脑上1个多月了，连续几个周末都有事，一直没来得及学习，今天刚好学习下，有些议题其实跟MOSEC上有重复。&lt;/p&gt;
&lt;p&gt;重点聊几个个人感兴趣的议题，并最后附上10个议题ppt资料下载。&lt;/p&gt;
&lt;h3 id=&quot;2PAC-2Furious-Envisioning-an-iOS&quot;&gt;&lt;a href=&quot;#2PAC-2Furious-Envisioning-an-iOS&quot; class=&quot;headerlink&quot; title=&quot;2PAC 2Furious Envisioning an iOS&quot;&gt;&lt;/a&gt;2PAC 2Furious Envisioning an iOS&lt;/h3&gt;&lt;p&gt;科恩出品，分两部分：PAC绕过与基带研究，刚好在MOSEC上project zero的人讲了5种PAC绕过方法，议题名叫”A study in PAC”，涵盖了其中的方法，而基带研究部分也作为独立议题在MOSEC上分享过，介绍 基带攻击方法、逆向分析固件的方法。&lt;/p&gt;
&lt;p&gt;之前在MOSEC上，我对5种PAC绕过方法作了学习笔记，直接上图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4htu5v9uwj30kt0bu117.jpg&quot; alt=&quot;image-20190629104044528&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4htugqt77j30l60azk14.jpg&quot; alt=&quot;image-20190629104108330&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4htvdapshj30ln0bjqdc.jpg&quot; alt=&quot;image-20190629104158997&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4htvmwxq5j30lb0bvtic.jpg&quot; alt=&quot;image-20190629104215919&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/006tNc79gy1g4htw8f19bj30l20bv47u.jpg&quot; alt=&quot;image-20190629104249591&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;EL3-Tour-Get-The-Ultimate-Privilege-of-Android-Phone&quot;&gt;&lt;a href=&quot;#EL3-Tour-Get-The-Ultimate-Privilege-of-Android-Phone&quot; class=&quot;headerlink&quot; title=&quot;EL3 Tour - Get The Ultimate Privilege of Android Phone&quot;&gt;&lt;/a&gt;EL3 Tour - Get The Ultimate Privilege of Android Phone&lt;/h3&gt;&lt;p&gt;盘古出品，拿华为P20开刀，应该是手工逆向分析TEE相关代码，挖到一个代码执行漏洞攻击EL3的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4htzfth2jj30ki08ytfb.jpg&quot; alt=&quot;image-20190629104554838&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过VBAR_EL+0x400的异常处理例程来定位SMC处理例程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4hu1jvypuj30eo08ctdm.jpg&quot; alt=&quot;image-20190629104757284&quot;&gt;&lt;/p&gt;
&lt;p&gt;漏洞代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gy1g4hu25urjvj30l10930y7.jpg&quot; alt=&quot;image-20190629104832507&quot;&gt;&lt;/p&gt;
&lt;p&gt;对方的漏洞利用思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过漏洞实现任意内存读写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;布署 Shellcode 于地址 0x209F8000（EL1下可访问，属于共享内存）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;篡改 Page Descriptior : 0x209F8627 =&amp;gt; 0x209F8783（可执行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TLBI ALLEL3：清除TLB缓存，保持数据一致，使页表修改可被CPU感知到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用 0x209F8000，触发shellcode执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后演示如何利用该漏洞绕过华为手机的人脸验证，包括篡改人脸匹配分值、活体检测结果。&lt;/p&gt;
&lt;h3 id=&quot;Adventures-in-Video-Conferencing&quot;&gt;&lt;a href=&quot;#Adventures-in-Video-Conferencing&quot; class=&quot;headerlink&quot; title=&quot;Adventures in Video Conferencing&quot;&gt;&lt;/a&gt;Adventures in Video Conferencing&lt;/h3&gt;&lt;p&gt;Project Zero以前在其博客上分享过，看博文会更清晰一些，详见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 1: The Wild World of WebRTC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 2: Fun with FaceTime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 3: The Even Wilder World of WhatsApp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 4: What Didn’t Work Out with WhatsApp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 5: Where Do We Go from Here?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Natalie Silvanovich 作为PZ的头牌女黑客，在此议题的厉害之处就是用了几行fuzz代码挖了包括浏览器、FaceTime、WhatsApp在内的主流应用10多个CVE远程漏洞。就是下面这段代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gy1g4huf2vvhfj30c80df3zm.jpg&quot; alt=&quot;image-20190629110057733&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过分析视频交互过程，找到外部数据传递的关键点，开源的改代码插入fuzz，闭源的写Hook去实现fuzz，相关的工具也已在GitHub上开源：&lt;a href=&quot;https://github.com/googleprojectzero/Street-Party。之前看到国内也有人顺势搞到几个FaceTime的漏洞。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/Street-Party。之前看到国内也有人顺势搞到几个FaceTime的漏洞。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;TEE-Exploitation-Exploiting-Trusted-Apps-on-Samsung’s-TEE&quot;&gt;&lt;a href=&quot;#TEE-Exploitation-Exploiting-Trusted-Apps-on-Samsung’s-TEE&quot; class=&quot;headerlink&quot; title=&quot;TEE Exploitation: Exploiting Trusted Apps on Samsung’s TEE&quot;&gt;&lt;/a&gt;TEE Exploitation: Exploiting Trusted Apps on Samsung’s TEE&lt;/h3&gt;&lt;p&gt;Blue Frost Security出品，举了几个三星漏洞的例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TA的栈溢出案例：由于只有NX(没有栈保护和ASLR)，所以直接上ROP搞定的&lt;/li&gt;
&lt;li&gt;共享内存Double Fectch漏洞：TA在验证和使用命令数据的时间窗口内，可能被篡改数据，实现任意读写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4huyzbl81j30id0dh0tr.jpg&quot; alt=&quot;image-20190629112004922&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于缺乏一些常见的内存保护机制（仅有NX），在TA利用上反而更加容易。TA攻破后，对于厂商最大的影响可能是DRM版权与支付密钥等问题；而对于用户而言，主要是用户数据的窃取问题。&lt;/p&gt;
&lt;h3 id=&quot;资料打包下载&quot;&gt;&lt;a href=&quot;#资料打包下载&quot; class=&quot;headerlink&quot; title=&quot;资料打包下载&quot;&gt;&lt;/a&gt;资料打包下载&lt;/h3&gt;&lt;p&gt;下载链接：&lt;a href=&quot;https://github.com/riusksk/SecConArchive/tree/master/Infiltrate2019&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/SecConArchive/tree/master/Infiltrate2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tNc79gy1g4hvqqcgb5j30co05y759.jpg&quot; alt=&quot;image-20190629114646339&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Infiltrate2019安全大会是在5月初举办的，会议资料收集后放在电脑上1个多月了，连续几个周末都有事，一直没来得及学习，今天刚好学习下，有些议题其实跟MOSEC上有重复。&lt;/p&gt;
&lt;p&gt;重点聊几个个人感兴趣的议题，并最后附上10个议题ppt资料下载。&lt;/p&gt;
&lt;h3
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>2019年哪些安全大会的议题值得学习</title>
    <link href="http://riusksk.github.io/2019/05/11/2019%E5%B9%B4%E5%93%AA%E4%BA%9B%E5%AE%89%E5%85%A8%E5%A4%A7%E4%BC%9A%E7%9A%84%E8%AE%AE%E9%A2%98%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0/"/>
    <id>http://riusksk.github.io/2019/05/11/2019年哪些安全大会的议题值得学习/</id>
    <published>2019-05-11T02:19:22.000Z</published>
    <updated>2019-05-11T08:20:32.000Z</updated>
    
    <content type="html">&lt;p&gt;“2019年哪些安全大会值得参加？”或者这更符合多数人心中的标题，但为何不这么写呢？&lt;/p&gt;
&lt;p&gt;因为有些拥有好议题的大会一般都会公开PPT，尤其是国外会议，来回参会成本比较高，如果有现成的PPT供学习，自然不用每次都参加。当然，也有因作者拒绝公开的议题，这种只能现场听了。&lt;/p&gt;
&lt;p&gt;评价安全大会的好坏，是多方面的，绝不是单纯的议题质量这一维度。但这里我主要想从技术者的角度来看评价，所以后面你发现很多知名大会未在此列，请不要惊讶。&lt;/p&gt;
&lt;p&gt;即使是同一举办方，也无法保证每年的议题质量呈上升状态，有些会议也开始没落了，所以这里以2019年为时间点来点评。&lt;/p&gt;
&lt;p&gt;下面来聊聊2019年哪些安全大会的议题值得学习，有些已经举办过，有些尚未开始。&lt;/p&gt;
&lt;h2 id=&quot;推荐的安全会议&quot;&gt;&lt;a href=&quot;#推荐的安全会议&quot; class=&quot;headerlink&quot; title=&quot;推荐的安全会议&quot;&gt;&lt;/a&gt;推荐的安全会议&lt;/h2&gt;&lt;h3 id=&quot;1、BlackHat&quot;&gt;&lt;a href=&quot;#1、BlackHat&quot; class=&quot;headerlink&quot; title=&quot;1、BlackHat&quot;&gt;&lt;/a&gt;1、BlackHat&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511125059375.png&quot; alt=&quot;image-20190511125059375&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官网&lt;/strong&gt;：&lt;a href=&quot;https://www.blackhat.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blackhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你不知道BlackHat，说明你不在安全圈混。&lt;/p&gt;
&lt;p&gt;USA是主会场，议题质量和数量也是最高的，议题类型覆盖面也很广，除此之外还有欧洲和亚洲等分会场，质量相对次一些。&lt;/p&gt;
&lt;p&gt;这次BlackHat USA的议题也陆续公开了：&lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blackhat.com/us-19/briefings/schedule/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;早几年的议题水平参差不齐，很水的也有，打广告也有。最近几年反而议题质量提高，不少华人面孔出现，为了PR效果而竞争，促进大家都拿出干货来分享，这也是其有利的一面。&lt;/p&gt;
&lt;p&gt;每年都有几千个议题投稿，竞争很大，但这很好地促进议题质量的提高。&lt;/p&gt;
&lt;p&gt;每年会后，官方都会放出PPT与视频，非常开放地分享知识。&lt;/p&gt;
&lt;p&gt;所以，首推BlackHat，自然无疑。&lt;/p&gt;
&lt;p&gt;但如果你以为接下我会写Defcon，那我会告诉你：No！&lt;/p&gt;
&lt;h3 id=&quot;2、OffensiveCon&quot;&gt;&lt;a href=&quot;#2、OffensiveCon&quot; class=&quot;headerlink&quot; title=&quot;2、OffensiveCon&quot;&gt;&lt;/a&gt;2、OffensiveCon&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/Logo_Offensivecon_by_BFS_1.jpg&quot; alt=&quot;offensivecon&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官网&lt;/strong&gt;：&lt;a href=&quot;https://www.offensivecon.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.offensivecon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前还专门写了篇文章&lt;a href=&quot;http://riusksk.me/2019/02/22/今年的OffensiveCon大会议题不错/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《今年的OffensiveCon大会议题质量不错》&lt;/a&gt;介绍2019年大会中一些不错的议题。&lt;/p&gt;
&lt;p&gt;虽然OffensiveCon是从2018年才开始举办的，但议题质量一直保持不错，演讲者中包括Project Zero、Google syzkaller作者、Pwn2Own与Hack2Win获奖者等等。&lt;/p&gt;
&lt;p&gt;会后，一般是由演讲者选择是否公开ppt，多数人是在Twitter上公开的，官网上我没找到资源（&lt;a href=&quot;https://github.com/riusksk/SecConArchive/tree/master/OffensiveCon2019），所以之前收集的ppt都是从twitter上扒下来的。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/SecConArchive/tree/master/OffensiveCon2019），所以之前收集的ppt都是从twitter上扒下来的。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3、HITB-Hack-In-The-Box&quot;&gt;&lt;a href=&quot;#3、HITB-Hack-In-The-Box&quot; class=&quot;headerlink&quot; title=&quot;3、HITB (Hack In The Box)&quot;&gt;&lt;/a&gt;3、HITB (Hack In The Box)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511133408850.png&quot; alt=&quot;image-20190511133408850&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://conference.hitb.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://conference.hitb.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这几天HITB刚在荷兰阿姆斯特丹举办完，议题PPT也一并公开(&lt;a href=&quot;https://conference.hitb.org/hitbsecconf2019ams/materials/)。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://conference.hitb.org/hitbsecconf2019ams/materials/)。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果要说国内外安全会议中，哪个公开PPT最快的，一定是HITB，他们一般是现场演讲完，就直接扔官网下载。然后过一段时间，也同样发布演讲视频。&lt;/p&gt;
&lt;p&gt;他们有时会同时搞两个演讲会场，一个是收费的主会场，议题质量高一些，一个是免费的，叫CommSec，用来提携新人，议题质量相对比较次，每个议题分享时间也比较短，最多半小时。&lt;/p&gt;
&lt;p&gt;之前去新加坡参加过一次HITB，人数不多，场地也不大，但可以感受到与国内安全会议的区别：更注重技术交流，而非搞关系。&lt;/p&gt;
&lt;p&gt;2018年开始，HITB也开始与京东合作，在北京举办分会场，没去过，不作评价，但国际会议本土化，总会产生一些差异的。&lt;/p&gt;
&lt;h3 id=&quot;4、InfiltrateCon&quot;&gt;&lt;a href=&quot;#4、InfiltrateCon&quot; class=&quot;headerlink&quot; title=&quot;4、InfiltrateCon&quot;&gt;&lt;/a&gt;4、InfiltrateCon&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511134410680.png&quot; alt=&quot;image-20190511134410680&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://infiltratecon.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://infiltratecon.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从2011年开始举办的，已经走过8个年头。&lt;/p&gt;
&lt;p&gt;看了今年的议题，还是有干货的，但只有4个议题ppt在twitter上公开。&lt;/p&gt;
&lt;p&gt;以前，会后都会在官网上公开PPT和视频，但目前官方还没公开。&lt;/p&gt;
&lt;p&gt;今年的议题涉及Chrome RCE、iOS与Android提权、Pwn TEE、浏览器JS Fuzzing等等，只能坐等官方公开PPT了。&lt;/p&gt;
&lt;h3 id=&quot;5、Chaos-Communication-Congress-C3&quot;&gt;&lt;a href=&quot;#5、Chaos-Communication-Congress-C3&quot; class=&quot;headerlink&quot; title=&quot;5、Chaos Communication Congress(C3)&quot;&gt;&lt;/a&gt;5、Chaos Communication Congress(C3)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511141920353.png&quot; alt=&quot;image-20190511141920353&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.ccc.de/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ccc.de/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;德国混淆黑客大会，常叫C3会议，常在C3前面加上第几届，比如今年第35届，所以叫35C3，历史非常悠久。&lt;/p&gt;
&lt;p&gt;以前大多是聚焦在无线电安全，所以一些什么2G\3G\4G短信、电话窃听经常出自该会议。熟悉无线电安全的同学，应该都听过。2018年也有一些不错的软件安全相关的议题，这些在之前写的文章&lt;a href=&quot;http://riusksk.me/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%AE%E9%A2%98/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《推荐今年C3黑客大会上的几个议题》&lt;/a&gt;介绍过了。&lt;/p&gt;
&lt;p&gt;除了大会议题，不得不提下他们的CTF，非常具有实战价值，比如2018年的题目，直接拿pwn2own漏洞当比赛，从safari代码执行到提权，还有VisualBox沙盒逃逸题目，需要利用到0Dday，出题者是ProjectZero的人，早就将其卖给ZDI，刷了不少VBox漏洞。这些CTF题目在网上都有相应的WriteUp可供学习。&lt;/p&gt;
&lt;p&gt;这些议题只有演讲视频公开，没有PPT，官方会放在&lt;a href=&quot;https://media/ccc.de，可在线或下载观看。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media/ccc.de，可在线或下载观看。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;都是在每年的12月份举办，2019的还有半年呢……&lt;/p&gt;
&lt;h3 id=&quot;6、CanSecWest&quot;&gt;&lt;a href=&quot;#6、CanSecWest&quot; class=&quot;headerlink&quot; title=&quot;6、CanSecWest&quot;&gt;&lt;/a&gt;6、CanSecWest&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511143022033.png&quot; alt=&quot;image-20190511143022033&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://cansecwest.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cansecwest.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CanSecWest都是与Pwn2Own一块出现的，以前议题PPT都是放在&lt;a href=&quot;https://www.slideshare.net/上分享，但从2018年开始又不搞了。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.slideshare.net/上分享，但从2018年开始又不搞了。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每年议题不多，但质量还是可以的，不过感觉这两年的质量略有下降。&lt;/p&gt;
&lt;p&gt;今年3月的议题也没看到有下载，也是混Twitter找ppt的，只看了《&lt;strong&gt;vs com.apple.security.sandbox&lt;/strong&gt;》这个议题，今年我感兴趣的议题没几个，大家根据自己喜好选择吧。&lt;/p&gt;
&lt;p&gt;如果你各个议题PPT，也欢迎分享下。&lt;/p&gt;
&lt;h3 id=&quot;7、MOSEC-移动安全技术峰会&quot;&gt;&lt;a href=&quot;#7、MOSEC-移动安全技术峰会&quot; class=&quot;headerlink&quot; title=&quot;7、MOSEC 移动安全技术峰会&quot;&gt;&lt;/a&gt;7、MOSEC 移动安全技术峰会&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511145201148.png&quot; alt=&quot;image-20190511145201148&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://mosec.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mosec.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MOSEC是从2015年开始举办的，由盘古与韩国POC联合举办，聚集移动安全领域，包括Android、iOS、IoT以及无线电等领域。虽然起步晚，但议题干货满满的，应该是目前国内最好的安全会议了。&lt;/p&gt;
&lt;p&gt;今年的议题也已经陆续公开了，包括iOS越狱、Android提权、LTE、基带、卫星系统等等。&lt;/p&gt;
&lt;p&gt;官网是不公开大会的议题PPT，由演讲者选择，所以想学习的同学，可能还是得去参会。&lt;/p&gt;
&lt;p&gt;从2015年第一届我就开始参加，本月底还会去。去年参会，早上出酒店一辆车都打不到，又不在地铁口，最后骑了1个多小时的单车到会场，不容易啊……&lt;/p&gt;
&lt;h3 id=&quot;8、POC&quot;&gt;&lt;a href=&quot;#8、POC&quot; class=&quot;headerlink&quot; title=&quot;8、POC&quot;&gt;&lt;/a&gt;8、POC&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/poclogo.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://powerofcommunity.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://powerofcommunity.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;POC(PowerOfCommunity)起始于2006年，在韩国举办的。单从议题质量看，确实不错，大多漏洞研究领域的前沿技术，但它经常是”二手货”，也就是在其它安全会议讲过后，但去韩国观光旅游顺便讲下。&lt;/p&gt;
&lt;p&gt;还有个意思的现象就是，每年的议题超过一半是中国人讲的。&lt;/p&gt;
&lt;p&gt;所以，你推荐也对，你不推荐也没错。&lt;/p&gt;
&lt;p&gt;不过，有个好处就是，POC议题PPT都是提供下载的。有时在其它会议找不到PPT时，到POC官网翻下，偶有小惊喜。&lt;/p&gt;
&lt;p&gt;另外还有个会议叫ZeroNights，同一举办方，更多是面向老外的。&lt;/p&gt;
&lt;h2 id=&quot;那些未提及的知名大会&quot;&gt;&lt;a href=&quot;#那些未提及的知名大会&quot; class=&quot;headerlink&quot; title=&quot;那些未提及的知名大会&quot;&gt;&lt;/a&gt;那些未提及的知名大会&lt;/h2&gt;&lt;h3 id=&quot;1、Defcon&quot;&gt;&lt;a href=&quot;#1、Defcon&quot; class=&quot;headerlink&quot; title=&quot;1、Defcon&quot;&gt;&lt;/a&gt;1、Defcon&lt;/h3&gt;&lt;p&gt;很多时候，Defcon议题都是BlackHat挑剩的，有的人也会直接议题双投。上面的议题质量更是参差不齐，相对BlackHat要求更低，更开放。我很少看Defcon议题，偶而网上有人发才看。&lt;/p&gt;
&lt;h3 id=&quot;2、RSA&quot;&gt;&lt;a href=&quot;#2、RSA&quot; class=&quot;headerlink&quot; title=&quot;2、RSA&quot;&gt;&lt;/a&gt;2、RSA&lt;/h3&gt;&lt;p&gt;RSA是一个充满商业气息的大会，如果你看过官网的PPT，就会发现里面充满诸多广告，有的议题可能就几页图片，所以从技术角度来看，是没有多少学习的价值。&lt;/p&gt;
&lt;p&gt;但是，RSA有时也反应出的安全的风向标，虽有炒作的成分，但显然PR得甚是成功。比如当年的APT、数据可视化、威胁情报等等&lt;/p&gt;
&lt;p&gt;RSA的创新沙盒是一项不错的活动，很多创业公司把他们研发的新产品拿出来比赛，从中可以反映出一些行业发展的方向。&lt;/p&gt;
&lt;p&gt;所以，RSA比较适合管理者、创业者以及产品运营者。&lt;/p&gt;
&lt;h3 id=&quot;3、XCon&quot;&gt;&lt;a href=&quot;#3、XCon&quot; class=&quot;headerlink&quot; title=&quot;3、XCon&quot;&gt;&lt;/a&gt;3、XCon&lt;/h3&gt;&lt;p&gt;以前国内安全会议很少，基本唯XCon为首。以前参加都是为了跟圈内朋友相聚聊天，有时场外比场内还热闹。&lt;/p&gt;
&lt;p&gt;但这几年开始，XCon逐渐没落了。如果你参加过XCon2018，相信会有很大的体会，会场已经没几个人，有时在场人数可能达到个位数，找个同行聊天都难，且门票还是国内同类会议最贵的。&lt;/p&gt;
&lt;h3 id=&quot;4、KCon&quot;&gt;&lt;a href=&quot;#4、KCon&quot; class=&quot;headerlink&quot; title=&quot;4、KCon&quot;&gt;&lt;/a&gt;4、KCon&lt;/h3&gt;&lt;p&gt;KCon应该算是国内比较有自己特色的会议，2018年的议题质量也还可以，中场休息的摇滚音乐很赞，场地与音效很好。&lt;/p&gt;
&lt;p&gt;之前几届的议题质量忽上忽下，2019年的议题还没出来，大家可以关注下先。&lt;/p&gt;
&lt;p&gt;若是在2018年，我还是会给个推荐的。&lt;/p&gt;
&lt;h3 id=&quot;5、BlueHat&quot;&gt;&lt;a href=&quot;#5、BlueHat&quot; class=&quot;headerlink&quot; title=&quot;5、BlueHat&quot;&gt;&lt;/a&gt;5、BlueHat&lt;/h3&gt;&lt;p&gt;以前微软的闭门邀请制会议，从今年开始在上海举办国内版，议题列表已经放出，感觉质量一般。但跟MOSEC时间联着，可以考虑一并参加下。&lt;/p&gt;
&lt;h3 id=&quot;6、RECON&quot;&gt;&lt;a href=&quot;#6、RECON&quot; class=&quot;headerlink&quot; title=&quot;6、RECON&quot;&gt;&lt;/a&gt;6、RECON&lt;/h3&gt;&lt;p&gt;因为多数议题自己不感兴趣，它比较偏向于逆向工程，以及系统底层、硬件、固件等方向，对此方向感兴趣的话，依然可以看看。&lt;/p&gt;
&lt;h3 id=&quot;7、Syscan-Syscan360&quot;&gt;&lt;a href=&quot;#7、Syscan-Syscan360&quot; class=&quot;headerlink&quot; title=&quot;7、Syscan/Syscan360&quot;&gt;&lt;/a&gt;7、Syscan/Syscan360&lt;/h3&gt;&lt;p&gt;官网已经打不开了，聊啥……&lt;/p&gt;
&lt;h2 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h2&gt;&lt;p&gt;评价一个会议的好坏真是很容易，但要举办一个好的会议却是不容易，影响的因素特别多，且非一人之力可以搞定。&lt;/p&gt;
&lt;p&gt;无论最终质量如何，对于为行业提供沟通交流平台的一些会议，还是值得点赞的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;“2019年哪些安全大会值得参加？”或者这更符合多数人心中的标题，但为何不这么写呢？&lt;/p&gt;
&lt;p&gt;因为有些拥有好议题的大会一般都会公开PPT，尤其是国外会议，来回参会成本比较高，如果有现成的PPT供学习，自然不用每次都参加。当然，也有因作者拒绝公开的议题，这种只能现场听了
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="安全大会" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E5%A4%A7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>读《一本小小的蓝色逻辑书》：识别常见的逻辑漏洞</title>
    <link href="http://riusksk.github.io/2019/05/03/%E8%AF%BB%E3%80%8A%E4%B8%80%E6%9C%AC%E5%B0%8F%E5%B0%8F%E7%9A%84%E8%93%9D%E8%89%B2%E9%80%BB%E8%BE%91%E4%B9%A6%E3%80%8B/"/>
    <id>http://riusksk.github.io/2019/05/03/读《一本小小的蓝色逻辑书》/</id>
    <published>2019-05-03T01:46:24.000Z</published>
    <updated>2019-05-03T07:37:01.000Z</updated>
    
    <content type="html">&lt;p&gt;最近读了一本书叫《一本小小的蓝色逻辑书》，算是逻辑推理入门书籍，觉得不错，推荐给大家。&lt;/p&gt;
&lt;p&gt;这本书在微信读书上可以找到，大概需要4个多小时的阅读时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nwae2o1hj30ku0engpd.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是逻辑推理&quot;&gt;&lt;a href=&quot;#什么是逻辑推理&quot; class=&quot;headerlink&quot; title=&quot;什么是逻辑推理&quot;&gt;&lt;/a&gt;什么是逻辑推理&lt;/h3&gt;&lt;p&gt;在生活、学习与工作中，我们总是要运用到逻辑推理能力，甚至我们自己也经常挂在嘴边，但若问什么是逻辑推理呢，估计没多少人能说清。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓”逻辑推理”，在广义上被定义为”我们评估信息的过程”。要想做出正确的决定，我们首先要占有充分的信息，而要想占有充分的信息，就必须提出正确的问题。所以那些擅长逻辑推理的人，往往也比较善于提出问题，搜集相关信息，用”正确的”方式对这些信息进行评估。最重要提，他们可以在不受他人干扰的情况下独立完成这一过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我记忆中，整个学生时代，几乎没有过这门课程，大部分的逻辑推理能力都是基于以往的中学数学课程训练，比如真假命题、逆命题、证明题等等，本书中也有讲到这些。&lt;/p&gt;
&lt;p&gt;也许我们的日常数学真的只需要加减乘除的运算，但以前的数学课程培养出来的逻辑思维，却可以运用一生。&lt;/p&gt;
&lt;h3 id=&quot;推翻前提找答案&quot;&gt;&lt;a href=&quot;#推翻前提找答案&quot; class=&quot;headerlink&quot; title=&quot;推翻前提找答案&quot;&gt;&lt;/a&gt;推翻前提找答案&lt;/h3&gt;&lt;p&gt;这里说的”推翻前提找答案”，其实是想说”&lt;strong&gt;水平思考法&lt;/strong&gt;“，一种摆脱前提设想而进行创意思考的方式，不走寻常路，换个角度看待问题，而不是接受他人提出的前提条件。我们多数人一般都是使用“&lt;strong&gt;垂直思考法&lt;/strong&gt;”，却沿着原定的逻辑路线思考下去，就是我们俗语常说的“&lt;strong&gt;直脑筋&lt;/strong&gt;”，多少略带有点贬义。&lt;/p&gt;
&lt;p&gt;下面是两种思考方法的对比表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nws25a6hj30ps0eswht.jpg&quot; alt=&quot;image-20190503101519293&quot;&gt;&lt;/p&gt;
&lt;p&gt;可能还是太抽象了，因此作者讲了一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;许多年前，一个倒霉的商人欠了别人一大笔钱。由于没钱还债，商人很可能会被债主投进大牢。&lt;/p&gt;
&lt;p&gt;债主是个脾气又坏又丑的糟老头，但他却看上了商人年轻貌美的女儿。于是他告诉商人：”我有个办法，不仅可以把你的债务一笔勾销，还能让你的女儿免于因为你入狱而流落街头。”&lt;/p&gt;
&lt;p&gt;具体办法是：债主把一黑一白的小石头放进空袋子，让商人女儿摸一块。如果摸到白石头，则她父亲的债一笔勾销，她也无须嫁给债主；如果摸到的是黑石头，债务仍然可以一笔勾销，但她必须嫁给债主。如果她不答应这个游戏，那么她父亲会被立刻投进监狱。&lt;/p&gt;
&lt;p&gt;商人父女别无选择，只好答应。&lt;/p&gt;
&lt;p&gt;于是三人来到债主花园内铺满鹅卵石的小路上，债主俯身捡两块黑石头扔进袋子里，他自以为神不知鬼不觉，却不知这一切都被商人女儿看在眼里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是个”直脑筋”的人，可能就想到下面两种做法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当场揭穿糟老头的阴谋，然后商人进监狱；&lt;/li&gt;
&lt;li&gt;女儿认命，抽到黑石头，嫁给糟老头，债务一笔勾销。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后的结局是这样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;商人的女儿摸出一块石头，但故意把它掉到地上，跟一堆鹅卵石混到一起。然后一边假装寻找石头，一边若有所思地说道，”但没关系，只要看看袋子里的那块石头是什么颜色，就可以判断我刚才摸出的那块石头是什么颜色了。”&lt;/p&gt;
&lt;p&gt;债主一时愣住了，不知道该说什么，只好让那个女孩拿出袋子里的石头，结果可想而知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是水平思考法，我们可以回顾下这个故事，若要想免债的话，其中的”前提条件”是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提条件&lt;/strong&gt;：从袋子中摸出白石头。&lt;/p&gt;
&lt;p&gt;现在通过改变该前提条件来思考，比如这样：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从袋子中摸出&lt;strong&gt;&lt;code&gt;黑&lt;/code&gt;&lt;/strong&gt;石头：现场改变规则，摸出黑石头可免债。&lt;/li&gt;
&lt;li&gt;摸出石头后，&lt;strong&gt;根据剩下的石头颜色来判断是否摸到的是白石头&lt;/strong&gt;，正如故事中所做的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;日常生活中，阻碍我们进行创意思考的是，不假思索的程序性反应，就是不费脑子的事情，比如商店购物、开车等等，但有时遇到一些新情况，这些程序性反应就不灵了，这时就需要启动非程序性反应。&lt;/p&gt;
&lt;p&gt;书中还给了一道训练”水平思考法”的题目，大家可以先试着做下，一开始我也没做出来（答案见文末附录）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用最多4条直线(笔尖不离纸)把下面的9个点连接起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nxsccj6aj30ck096t8z.jpg&quot; alt=&quot;image-20190503105014426&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有另一道题，是当年面试微信支付时被问到的类似题目，但微信的更难一点（拿3个桶倒出想要的重量），答案亦见文末附录：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;马戏团老板派小丑去附近河边打水给大象喝。因为想在里面加入一种特殊健康浓缩剂。所以需要整整7加仑水，不能多，也不能少。他给了小丑两个水桶，一个5加仑，一个3加仑，让小丑去打整整7加仑水。请问小丑该怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;效用概率做决策&quot;&gt;&lt;a href=&quot;#效用概率做决策&quot; class=&quot;headerlink&quot; title=&quot;效用概率做决策&quot;&gt;&lt;/a&gt;效用概率做决策&lt;/h3&gt;&lt;p&gt;如果大家经常逛知乎的话，会发现很多人在问：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;做安全需不需要考研？&lt;/li&gt;
&lt;li&gt;选择什么样的学校和专业好就业？&lt;/li&gt;
&lt;li&gt;选择什么样的职业更适合自己？&lt;/li&gt;
&lt;li&gt;其它…….&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;相信很多人做决策的时候，多会先分析出各项选择的优缺点再打分对比，选择出最佳方案，这叫&lt;strong&gt;利弊分析法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有时，我们又会先列出在意的点，根据重要程度作个加权值，然后给个选择打分，根据分数高低来排序选择，这叫&lt;strong&gt;加权排序法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还有决策法、矩阵分析法、概率树等等多种决策分析方法，在我们在决策时，能够给我们提供很大的帮助。&lt;/p&gt;
&lt;p&gt;不过我在这里，重点是想介绍下&lt;strong&gt;效用分析法&lt;/strong&gt;，即分析某个结果对我们的价值，通常跟概率一块使用。&lt;/p&gt;
&lt;p&gt;打个比方，一名大四学生在规划自己的人生。摆在他面前的有三种选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成为旅行作家；&lt;/li&gt;
&lt;li&gt;加入外交部；&lt;/li&gt;
&lt;li&gt;成为公司销售人员。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里肯定不能只从金钱回报来考虑这个问题，因为这名学生真正看重的并不是赚多少钱，而是自己从事这份工作时的内心感受。&lt;/p&gt;
&lt;p&gt;若是以前，我可能会列出收入、职业前景、兴趣、工作环境等多个维度来考虑。但是某些场景下，我们常常忽略实现这一结果的概率，比如我想当皇帝，这种不是靠努力就能实现的。&lt;/p&gt;
&lt;p&gt;因此这里最好的办法就是去计算每份职业的期望值（Expected Value, 简称EV）。EV计算公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EV = 效用(某种结果带给我们的心理满足度) x 出现这种结果的概率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据上述公式，我们得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nzxuyujbj30lj088jsm.jpg&quot; alt=&quot;image-20190503120444342&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里每种结果存在实现概率，是因为该结果要求一定的技能，而这名学生此时并不完全具备这些技能。&lt;/p&gt;
&lt;p&gt;根据上面的分析，该学生选择加入外部部的期望值最高，所以理性地说，他应该选择这份工作。&lt;/p&gt;
&lt;h3 id=&quot;五大常见推理漏洞&quot;&gt;&lt;a href=&quot;#五大常见推理漏洞&quot; class=&quot;headerlink&quot; title=&quot;五大常见推理漏洞&quot;&gt;&lt;/a&gt;五大常见推理漏洞&lt;/h3&gt;&lt;p&gt;通常说的推理漏洞，大多是指那些跟我们所做假设相关的漏洞。书中列举出五大常见推理漏洞：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;比较和类比假设漏洞：偷换概念&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;把两个虽然不同，但逻辑上却相等的事物进行对比。&lt;/p&gt;
&lt;p&gt;比如拿橘子和苹果作比较。再比如说，医学院校经常拿小白鼠做实验，然后把在动物身上得到的实验结果当作参考，但是若因小白鼠身上实验某种药物时发生某种并发症，就认为人类在使用这种药物时也会出现同样的并发症，就是错误的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;代表性假设漏洞：以偏概全&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不能拿特殊案例来代表整体，统计的样本要足够多才行，否则它就会弱化我们的论断。&lt;/p&gt;
&lt;p&gt;比如《思考，快与慢》中曾举过一个例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近，某大医院出生婴儿1000人， 某小医院出生婴儿50人， 问哪家医院生男婴的比例大于60%的可能性较大？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们都知道生男生女的概率分别是50%，统计样本越多就越会接进这个数值，但如果你若去小医院，它的波动概率就很大，可能生男80%，也可以40%，所以小医院生男婴的比例就越有可能大于60%。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;“好证据”假设漏洞：对相关证据视而不见&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们不经验证就想当然地认为自己的证据有效时，就很容易犯此错误。那些比较客观、相关、精确、真实的证据有利于强化我们的论述；而主观、不具代表性、不精确的论据则只会弱化我们的论述。&lt;/p&gt;
&lt;p&gt;比如，一个不愿意戒烟的人总是会看到吸烟有利的一面，而对那些支持戒烟的事实会视而不见。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;因果假设漏洞：混淆因果关系&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们错误地做出因果假设，或者在没有证据的情况下就认定一件事会导致另外一件事时，就会犯这种错误。&lt;/p&gt;
&lt;p&gt;比如，每个活过百岁的人都喝过白开水，所以就认定经常喝白开水就能长命百岁，这显然是错误，它们不存在直接的因果关系。很多学术界的社会/生物健康调查相关的报导就经常出现这种错误。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;实施假设漏洞：在执行计划时没有提前考虑可能出现的瓶颈&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们没有预料到计划实施过程可能出一的瓶颈，或者盲目地相信自己的计划会轻而易举地得到落实时，我们就会犯这种错误。&lt;/p&gt;
&lt;p&gt;比如，几年前，西方某旅行杂志曾登过一篇文章说：”因为如今搭乘飞机很方便，而且人们手头余钱也越来越多，所以很快大家都会去非洲看狮子了。”&lt;/p&gt;
&lt;p&gt;这显然就是错误的，去不去非洲看狮子，并非单纯考虑金钱和交通就行，比如先问问你有没有年假再说吧！&lt;/p&gt;
&lt;h3 id=&quot;识别常见的逻辑漏洞&quot;&gt;&lt;a href=&quot;#识别常见的逻辑漏洞&quot; class=&quot;headerlink&quot; title=&quot;识别常见的逻辑漏洞&quot;&gt;&lt;/a&gt;识别常见的逻辑漏洞&lt;/h3&gt;&lt;p&gt;根据书中列举的常见逻辑漏洞，我画了张思维导图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://riusksk.me/media/常见逻辑漏洞识别.svg&quot; alt=&quot;常见逻辑漏洞识别&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;附录&quot;&gt;&lt;a href=&quot;#附录&quot; class=&quot;headerlink&quot; title=&quot;附录&quot;&gt;&lt;/a&gt;附录&lt;/h3&gt;&lt;p&gt;1、9点连线的答案：多数人会受限于前提条件：只能在9个点内形成的长方形之内画线，如果能够摆脱该前提条件，那么答案就会有很多种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nyan53h1j30440a73yu.jpg&quot; alt=&quot;image-20190503110749773&quot;&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nz31v5o9j30900akwfd.jpg&quot; alt=&quot;image-20190503113506286&quot;&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nz1dfjtvj30af071t93.jpg&quot; alt=&quot;image-20190503113329718&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、水桶题目的答案：先倒满5加仑的水桶，再把它倒进3加仑水桶，把3加仑水桶里的水倒掉，把5加仑水桶里剩下的2加仑水倒进3加仑水桶里，重新装满5加仑水桶（5加仑 + 2加仑 = 7加仓）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近读了一本书叫《一本小小的蓝色逻辑书》，算是逻辑推理入门书籍，觉得不错，推荐给大家。&lt;/p&gt;
&lt;p&gt;这本书在微信读书上可以找到，大概需要4个多小时的阅读时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nw
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="逻辑" scheme="http://riusksk.github.io/tags/%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>RSS: 优秀的个人情报来源</title>
    <link href="http://riusksk.github.io/2019/03/30/RSS-%E4%BC%98%E7%A7%80%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%83%85%E6%8A%A5%E6%9D%A5%E6%BA%90/"/>
    <id>http://riusksk.github.io/2019/03/30/RSS-优秀的个人情报来源/</id>
    <published>2019-03-30T01:42:03.000Z</published>
    <updated>2019-03-30T02:45:21.000Z</updated>
    
    <content type="html">&lt;p&gt;早些年，关注了一些技术博客，但不知道它是否更新文章，就只好偶而去翻翻看。关注的博客量少的时候，还应付得来，一旦多了，就觉得甚是费时间。&lt;/p&gt;
&lt;p&gt;后来才发现有RSS（聚合内容）这款神器，大大地节省时间，不用再不停地翻看别人的博客，一有更新，在自己的订阅网站或app上就可以查看到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1g1kl77qw0pj30ku11244m.jpg&quot; alt=&quot;image-20190330095736471&quot;&gt;&lt;/p&gt;
&lt;p&gt;以前用Google Reader，现在用Inoreader（&lt;a href=&quot;https://www.inoreader.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.inoreader.com&lt;/a&gt;），还提供手机APP，特别适合利用碎片时间查看和学习。&lt;/p&gt;
&lt;p&gt;我现在基本保持每天翻看，一定要把未读消息消灭掉。&lt;/p&gt;
&lt;p&gt;由于多年订阅源的收集积累，每天都有不少更新的消息，即使前天刚把失效的订阅源清理掉，也还有700多个。&lt;/p&gt;
&lt;p&gt;以前曾看到某同事的RSS订阅，上千条未读消息，平时看得少，结果越堆越多，导致未能发挥RSS应有的价值。&lt;/p&gt;
&lt;p&gt;我觉得RSS应该是每个想保持学习进步的人应该必备的工具。&lt;/p&gt;
&lt;p&gt;对于我个人而言，RSS有以下作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;应急响应&lt;/strong&gt;：及时获取外部曝光的漏洞，包括公司产品漏洞，以及可能影响公司产品的第三方通用组件/开源项目漏洞，以便能够及时响应处理；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;刷CVE&lt;/strong&gt;：及时获知某些主流软件的攻击面，或者一些漏洞挖掘技巧，然后主动尝试去挖掘。以前有不少人在乌云上曝光某一通用漏洞，就经常有一大堆去刷SRC，或者在乌云上不停地刷别人的漏洞，这种行为我觉得挺无聊的。这里刷CVE主要是指Microsoft、Apple、Adobe等一系列主流厂商的产品的0day，而不是以往乌云上这种相同漏洞在不同平台刷洞的行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术与工具的收集&lt;/strong&gt;：包括技术文章和工具的收集与学习，对于好的工具，会下载学习其源码，并应用实践；对于好的文章，会保存到印象笔记，方便以后查询复习。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全资讯&lt;/strong&gt;：看看一些发安全界发生哪些安全事件，比如入侵事件、facebook信息泄露事件等等，也学习下别人如何就应对此类事件。除此之外，当然也包括安全界的一些八卦。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新书资讯&lt;/strong&gt;：专门订阅一些出版社的相关博客/官网，以便能够及时获取即将出版的新书。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其它&lt;/strong&gt;：更多的用途靠自己去挖掘，毕竟每个人的期望的目标不一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于那些未提供RSS功能，又非常不错的网站，推荐使用Feed43(&lt;a href=&quot;https://feed43.com/feed.html?action=new)自定义规则来生成RSS，可直接导入到Inoreader，使用教程参考：《利用&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://feed43.com/feed.html?action=new)自定义规则来生成RSS，可直接导入到Inoreader，使用教程参考：《利用&lt;/a&gt; Feed43，将任意网页制作成 RSS 订阅源》&lt;a href=&quot;https://sspai.com/post/34320&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://sspai.com/post/34320&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后分享一下个人收集的RSS，共731个，Inoreader免费版最多支持500个，不想付费的可以找下其它免费RSS工具，或者选择部分订阅。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://riusksk.me/media/riusksk_RSS_20190330.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.me/media/riusksk_RSS_20190330.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g1km7tyayfj30qv0eztc8.jpg&quot; alt=&quot;image-20190330103252935&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;早些年，关注了一些技术博客，但不知道它是否更新文章，就只好偶而去翻翻看。关注的博客量少的时候，还应付得来，一旦多了，就觉得甚是费时间。&lt;/p&gt;
&lt;p&gt;后来才发现有RSS（聚合内容）这款神器，大大地节省时间，不用再不停地翻看别人的博客，一有更新，在自己的订阅网站或app上就可
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>今年的OffensiveCon大会议题质量不错</title>
    <link href="http://riusksk.github.io/2019/02/22/%E4%BB%8A%E5%B9%B4%E7%9A%84OffensiveCon%E5%A4%A7%E4%BC%9A%E8%AE%AE%E9%A2%98%E4%B8%8D%E9%94%99/"/>
    <id>http://riusksk.github.io/2019/02/22/今年的OffensiveCon大会议题不错/</id>
    <published>2019-02-22T13:15:48.000Z</published>
    <updated>2019-02-23T06:28:04.000Z</updated>
    
    <content type="html">&lt;p&gt;年前曾在微博上推荐过OffensiveCon 2019大会议题，议题列表与介绍可参见官网（&lt;a href=&quot;https://www.offensivecon.org/agenda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.offensivecon.org/agenda/&lt;/a&gt;），很多专注于漏洞挖掘与利用的干货分享，目前只有部分议题ppt公开，文末附打包下载链接（包含8个议题），包括ppt、paper和code。&lt;/p&gt;
&lt;p&gt;会议结束后，Twitter上赞声一片，议题质量很赞。&lt;/p&gt;
&lt;p&gt;本文主要聊聊已公开的一些议题，学习下思路。&lt;/p&gt;
&lt;h3 id=&quot;议题列表&quot;&gt;&lt;a href=&quot;#议题列表&quot; class=&quot;headerlink&quot; title=&quot;议题列表&quot;&gt;&lt;/a&gt;议题列表&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. Modern Source Fuzzing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. IPC You Outside the Sandbox: One bug to Rule the Chrome Broker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 3D Accelerated Exploitation &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. Bugs so Nice they Patched them Twice! A (Continuing)? Story About Failed Patches &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. Attacking Hardware Root of Trust from UEFI Firmware&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6. OSX XPC Revisited - 3rd Party Application Flaws&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7. Growing Hypervisor 0day with Hyperseed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8. Attacking Edge Through the JavaScript Just-In-Time compiler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9. Coverage-Guided USB Fuzzing with Syzkaller&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10. Updated Analysis of PatchGuard on Windows RS4: Is the Mouse Finally Caught?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11. iOS Dual Booting Demystified&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12. macOS: How to Gain Root with CVE-2018-4193 in &amp;lt; 10s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13. Reverse Engineering of Error-Correcting Codes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14. Glitch in the Matrix: Exploiting Bitcoin Hardware Wallets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15. Attack Surface of a Connected Vehicle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16. Bypass Windows Exploit Guard ASR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17. FuzzIL: Guided Fuzzing for JavaScript Engines&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Modern-Source-Fuzzing&quot;&gt;&lt;a href=&quot;#Modern-Source-Fuzzing&quot; class=&quot;headerlink&quot; title=&quot;Modern Source Fuzzing&quot;&gt;&lt;/a&gt;Modern Source Fuzzing&lt;/h3&gt;&lt;p&gt;这是作者Ned Willliamson在353c大会上的《Attack Chrome IPC》议题的扩展补充，我之前还写过&lt;a href=&quot;https://mp.weixin.qq.com/s/WrSZpqgq6gvZwEIqghqggg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《安全研究者的自我修养》&lt;/a&gt;一文，里面介绍的就是作者提及的二进制漏洞研究的学习思路。&lt;/p&gt;
&lt;p&gt;目前作者没公开这次会议的ppt，大家还是看353C的演讲视频吧：&lt;a href=&quot;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##IPC You Outside the Sandbox: One bug to Rule the Chrome Broker&lt;/p&gt;
&lt;p&gt;作者已经在github上公布此漏洞的利用代码hack2win-chrome，点击”阅读原文“可下载到。&lt;/p&gt;
&lt;p&gt;本议题讲的是Chrome沙盒逃逸漏洞，漏洞位于应用缓存（AppCache）子系统上，主要方便从本地读取数据进行离线浏览，访问速度更快，还能缓解服务器压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g49kv5o5j30uu0gqjta.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;AppCache位于沙盒之外的高权限进程browser，沙盒内低权限的renderer进程通过发送IPC消息与browser进程交互的，当AppCache出漏洞时，就有可能逃逸出沙盒。&lt;/p&gt;
&lt;h4 id=&quot;漏洞成因&quot;&gt;&lt;a href=&quot;#漏洞成因&quot; class=&quot;headerlink&quot; title=&quot;漏洞成因&quot;&gt;&lt;/a&gt;漏洞成因&lt;/h4&gt;&lt;p&gt;这次的ppt写得比较模糊，没那么清楚，还是直接看patch diff：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g4jvylq6j30n409gab8.jpg&quot; alt=&quot;image-20190223095905435&quot;&gt;&lt;/p&gt;
&lt;p&gt;移动&lt;code&gt;CancelUpdate()&lt;/code&gt;函数到&lt;code&gt;newest_complete_cache_=nullptr;&lt;/code&gt;之后，直接看看CancelUpdate里面的逻辑：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g4mnl13hj31da0lf7co.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;在调用&lt;code&gt;AppCacheGroup::RemoveCache&lt;/code&gt;清除缓存时，&lt;code&gt;newest_complete_cache_&lt;/code&gt;指向的是被销毁的对象，所以后面才要把它置空，但在销毁之前调用了&lt;code&gt;CancelUpdate&lt;/code&gt; =&amp;gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;AppCacheUPdateJob::~AppCacheUpdateJob&lt;/code&gt; =&amp;gt; &lt;code&gt;AppCacheGroup::SetUpdateAppCacheStatus&lt;/code&gt; =&amp;gt; &lt;code&gt;AppCacheHost::OnupdateComplete&lt;/code&gt; =&amp;gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;SetSwappableCache&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后的&lt;code&gt;SetSwappableCache&lt;/code&gt;用于设置新的交换缓存（swap cache），会引用到&lt;code&gt;newest_complete_cache_&lt;/code&gt;，而此时它还未被置NULL，导致出现Use After Free漏洞。&lt;/p&gt;
&lt;p&gt;####漏洞利用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;【泄露地址】&lt;/strong&gt;：使用与&lt;code&gt;AppCache&lt;/code&gt;对象大小相同的&lt;code&gt;net::CanonicalCookie&lt;/code&gt;对象来占用释放对象的内存，而&lt;code&gt;CanonicalCookie&lt;/code&gt;对象开头是个cookie名称，即字符串指针，再从浏览器中读取cookie信息来达到信息泄露的目的，从而拿到可控数据的堆地址绕过ASLR。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;【代码执行】&lt;/strong&gt;：使用与&lt;code&gt;AppCache&lt;/code&gt;对象大小相同的&lt;code&gt;Blob&lt;/code&gt;对象对占用释放内存，再伪造&lt;code&gt;AppCacheGroup&lt;/code&gt;对象，当它析构释放时，在&lt;code&gt;~AppCacheGroup&lt;/code&gt;中会调用到已被填充控制的虚函数指针，再结合ROP绕过DEP，从而达到代码执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整个过程还是需要自己动手调试一遍才比较清楚，估计足够调上几天了，国内似乎也没有一遍完整的文章分析过该漏洞的利用细节，期待有人分享。&lt;/p&gt;
&lt;h3 id=&quot;3D-Accelerated-Exploitation&quot;&gt;&lt;a href=&quot;#3D-Accelerated-Exploitation&quot; class=&quot;headerlink&quot; title=&quot;3D Accelerated Exploitation&quot;&gt;&lt;/a&gt;3D Accelerated Exploitation&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g92avay4j30q90epmyq.jpg&quot; alt=&quot;image-20190223123509759&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g92kdcraj30qw0evmz6.jpg&quot; alt=&quot;image-20190223123527727&quot;&gt;&lt;/p&gt;
&lt;p&gt;该议题主要介绍VirsualBox 3D加速器的攻击面和漏洞利用，由于VBox是开源的，因此可以直接使用AFL 去Fuzzing，fuzz目标就是通过发送畸形chromium messages来触发漏洞。他们应该是自己写个构造发送消息的程序，输入文件即chromium messages内容，样本可能是收集550操作码的信息去构造，也可能通过hook去直接抓取真实数据作为样本，然后用 afl去跑。更具体的实现方式，作者也没细说。&lt;/p&gt;
&lt;p&gt;MWR Labs这几年经常曝光一些Pwn2Own级别的漏洞，分享很多经典文章，还开源了不少Fuzzer工具，连ppt都做得非常工整，具有独特风格，哪怕没logo，你看一眼都能猜出是他们写的。具备牛X的技能能力，又乐分享，这点是比较难得的。&lt;/p&gt;
&lt;h3 id=&quot;Attacking-Edge-Through-the-JavaScript-Just-In-Time-compiler&quot;&gt;&lt;a href=&quot;#Attacking-Edge-Through-the-JavaScript-Just-In-Time-compiler&quot; class=&quot;headerlink&quot; title=&quot;Attacking Edge Through the JavaScript Just-In-Time compiler&quot;&gt;&lt;/a&gt;Attacking Edge Through the JavaScript Just-In-Time compiler&lt;/h3&gt;&lt;p&gt;一直以来，chakra被曝的漏洞非常多，导致微软最终还是放弃了。&lt;/p&gt;
&lt;p&gt;从今年开始，微软将打算把Edge的Chakra引擎改用Google Chromium引擎，估计最近这两个月就会发布，以后就可能没什么人再搞Chakra内核了。&lt;/p&gt;
&lt;p&gt;这议题里面讲了很多chakra的js对象内存结构等基础知识，重点讲了JIT优化编译器的漏洞原理与利用技巧，整个ppt有120页，很多。&lt;/p&gt;
&lt;p&gt;我没搞过chakra，未来可能也用不上了，有兴趣的同学可以看下，作者把exploit代码也公布了，我已附在本文的打包资料里面。&lt;/p&gt;
&lt;h3 id=&quot;Coverage-Guided-USB-Fuzzing-with-Syzkaller&quot;&gt;&lt;a href=&quot;#Coverage-Guided-USB-Fuzzing-with-Syzkaller&quot; class=&quot;headerlink&quot; title=&quot;Coverage-Guided USB Fuzzing with Syzkaller&quot;&gt;&lt;/a&gt;Coverage-Guided USB Fuzzing with Syzkaller&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1g0g9s9xi19j30l30bxt9q.jpg&quot; alt=&quot;image-20190223130009940&quot;&gt;&lt;/p&gt;
&lt;p&gt;搞过Linux/Android内核漏洞挖掘的人，应该都知道Syzkaller这款神器，发现超过2500个内核bug，它是基于代码覆盖率+API调用模板来Fuzzing内核的工具，对于发现崩溃的漏洞，还能自动生成C代码帮助复现，是由Google的Dmitry Vyukov开发的，已在Github上开源多年（&lt;a href=&quot;https://github.com/google/syzkaller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/syzkaller&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;这次作者用syzkaller fuzz USB驱动共发现了80+个bug，它先开启kcov去收集代码覆盖率信息，写了两个usb操作的描述模板（vusb.txt用来生成usb消息，vusb_ids.txt用于提取与USB设备驱动相匹配的USB ID列表），ppt里面有链接，所有的usb fuzzer代码都已经嵌入到syzkaller项目里面了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1g0ga2by0rlj30me0c9q4g.jpg&quot; alt=&quot;image-20190223130949191&quot;&gt;&lt;/p&gt;
&lt;p&gt;整个syzkaller的使用过程就是先去寻找内核的攻击面，然后构造api调用模板，剩下交由syzkaller基于代码覆盖驱动的方式去Fuzzing，有点类似api fuzzing。只是这里作者又写了个USB内核模块，方便通过用户层发送USB消息去测试。&lt;/p&gt;
&lt;p&gt;作者还专门搞了个树莓派来重现漏洞，演示通过USB去让Windows/Linux系统崩溃。&lt;/p&gt;
&lt;h3 id=&quot;FuzzIL-Guided-Fuzzing-for-JavaScript-Engines&quot;&gt;&lt;a href=&quot;#FuzzIL-Guided-Fuzzing-for-JavaScript-Engines&quot; class=&quot;headerlink&quot; title=&quot;FuzzIL: Guided Fuzzing for JavaScript Engines&quot;&gt;&lt;/a&gt;FuzzIL: Guided Fuzzing for JavaScript Engines&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0gbap9yltj30m40brwg6.jpg&quot; alt=&quot;image-20190223135223721&quot;&gt;&lt;/p&gt;
&lt;p&gt;这议题最大的亮点在于：自定义一套中间语言IL，通过IL可以翻译成JS代码，然后通过变异IL来生成JS代码，与以往基于JS语法模板生成代码的方式不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1g0gbd32purj30ll0aitai.jpg&quot; alt=&quot;image-20190223135445955&quot;&gt;&lt;/p&gt;
&lt;p&gt;直接通过一行行删除IL的方式来验证是否崩溃或产生新路径，以此用来精简样本。&lt;/p&gt;
&lt;p&gt;整个Fuzzing过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1g0gbmzq8rqj30l50c4wg5.jpg&quot; alt=&quot;image-20190223140416987&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者未来会在github上开源（&lt;a href=&quot;https://github.com/googleprojectzero/fuzzilli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/fuzzilli&lt;/a&gt;），拭目以待。&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;访问 &lt;a href=&quot;https://github.com/riusksk/SecConArchive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/SecConArchive&lt;/a&gt;可获取议题的打包资料，除上述推荐的议题资料外，还有3个议题，包括”Bypass_Windows_Defender_ASR“、”macOS-How to Gain Root with CVE-2018-4193“，以及”OSX Privileged Helper Tool“，有兴趣的同学自行下载阅读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1g0gbyta5c9j307107oq3x.jpg&quot; alt=&quot;image-20190223141538809&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;年前曾在微博上推荐过OffensiveCon 2019大会议题，议题列表与介绍可参见官网（&lt;a href=&quot;https://www.offensivecon.org/agenda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.of
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>winafl中基于插桩的覆盖率反馈原理</title>
    <link href="http://riusksk.github.io/2019/02/02/winafl%E4%B8%AD%E5%9F%BA%E4%BA%8E%E6%8F%92%E6%A1%A9%E7%9A%84%E8%A6%86%E7%9B%96%E7%8E%87%E5%8F%8D%E9%A6%88%E5%8E%9F%E7%90%86/"/>
    <id>http://riusksk.github.io/2019/02/02/winafl中基于插桩的覆盖率反馈原理/</id>
    <published>2019-02-02T09:07:54.000Z</published>
    <updated>2019-02-02T09:08:43.000Z</updated>
    
    <content type="html">&lt;p&gt;最近&lt;code&gt;winafl&lt;/code&gt;增加支持对&lt;code&gt;Intel PT&lt;/code&gt;的支持的，但是只支持&lt;code&gt;x64&lt;/code&gt;，且覆盖率计算不全，比如条件跳转等，所以它现在还是不如直接用插桩去hook的方式来得准确完整，这里主要想分析也是基于    &lt;code&gt;DynamoRIO&lt;/code&gt;插桩的覆盖率反馈原理。&lt;/p&gt;
&lt;p&gt;之前曾有人在《初识 Fuzzing 工具 WinAFL》（&lt;a href=&quot;https://paper.seebug.org/323/#32）中“3.2.2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://paper.seebug.org/323/#32）中“3.2.2&lt;/a&gt; 插桩模块”一节中简单分析过其插桩原理，但没有找到我想要的答案，因此只好自动动手分析下源码。&lt;/p&gt;
&lt;p&gt;比如，我想知道：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过循环调用fuzzing的目标函数来提高速度，但&lt;code&gt;DynamoRIO&lt;/code&gt;的覆盖率信息是如何同步给fuzzer主进程的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体是如何实现寄存器环境的记录与恢复，从而实现目标函数的不断循环？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;覆盖率信息是如何记录与分析的？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;覆盖率信息记录与分析原理&quot;&gt;&lt;a href=&quot;#覆盖率信息记录与分析原理&quot; class=&quot;headerlink&quot; title=&quot;覆盖率信息记录与分析原理&quot;&gt;&lt;/a&gt;覆盖率信息记录与分析原理&lt;/h4&gt;&lt;p&gt;第3个问题发现已经有人分析过&lt;code&gt;afl&lt;/code&gt;，可以参见这里《AFL内部实现细节小记》（&lt;a href=&quot;http://rk700.github.io/2017/12/28/afl-internals/），简单总结下&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://rk700.github.io/2017/12/28/afl-internals/），简单总结下&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AFL在编译源码时，为每个代码生成一个随机数，代表位置地址;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在二元组中记录分支跳转的源地址与目标地址，将两者异或的结果为该分支的key，保存每个分支的执行次数，用1字节来储存；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存分支的执行次数实际上是一张大小为64K的哈希表，位于共享内存中，方便target进程与fuzzer进程之间共享，对应的伪代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cur_location = &amp;lt;COMPILE_TIME_RANDOM&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shared_mem[cur_location ^ prev_location]++; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prev_location = cur_location &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fuzzer进程通过buckets哈希桶来归类这些分支执行次数，如下结构定义，左边为执行次数，右边为记录值trace_bits：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; u8 count_class_lookup8[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]           = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]           = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]           = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]           = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]     = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]    = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;]   = &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;]  = &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于是否触发新路径，主要通过计算各分支的trace_bits的hash值（算法：&lt;code&gt;u32 cksum **=** hash32(trace_bits, MAP_SIZE常量, HASH_CONST常量);&lt;/code&gt;）是否发生变化来实现的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;覆盖信息的传递原理&quot;&gt;&lt;a href=&quot;#覆盖信息的传递原理&quot; class=&quot;headerlink&quot; title=&quot;覆盖信息的传递原理&quot;&gt;&lt;/a&gt;覆盖信息的传递原理&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先在fuzzer进程中先创建命名管道，其中fuzzer_id为随机值：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//afl-fuzz.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pipe_name = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)alloc_printf(&lt;span class=&quot;string&quot;&gt;&quot;\\\\.\\pipe\\afl_pipe_%s&quot;&lt;/span&gt;, fuzzer_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pipe_handle = CreateNamedPipe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pipe_name,                &lt;span class=&quot;comment&quot;&gt;// pipe name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIPE_ACCESS_DUPLEX |     &lt;span class=&quot;comment&quot;&gt;// read/write access &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FILE_FLAG_OVERLAPPED,    &lt;span class=&quot;comment&quot;&gt;// overlapped mode &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,                        &lt;span class=&quot;comment&quot;&gt;// max. instances&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;,                      &lt;span class=&quot;comment&quot;&gt;// output buffer size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;,                      &lt;span class=&quot;comment&quot;&gt;// input buffer size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;20000&lt;/span&gt;,                    &lt;span class=&quot;comment&quot;&gt;// client time-out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);                    &lt;span class=&quot;comment&quot;&gt;// default security attribute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建drrun进程去运行目标程序并Hook，在childpid_(%fuzzer_id%).txt的文件中记录子进程id，即目标进程ID，然后等待管道连接，并通过读取上述txt文件以获取目标进程id，主要用来后面超时中断进程的：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//afl-fuzz.c    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pidfile = alloc_printf(&lt;span class=&quot;string&quot;&gt;&quot;childpid_%s.txt&quot;&lt;/span&gt;, fuzzer_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (persist_dr_cache) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cmd = alloc_printf(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;&quot;%s\\drrun.exe -pidfile %s -no_follow_children -persist -persist_dir \&quot;%s\\drcache\&quot; -c winafl.dll %s -fuzzer_id %s -drpersist -- %s&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dynamorio_dir, pidfile, out_dir, client_params, fuzzer_id, target_cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cmd = alloc_printf(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;&quot;%s\\drrun.exe -pidfile %s -no_follow_children -c winafl.dll %s -fuzzer_id %s -- %s&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dynamorio_dir, pidfile, client_params, fuzzer_id, target_cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!CreateProcess(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, cmd, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, inherit_handles, CREATE_SUSPENDED, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;si, &amp;amp;pi)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FATAL(&lt;span class=&quot;string&quot;&gt;&quot;CreateProcess failed, GLE=%d.\n&quot;&lt;/span&gt;, GetLastError());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!OverlappedConnectNamedPipe(pipe_handle, &amp;amp;pipe_overlapped)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      FATAL(&lt;span class=&quot;string&quot;&gt;&quot;ConnectNamedPipe failed, GLE=%d.\n&quot;&lt;/span&gt;, GetLastError());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  watchdog_enabled = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(drioless == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//by the time pipe has connected the pidfile must have been created&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fp = fopen(pidfile, &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!fp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      FATAL(&lt;span class=&quot;string&quot;&gt;&quot;Error opening pidfile.txt&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fseek(fp,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,SEEK_END);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pidsize = ftell(fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fseek(fp,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,SEEK_SET);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buf = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(pidsize+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fread(buf, pidsize, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buf[pidsize] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose(fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    remove(pidfile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child_pid = atoi(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ck_free(pidfile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child_pid = pi.dwProcessId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在插桩模块winafl.dll中打开前面创建的命名管道，然后通过管道与fuzzer主进程进行交互：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//winafl.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setup_pipe() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pipe = CreateFile(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         options.pipe_name,   &lt;span class=&quot;comment&quot;&gt;// pipe name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         GENERIC_READ |  &lt;span class=&quot;comment&quot;&gt;// read and write access&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         GENERIC_WRITE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,              &lt;span class=&quot;comment&quot;&gt;// no sharing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,           &lt;span class=&quot;comment&quot;&gt;// default security attributes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         OPEN_EXISTING,  &lt;span class=&quot;comment&quot;&gt;// opens existing pipe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,              &lt;span class=&quot;comment&quot;&gt;// default attributes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);          &lt;span class=&quot;comment&quot;&gt;// no template file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pipe == INVALID_HANDLE_VALUE) DR_ASSERT_MSG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;error connecting to pipe&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReadCommandFromPipe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DWORD num_read;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ReadFile(pipe, &amp;amp;result, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;num_read, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WriteCommandToPipe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; cmd)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DWORD num_written;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	WriteFile(pipe, &amp;amp;cmd, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;num_written, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当插桩模块winafl.dll监测到程序首次运行至目标函数入口时，&lt;code&gt;pre_fuzz_handler&lt;/code&gt;函数会被执行，然后通过管道写入’P’命令，代表开始进入目标函数，afl-fuzz.exe进程收到命令后，会向目标进程写入管道命令’F’，并监测超时时间和循环调用次数。afl-fuzz.exe与目标进程正是通过读写管道命令来交互的，主要有’F’（退出目标函数）、’P’（进入目标函数）、’K’（超时中断进程）、’C’（崩溃）、’Q’（退出进程）。覆盖信息通过文件映射方法（内存共享）写入&lt;code&gt;winafl_data.afl_area&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//winafl.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pre_fuzz_handler(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *wrapcxt, INOUT &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **user_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!options.debug_mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		WriteCommandToPipe(&lt;span class=&quot;string&quot;&gt;&#39;P&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		command = ReadCommandFromPipe();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(command != &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(command == &lt;span class=&quot;string&quot;&gt;&#39;Q&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dr_exit_process(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                DR_ASSERT_MSG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;unrecognized command received over pipe&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        debug_data.pre_hanlder_called++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr_fprintf(winafl_data.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;In pre_fuzz_handler\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(winafl_data.afl_area, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, MAP_SIZE);	&lt;span class=&quot;comment&quot;&gt;// 用于存储覆盖率信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(options.coverage_kind == COVERAGE_EDGE || options.thread_coverage) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **thread_data = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **)drmgr_get_tls_field(drcontext, winafl_tls_field);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        thread_data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        thread_data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = winafl_data.afl_area;	&lt;span class=&quot;comment&quot;&gt;//如果开启-thread_coverage选项，则会将覆盖率信息写入线程TLS中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//winafl.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setup_shmem() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   HANDLE map_file;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   map_file = OpenFileMapping(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   FILE_MAP_ALL_ACCESS,   &lt;span class=&quot;comment&quot;&gt;// read/write access&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   FALSE,                 &lt;span class=&quot;comment&quot;&gt;// do not inherit the name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   options.shm_name);     &lt;span class=&quot;comment&quot;&gt;// name of mapping object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (map_file == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) DR_ASSERT_MSG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;error accesing shared memory&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   winafl_data.afl_area = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) MapViewOfFile(map_file, &lt;span class=&quot;comment&quot;&gt;// handle to map object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               FILE_MAP_ALL_ACCESS,  &lt;span class=&quot;comment&quot;&gt;// read/write permission&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               MAP_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (winafl_data.afl_area == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) DR_ASSERT_MSG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;error accesing shared memory&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;篡改目标函数循环调用的原理&quot;&gt;&lt;a href=&quot;#篡改目标函数循环调用的原理&quot; class=&quot;headerlink&quot; title=&quot;篡改目标函数循环调用的原理&quot;&gt;&lt;/a&gt;篡改目标函数循环调用的原理&lt;/h3&gt;&lt;p&gt;此步的关键就在于进入目标函数前调用的&lt;code&gt;pre_fuzz_handler&lt;/code&gt;函数，以及函数退出后调用的&lt;code&gt;post_fuzz_handler&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;进入&lt;code&gt;pre_fuzz_handler&lt;/code&gt;函数时，winafl.dll会先获取以下信息&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app_pc target_to_fuzz = drwrap_get_func(wrapcxt);	&lt;span class=&quot;comment&quot;&gt;//获取目标函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dr_mcontext_t&lt;/span&gt; *mc = drwrap_get_mcontext_ex(wrapcxt, DR_MC_ALL);	&lt;span class=&quot;comment&quot;&gt;//获取目标函数当前内存上下文信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drcontext = drwrap_get_drcontext(wrapcxt);	&lt;span class=&quot;comment&quot;&gt;//获取DynamoRIO上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fuzz_target.xsp = mc-&amp;gt;xsp;	&lt;span class=&quot;comment&quot;&gt;// 保存栈指针,xsp是各平台下的通用标记变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fuzz_target.func_pc = target_to_fuzz;	&lt;span class=&quot;comment&quot;&gt;// 目标函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中内存上下文信息支持各平台的寄存器记录：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;dr_mcontext_t&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The size of this structure.  This field must be set prior to filling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * in the fields to support forward compatibility.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The valid fields of this structure.  This field must be set prior to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * filling in the fields.  For input requests (dr_get_mcontext()), this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * indicates which fields should be written.  Writing the multimedia fields&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * frequently can incur a performance hit.  For output requests&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * (dr_set_mcontext() and dr_redirect_execution()), this indicates which&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * fields will be copied to the actual context.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dr_mcontext_flags_t&lt;/span&gt; flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; AARCHXX&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r0;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r0 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r1;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r1 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r2;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r2 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r3;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r3 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r4;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r4 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r5;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r5 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r6;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r6 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r7;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r7 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r8;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r8 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r9;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r9 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r10;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r10 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r11;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r11 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r12;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r12 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; X64 &lt;span class=&quot;comment&quot;&gt;/* 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r13;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r13 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r14;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r14 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r15;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r15 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r16;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r16 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r17;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r17 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r18;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r18 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r19;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r19 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r20;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r20 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r21;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r21 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r22;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r22 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r23;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r23 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r24;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r24 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r25;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r25 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r26;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r26 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r27;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r27 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r28;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r28 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r29;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r29 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r30; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r30 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; lr;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The link register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for r30/lr register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r31; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r31 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; sp;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The stack pointer register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xsp; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for the stack pointer register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for r31/sp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The program counter.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * \note This field is not always set or read by all API routines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte *pc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint xflags; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for condition flags. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            uint nzcv; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; Condition flags (status register). */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            uint fpcr; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; Floating-Point Control Register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            uint fpsr; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; Floating-Point Status Register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; AArch64 flag registers. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for flag registers. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 32-bit */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r13; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r13 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; sp;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The stack pointer register.*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xsp; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for the stack pointer register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for r13/sp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r14; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r14 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; lr;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The link register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for r14/lr register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The anonymous union of alternative names for r15/pc register.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * \note This field is not always set or read by all API routines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r15; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r15 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte *pc;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The program counter. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint xflags; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full APSR register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint apsr; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The application program status registers in AArch32. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint cpsr; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The current program status registers in AArch32. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for apsr/cpsr register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 64/32-bit */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The SIMD registers.  We would probably be ok if we did not preserve the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * callee-saved registers (q4-q7 == d8-d15) but to be safe we preserve them&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * all.  We do not need anything more than word alignment for OP_vldm/OP_vstm,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * and dr_simd_t has no fields larger than 32 bits, so we have no padding.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dr_simd_t&lt;/span&gt; simd[NUM_SIMD_SLOTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* X86 */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xdi; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rdi/edi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rdi, edi); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rdi/edi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rdi/edi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xsi; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rsi/esi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rsi, esi); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rsi/esi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rsi/esi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xbp; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rbp/ebp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rbp, ebp); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rbp/ebp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rbp/ebp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xsp; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rsp/esp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rsp, esp); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rsp/esp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rsp/esp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xbx; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rbx/ebx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rbx, ebx); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rbx/ebx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rbx/ebx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xdx; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rdx/edx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rdx, edx); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rdx/edx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rdx/edx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xcx; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rcx/ecx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rcx, ecx); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rcx/ecx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rcx/ecx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xax; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rax/eax register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rax, eax); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rax/eax register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rax/eax register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; X64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r8;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r8 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r9;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r9 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r10; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r10 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r11; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r11 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r12; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r12 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r13; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r13 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r14; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r14 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r15; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r15 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xflags; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                           full rflags/eflags register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rflags, eflags); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                                rflags/eflags register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rflags/eflags register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Anonymous union of alternative names for the program counter /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * instruction pointer (eip/rip). \note This field is not always set or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * read by all API routines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte *xip; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rip/eip register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte *pc; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent alt name for full rip/eip register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;byte *&lt;span class=&quot;title&quot;&gt;IF_X64_ELSE&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(rip, eip)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rip/eip register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte padding[PRE_XMM_PADDING]; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The padding to get ymm field 32-byte aligned. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The SSE registers xmm0-xmm5 (-xmm15 on Linux) are volatile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * (caller-saved) for 64-bit and WOW64, and are actually zeroed out on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Windows system calls.  These fields are ignored for 32-bit processes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * that are not WOW64, or if the underlying processor does not support&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * SSE.  Use dr_mcontext_xmm_fields_valid() to determine whether the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * fields are valid.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * When the fields are valid, on processors with AVX enabled (i.e.,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * proc_has_feature(FEATURE_AVX) returns true), these fields will&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * contain the full ymm register values; otherwise, the top 128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * bits of each slot will be undefined.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dr_ymm_t&lt;/span&gt; ymm[NUM_SIMD_SLOTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ARM/X86 */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;dr_mcontext_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来就是获取和设置fuzzed的目标函数参数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//save or restore arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!options.no_loop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fuzz_target.iteration == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; options.num_fuz_args; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            options.func_args[i] = drwrap_get_arg(wrapcxt, i);	&lt;span class=&quot;comment&quot;&gt;//首次运行先获取运行参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; options.num_fuz_args; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            drwrap_set_arg(wrapcxt, i, options.func_args[i]);	&lt;span class=&quot;comment&quot;&gt;//设置运行参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当目标函数退出后，执行&lt;code&gt;post_fuzz_handler&lt;/code&gt;函数，会恢复栈顶指针和pc地址，以此实现目标函数的循环调用：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post_fuzz_handler(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *wrapcxt, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *user_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dr_mcontext_t&lt;/span&gt; *mc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mc = drwrap_get_mcontext(wrapcxt);	&lt;span class=&quot;comment&quot;&gt;//获取上下文信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!options.debug_mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		WriteCommandToPipe(&lt;span class=&quot;string&quot;&gt;&#39;K&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        debug_data.post_handler_called++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr_fprintf(winafl_data.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;In post_fuzz_handler\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* We don&#39;t need to reload context in case of network-based fuzzing. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (options.no_loop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;//网络型Fuzzing无需重载上下文信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//超过循环次数就退出进程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fuzz_target.iteration++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fuzz_target.iteration == options.fuzz_iterations) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr_exit_process(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mc-&amp;gt;xsp = fuzz_target.xsp;			&lt;span class=&quot;comment&quot;&gt;//恢复栈顶指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mc-&amp;gt;pc = fuzz_target.func_pc;		&lt;span class=&quot;comment&quot;&gt;//篡改pc地址加原目标函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	drwrap_redirect_execution(wrapcxt);	&lt;span class=&quot;comment&quot;&gt;//篡改执行流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;总结下整个&lt;code&gt;winafl&lt;/code&gt;执行流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;afl-fuzz.exe通过创建命名管道与内存映射来实现与目标进程交互，其中管道用来发送和接收命令相互操作对方进程，内存映射主要用来记录覆盖率信息；&lt;/li&gt;
&lt;li&gt;覆盖率记录主要通过&lt;code&gt;drmgr_register_bb_instrumentation_event&lt;/code&gt;去设置BB执行的回调函数，通过&lt;code&gt;instrument_bb_coverage&lt;/code&gt;或者&lt;code&gt;instrument_edge_coverage&lt;/code&gt;来记录覆盖率情况，如果发现新的执行路径，就将样本放入队列目录中，用于后续文件变异，以提高代码覆盖率；&lt;/li&gt;
&lt;li&gt;目标进程执行到目标函数后，会调用&lt;code&gt;pre_fuzz_handler&lt;/code&gt;来存储上下文信息，包括寄存器和运行参数；&lt;/li&gt;
&lt;li&gt;目标函数退出后，会调用&lt;code&gt;post_fuzz_handler&lt;/code&gt;函数，记录恢复上下文信息，以执行回原目标函数，又回到第2步；&lt;/li&gt;
&lt;li&gt;目录函数运行次数达到指定循环调用次数时，会中断进程退出。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近&lt;code&gt;winafl&lt;/code&gt;增加支持对&lt;code&gt;Intel PT&lt;/code&gt;的支持的，但是只支持&lt;code&gt;x64&lt;/code&gt;，且覆盖率计算不全，比如条件跳转等，所以它现在还是不如直接用插桩去hook的方式来得准确完整，这里主要想分析也是基于    &lt;c
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="winafl" scheme="http://riusksk.github.io/tags/winafl/"/>
    
  </entry>
  
  <entry>
    <title>聊聊那些黑客小说</title>
    <link href="http://riusksk.github.io/2019/01/27/%E8%81%8A%E8%81%8A%E9%82%A3%E4%BA%9B%E9%BB%91%E5%AE%A2%E5%B0%8F%E8%AF%B4/"/>
    <id>http://riusksk.github.io/2019/01/27/聊聊那些黑客小说/</id>
    <published>2019-01-27T02:24:03.000Z</published>
    <updated>2019-01-27T06:18:10.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;系统宕，&lt;br&gt;资料泄，&lt;br&gt;挂马黑站何时了？&lt;br&gt;安全知多少！&lt;br&gt;告警昨夜又响起，&lt;br&gt;往事不堪回首月明中。&lt;br&gt;漏洞应犹在，&lt;br&gt;只是域名改。&lt;br&gt;问君能有几多愁？&lt;br&gt;恰似行行代码错误留。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;黑客小说：培养对信息安全的兴趣&quot;&gt;&lt;a href=&quot;#黑客小说：培养对信息安全的兴趣&quot; class=&quot;headerlink&quot; title=&quot;黑客小说：培养对信息安全的兴趣&quot;&gt;&lt;/a&gt;黑客小说：培养对信息安全的兴趣&lt;/h3&gt;&lt;p&gt;之前在《漏洞战争》的前言里面有提到，鄙人初入象牙塔之时，曾看过多本黑客小说，包括《黑客传说》、《地狱黑客》（后改名为《禁区之门》，参考凯文·米特尼克事迹写的，后来又出了第2部，但好像没写完）、《指间的黑客》等等，后来也因此对安全产生兴趣，入了这行道。&lt;/p&gt;
&lt;p&gt;但，道归道，兴趣归兴趣！&lt;/p&gt;
&lt;p&gt;因为曾有多少人，来了兴趣多年，却未曾自学过。&lt;/p&gt;
&lt;p&gt;“我对安全很感兴趣，求师傅教教我！”这种老套路的提问，大家见得还少吗？&lt;/p&gt;
&lt;p&gt;正如许多人宁愿被动受苦，也不愿主动吃苦学习一样，这个问题在知乎上也曾被热烈讨论过。被动受苦大多不用多动脑，久而久之，身体也会慢慢地适应，也就逐渐被生活、被制度所驯化。&lt;/p&gt;
&lt;p&gt;不过，此处想说的重点是，黑客小说可以培养人们对信息安全的兴趣，而学习的过程本身就是孤独单调的，如有兴趣相伴，则更易独行久远！&lt;/p&gt;
&lt;h3 id=&quot;行业人写小说：有始无终，多半夭折&quot;&gt;&lt;a href=&quot;#行业人写小说：有始无终，多半夭折&quot; class=&quot;headerlink&quot; title=&quot;行业人写小说：有始无终，多半夭折&quot;&gt;&lt;/a&gt;行业人写小说：有始无终，多半夭折&lt;/h3&gt;&lt;p&gt;安全圈里面其实也有一些人写过黑客小说，不乏某些知名人士，但基本上都是开了个头，却没多久就夭折收场。反正，我是没见过有人写完出版的。&lt;/p&gt;
&lt;p&gt;于是，我上Google搜索了下起点网，通过一些安全专业名词进行搜索，找到几部相关小说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　　“第一节操作系统原理、第二节系统及命令详解、第三节溢出漏洞原理、第四节web原理、第五节http协议、tcp/ip协议第六节sql注入原理、上传漏洞、XSS、CSRF……”                           &lt;/p&gt;
&lt;p&gt;​                                                                          ——《别说我是黑客》&lt;/p&gt;
&lt;p&gt;　　过了十多分钟，jsky的界面左侧刷出来许多asp文件和几个目录。右栏则是标注着绿色和红色叹号的几列英文。&lt;br&gt;　　看到扫描结果出来，杨风面带微笑进行下一步操作。他的运气不错，得到了xss与sqlinjection漏洞，这是网站暴露出来的跨站脚本漏洞和sql注入漏洞。&lt;br&gt;　　杨风转到育民高中主页，随手选取了一个注入地址，提交上引号。&lt;br&gt;　　返回错误。&lt;br&gt;　　接着提交and1=1语句。&lt;br&gt;　　返回正常。&lt;br&gt;　　继续提交and1=2语句。&lt;br&gt;　　返回错误。&lt;br&gt;　　杨风做这两步，主要是测试网站程序设计者是否在其中过滤了关键字，如果过滤就不能被注入。&lt;/p&gt;
&lt;p&gt;​                                                                                ——《黑客记事本》&lt;/p&gt;
&lt;p&gt;   ​        “尊敬的孙诚先生，请允许我对你和你的团队–塞伯坦工作室致以敬意。我们的检测人员已经验证了你所寄过来的数据，并证实了ios漏洞的存在，在对你们表示感谢的同时，Zerodium会按照约定，向你的团队支付共计五万四千美元的报酬，并希望你们能尽快将后续数据补完。在邮件中，你们提到找到了ios的两处极为隐秘的高危漏洞，Zerodium上下都对此非常感兴趣。希望能够尽快收到你的回复，报酬方面请不用担心，Zerodium是一个非常有信誉的平台！”&lt;/p&gt;
&lt;p&gt;   ​                                                                      ——《从变形金刚开始》&lt;/p&gt;
&lt;p&gt;   “我明白了，灵根这个电源，就相当于是有着固定编码的反编译器，每个灵根都有一个固定编码，就是所谓的灵根属性。灵根可以把跟自己编码一样的灵气团，进行逆向反编译，把编译好的灵气团分解成单纯由0和1构成的信息流，就是所谓的灵力！”&lt;/p&gt;
&lt;p&gt;   ​                                                                       ——《程序员修真之路》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从教你用jsky黑站（PS：为啥不推荐wvs呢），到黑客穿越、程序员修仙等，各种奇思妙想，在网络小说领域也算是另类的存在。&lt;/p&gt;
&lt;p&gt;但是从这些专业名词看，作者即使不是安全圈的，至少也是IT技术行业的，对一些常见的安全事件、技术名词都比较了解。&lt;/p&gt;
&lt;p&gt;文学与IT技术本身就是两个不同的领域，要同时兼顾就有一定难度。如果算程序员里面写的小说，比较火的，应该是那本《疯狂的程序员》吧！&lt;/p&gt;
&lt;h3 id=&quot;懵懂之美：似懂非懂才是最大的乐趣&quot;&gt;&lt;a href=&quot;#懵懂之美：似懂非懂才是最大的乐趣&quot; class=&quot;headerlink&quot; title=&quot;懵懂之美：似懂非懂才是最大的乐趣&quot;&gt;&lt;/a&gt;懵懂之美：似懂非懂才是最大的乐趣&lt;/h3&gt;&lt;p&gt;我已经很久没看黑客小说，尤其是入了行之后，就更不看了。&lt;/p&gt;
&lt;p&gt;如果要推荐的话，还是开头提到的那3本小说：《黑客传说》、《禁区之门》、《指间的黑客》，不过那是我大学时的口味了，现在重新看也不一定就如当初那般喜欢。&lt;/p&gt;
&lt;p&gt;因为当你对安全行业熟悉后，再去看这些小说的时候，可能就容易较真，少了些许乐趣。&lt;/p&gt;
&lt;p&gt;我当初看上面的小说的时候，其实也还没入门安全，所以看得特别起劲。&lt;/p&gt;
&lt;p&gt;所以，如果要看这类小说，就把那些行业知识都抛诸脑后，享受那当初的懵懂之美，才是读小说的乐趣所在。&lt;/p&gt;
&lt;h3 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h3&gt;&lt;p&gt;也许是性格使然，在文字世界里，鄙人老喜欢委婉地批判人和事（俗称：骂人）。不过文学世界里，一千个读者就有一千个哈姆雷特，应该支持下这种多元文化。不然就像娱乐圈里，谁演孙悟空，都要被六小龄童骂一般，少了胸怀，甚至阻碍了行业发展。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;系统宕，&lt;br&gt;资料泄，&lt;br&gt;挂马黑站何时了？&lt;br&gt;安全知多少！&lt;br&gt;告警昨夜又响起，&lt;br&gt;往事不堪回首月明中。&lt;br&gt;漏洞应犹在，&lt;br&gt;只是域名改。&lt;br&gt;问君能有几多愁？&lt;br&gt;恰似行行代码错误留。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>安全研究者的自我修养（续）</title>
    <link href="http://riusksk.github.io/2019/01/12/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>http://riusksk.github.io/2019/01/12/安全研究者的自我修养（续）/</id>
    <published>2019-01-12T05:17:58.000Z</published>
    <updated>2019-01-12T09:23:54.000Z</updated>
    
    <content type="html">&lt;p&gt;接上篇继续聊安全研究者的自我修养，上篇重点讲技术修炼，本篇聊聊行业现象、谈谈沉淀、情怀等等。&lt;/p&gt;
&lt;h3 id=&quot;11、工具与方法论沉淀&quot;&gt;&lt;a href=&quot;#11、工具与方法论沉淀&quot; class=&quot;headerlink&quot; title=&quot;11、工具与方法论沉淀&quot;&gt;&lt;/a&gt;11、工具与方法论沉淀&lt;/h3&gt;&lt;p&gt;虽说代码审计是项必备技能，但终究是项体力活。&lt;/p&gt;
&lt;p&gt;有些漏洞（比如逻辑漏洞）可能就需要人工审计，但也有不少漏洞是可以自动化Fuzzing，一些能自动化或半自动化实现的，尽量写程序自动化。&lt;/p&gt;
&lt;p&gt;因为，纯人工审计终究熬不过年纪，熬不过团队人员的离散变迁，熬不过互联网的快速发展……&lt;/p&gt;
&lt;p&gt;比如，2012年刚开始写《漏洞战争》时，单身一人，从早上8点多起床吃饭，然后开始调代码、看代码，一直奋战到晚上12点，身体无压力。近7年过去了，现在要是这么折腾，身体就要散架了……&lt;/p&gt;
&lt;p&gt;比如，团队里的人分工做不同领域的代码审计，若无工具和方法论沉淀，那么有人走的话，此人对应的领域可能就无法持续产出；若有新人加入，代码审计的技能又不好传承，很多得自己重头来。所以，一直觉得，好的团队应该是，即使人员离散变迁，依然能够独立运作、持续产出的。&lt;/p&gt;
&lt;p&gt;比如，Linux内核在2018年净增87万行代码，很多类似复杂庞大的项目，看代码有时看都看不过来，一般都是针对性地挑模块作代码审计。&lt;/p&gt;
&lt;p&gt;比如，Fuzzer开发里面就有很多共用功能是可以直接做成框架沉淀下来，文件变异、崩溃监控、样本去重精简等等，很多时候有个新的攻击面需要测试，就可以直接在框架的基础上写fuzzer，将会高效很多。下文提到的一个IE漏洞挖掘案例就是基于这思路挖到的。&lt;/p&gt;
&lt;p&gt;我曾经想开发两个漏洞挖掘系统，一个二进制，一个Web，名字都想好了，合称”&lt;strong&gt;冰弓玄箭&lt;/strong&gt;“，但业余一直都没什么时间开发，仅写了个界面，希望2019年能够完成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fz3shymb6cj30z90g2q9e.jpg&quot; alt=&quot;image-20190112143451515&quot;&gt;&lt;/p&gt;
&lt;p&gt;”冰弓“的Logo直接用的是“破甲弓”，感觉很酷……&lt;/p&gt;
&lt;p&gt;再说说方法论，这词虽有点虚，但其实本质上就是一种技术方法的总结而已。&lt;/p&gt;
&lt;p&gt;比如，渗透测试的时候，总有些人每次都能搞到RCE，无论啥网站，完全摆脱“随机挖洞”的命运。多数情况下，他们都会有一套自己测试方法，或者将一些经验转换成工具，测试时就拿自己的工具和以往总结的方法论开搞。&lt;/p&gt;
&lt;p&gt;比如，STRIDE威胁建模本身就是一套方法论，一套简单的风险助记符，当然我这里不是说安全研究要用它，只是举个方法论的例子，它也没有那么万能。&lt;/p&gt;
&lt;p&gt;写这么多，总结起来就一句话：多总结，多沉淀！&lt;/p&gt;
&lt;h3 id=&quot;12、漏洞研究风向标：安全公告&quot;&gt;&lt;a href=&quot;#12、漏洞研究风向标：安全公告&quot; class=&quot;headerlink&quot; title=&quot;12、漏洞研究风向标：安全公告&quot;&gt;&lt;/a&gt;12、漏洞研究风向标：安全公告&lt;/h3&gt;&lt;p&gt;如果大家有关注四大厂商（Google、Microsoft、Apple、Adobe）的安全公告的话，会发现有段时间会出现很多类似漏洞的公告，出现一个新的攻击面之后，一帮研究人员就蜂捅而上狂刷一波。&lt;/p&gt;
&lt;p&gt;这种情况一向是先下手为强，而上文提到的工具和方法论就更显得尤为重要了，否则最后都只能捡剩的。&lt;/p&gt;
&lt;p&gt;比如本周 Microsoft 安全公告出来后，我仔细分析了下，然后下班回家写了个Fuzzer，挂着跑了一天，出来个Crash，再用几分钟成功构造出PoC，实现IE浏览器的远程代码执行，可见也是个品相极佳的神洞：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fz3u7wx6a8j30jw0bvjsf.jpg&quot; alt=&quot;image-20190112153428430&quot;&gt;&lt;/p&gt;
&lt;p&gt;但不幸的是，我打了1月的补丁后，发现修复了，成功“撞洞”，真的是欲哭无泪……&lt;/p&gt;
&lt;p&gt;但至少证明，通过安全公告寻找新的攻击面，然后挖掘一些类似漏洞，一直是一种高效的漏洞研究方式。&lt;/p&gt;
&lt;h3 id=&quot;13、老一辈研究者都去哪儿了？&quot;&gt;&lt;a href=&quot;#13、老一辈研究者都去哪儿了？&quot; class=&quot;headerlink&quot; title=&quot;13、老一辈研究者都去哪儿了？&quot;&gt;&lt;/a&gt;13、老一辈研究者都去哪儿了？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fz3vtt20n8j30hs0sn428.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近腾讯AILab张潼离职的事传得很火，还有之前各大厂聘请的AI科学家陆续辞职，回归学术界，很多人因此唱起科学家之于科技公司的无用论，主要有以下几点原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;研究成果无法落地为产品&lt;/strong&gt;：做安全研究也是如此，很多事情是无法落地的，圈内很多研究团队都是拿漏洞来打比赛赚影响力，真正能实现为公司营利的（打比赛赚奖金的忽略不计，因为那些都不够给研究者们的工资），我只知道有1个研究团队/实验室今年营利了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长期无产出，KPI压力大&lt;/strong&gt;：研究了很长时间，最后仍一无所获，那KPI咋办、PPT怎么写、晋级怎么答辩。安全行业有句老话来形容安全研究工作，叫“三年不开锅，开锅吃三年”，但多数个人和企业都等不到三年。之前同事说王小云为何能破解出MD5，是因为她在学校里很长时间没搞出东西的时候，领导没找她麻烦，没有KPI压力，以致能够长期专注于此。具体原因我不确定，但学术界自然是没有企业有这般KPI压力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务数据不共享&lt;/strong&gt;：业务部门的产品数据基本不太可能共享给实验室作研究的，一般都是实验室以SDK的形式提供给业务用，数据由业务自主控制。这种情况对于安全研究的影响相对较少一些。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;头两点是多数安全研究者的困境，也跟圈内同行讨论过，下面聊聊这帮老一代“知青”最后都去哪儿了？这里我主要总结一些圈内人的应对方法（其实多数都是转型），具体不作点评，总结为主，也欢迎私信讨论（新注册的公众号已不允许留言）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;坚持研究&lt;/strong&gt;：这帮人主要还是那些研究能力较强的，且有一定研究成果的人，围观下各大实验室就知道个大概，不多说；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转型安全产品开发与运营&lt;/strong&gt;：有产品就能解决落地问题，帮助企业解决实际问题，有不少人走这条道，去做威胁情报系统、漏洞扫描器、WAF、云安全产品等等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转型业务安全&lt;/strong&gt;：跟研究工作差异较大，因为业务安全的主要问题很多时候并非漏洞，而是跟业务产品相关的黑灰产对抗等等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自由研究者&lt;/strong&gt;：国外很多此类研究者，靠拿漏洞赏金过活，俗称“赏金猎人”，国内相对少一些，也有一些国内自由研究者后来又进企业做研究的，这里讲的几种转型都可以来回转换，有些人就干过。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创业&lt;/strong&gt;：这里包括安全行业内的创业，也包括那些开淘宝店、奶茶店、服装生意、卖水果的……&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;14、个人终究干不过团队&quot;&gt;&lt;a href=&quot;#14、个人终究干不过团队&quot; class=&quot;headerlink&quot; title=&quot;14、个人终究干不过团队&quot;&gt;&lt;/a&gt;14、个人终究干不过团队&lt;/h3&gt;&lt;p&gt;有时想搞的研究太多了，但发现一个人根本搞不过来，需要多人协作才可能完成。但需要多人在研究领域上有交集，否则拉在一块也是各搞各的。&lt;/p&gt;
&lt;p&gt;前篇第7点讲到“进入研究者团队或社区，互相学习”，也是一大影响因素，互相学习也是一种提高效率和产出的方式。&lt;/p&gt;
&lt;p&gt;算了，不多说了！&lt;/p&gt;
&lt;h3 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h3&gt;&lt;p&gt;这次真的结束了，没有续篇了。&lt;/p&gt;
&lt;p&gt;思考了很多，总结了很多，有些也是写了删，删了写。&lt;/p&gt;
&lt;p&gt;安全研究领域一直也没人写过这些，出来唠叨几句，也欢迎大家私信讨论。&lt;/p&gt;
&lt;p&gt;最后奉一首酒桌上的《苦行僧》结束本话题，听过这首歌很多个版本，包括原唱，但终究还是觉得视频里这位老哥唱得更具江湖气、更具情感、更具感染力……旁边一老哥听着听着都偷偷抹泪了！&lt;/p&gt;
&lt;p&gt;之所以点这首歌，是因为：&lt;strong&gt;每一个研究者都是独立自行的苦行僧！&lt;/strong&gt;&lt;/p&gt;
&lt;video id=&quot;video&quot; controls preload=&quot;none&quot; poster=&quot;https://pic1.zhimg.com/v2-b1b3fa77c0d2ad60c2322b692b1941c8.jpg&quot;&gt;&lt;br&gt;      &lt;source id=&quot;mp4&quot; src=&quot;https://vdn2.vzuu.com/LD/d9c173e2-2941-11e8-a516-0242ac112a1d.mp4?disable_local_cache=1&amp;bu=com&amp;expiration=1547286438&amp;auth_key=1547286438-0-0-2b1341a2203264d9eebcdede98c1e6c5&amp;f=mp4&amp;v=bsy&quot; type=&quot;video/mp4&quot;&gt;&lt;br&gt;&lt;/video&gt;







</content>
    
    <summary type="html">
    
      &lt;p&gt;接上篇继续聊安全研究者的自我修养，上篇重点讲技术修炼，本篇聊聊行业现象、谈谈沉淀、情怀等等。&lt;/p&gt;
&lt;h3 id=&quot;11、工具与方法论沉淀&quot;&gt;&lt;a href=&quot;#11、工具与方法论沉淀&quot; class=&quot;headerlink&quot; title=&quot;11、工具与方法论沉淀&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="安全研究" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>安全研究者的自我修养</title>
    <link href="http://riusksk.github.io/2019/01/06/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <id>http://riusksk.github.io/2019/01/06/安全研究者的自我修养/</id>
    <published>2019-01-06T08:43:31.000Z</published>
    <updated>2019-01-06T12:58:53.000Z</updated>
    
    <content type="html">&lt;p&gt;在上篇文章《&lt;a href=&quot;http://riusksk.me/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%AE%E9%A2%98/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;推荐今年C3黑客大会上的几个议题&lt;/a&gt;》中提到”Attacking Chrome IPC“这个议题，我觉得该议题最大的亮点是在前半场，作者nedwill是之前在hack2win大赛上因攻破Chrome浏览器而一战成名，他讲了如何训练漏洞研究能力的过程，讲述自己这几年在漏洞研究上的历程和心得，很励志，其建议也非常具有可操作性，值得效仿学习。我反复看了多遍，对其作了一些总结和补充。&lt;/p&gt;
&lt;h3 id=&quot;1、刻意练习10000小时&quot;&gt;&lt;a href=&quot;#1、刻意练习10000小时&quot; class=&quot;headerlink&quot; title=&quot;1、刻意练习10000小时&quot;&gt;&lt;/a&gt;1、刻意练习10000小时&lt;/h3&gt;&lt;p&gt;这份“鸡汤”道理，想必大家都懂，就不解释了，不懂的自行百度，或者去读读《异类》这本经典书籍。&lt;/p&gt;
&lt;p&gt;作者建议以月为单位来制定研究目标，他曾连续花了6个月的时间来研究Chrome Sandbox，但最终一无所获。&lt;/p&gt;
&lt;p&gt;所以，有时坚持了不一定能达到目标，但不坚持，就更没戏了。&lt;/p&gt;
&lt;h3 id=&quot;2、训练挖洞的双技能&quot;&gt;&lt;a href=&quot;#2、训练挖洞的双技能&quot; class=&quot;headerlink&quot; title=&quot;2、训练挖洞的双技能&quot;&gt;&lt;/a&gt;2、训练挖洞的双技能&lt;/h3&gt;&lt;p&gt;（1）看洞：哪里看？历史漏洞的git log、bug报告、代码质量报告等等&lt;/p&gt;
&lt;p&gt;（2）识洞：就是肉眼看代码找漏洞，即代码审计，难点也就是在这上面，训练方法继续往下看&lt;/p&gt;
&lt;h3 id=&quot;3、代码审计训练&quot;&gt;&lt;a href=&quot;#3、代码审计训练&quot; class=&quot;headerlink&quot; title=&quot;3、代码审计训练&quot;&gt;&lt;/a&gt;3、代码审计训练&lt;/h3&gt;&lt;p&gt;（1）根据自己目标定位，寻找相应的历史漏洞案例进行学习，比如要搞chrome就找chrome的历史漏洞&lt;/p&gt;
&lt;p&gt;（2）掌握漏洞所在的模块或子系统，但不看完整的漏洞细节描述，尝试在漏洞版本中找出对应的漏洞&lt;/p&gt;
&lt;p&gt;（3）如果（2）中未能找出漏洞，就去看漏洞细节描述，对比自己的审计过程，看遗漏了哪一步骤&lt;/p&gt;
&lt;p&gt;（4）不断重复上述训练，直至相信：挖洞只是体力消耗，而非能力问题&lt;/p&gt;
&lt;p&gt;这第4点说得，非常励志，因为挖洞挖久了，有时真的容易怀疑自己的能力，目标难度越大，越容易打击人。&lt;/p&gt;
&lt;p&gt;作者第一次训练的漏洞是j00ru（Project Zero成员）的IDA漏洞：&lt;a href=&quot;https://j00ru.vexillium.org/2014/10/secure-2014-slide-deck-and-hex-rays-ida-pro-advisories-published/，2014年的文章了&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://j00ru.vexillium.org/2014/10/secure-2014-slide-deck-and-hex-rays-ida-pro-advisories-published/，2014年的文章了&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、3-5年的训练计划&quot;&gt;&lt;a href=&quot;#4、3-5年的训练计划&quot; class=&quot;headerlink&quot; title=&quot;4、3~5年的训练计划&quot;&gt;&lt;/a&gt;4、3~5年的训练计划&lt;/h3&gt;&lt;p&gt;1~2年：做做 CTF 或 WarGames 题目，网上有很多CTF writeup可以参考学习&lt;/p&gt;
&lt;p&gt;2~3年：简单点的目标，就是找相对容易挖的产品&lt;/p&gt;
&lt;p&gt;3~5年：困难点的目标&lt;/p&gt;
&lt;p&gt;目标的难易程度可以直接参考相应的产品的漏洞奖励计划或私有市场的价格，挑选出一份目标清单，按难易程度排序，逐一去实现它。&lt;/p&gt;
&lt;h3 id=&quot;5、Fuzzing训练&quot;&gt;&lt;a href=&quot;#5、Fuzzing训练&quot; class=&quot;headerlink&quot; title=&quot;5、Fuzzing训练&quot;&gt;&lt;/a&gt;5、Fuzzing训练&lt;/h3&gt;&lt;p&gt;作者代码审计2年后，才开始尝试Fuzzer开发。&lt;/p&gt;
&lt;p&gt;（1）拿已公开的历史漏洞问自己：如何写fuzzer挖掘到此漏洞？&lt;/p&gt;
&lt;p&gt;（2）如果自己不知道此漏洞，那又能够挖掘到呢？&lt;/p&gt;
&lt;p&gt;（3）不断重复训练并改进fuzzer，相信会有更多漏洞被意外发现&lt;/p&gt;
&lt;h3 id=&quot;6、努力往往比运气和天赋更重要&quot;&gt;&lt;a href=&quot;#6、努力往往比运气和天赋更重要&quot; class=&quot;headerlink&quot; title=&quot;6、努力往往比运气和天赋更重要&quot;&gt;&lt;/a&gt;6、努力往往比运气和天赋更重要&lt;/h3&gt;&lt;p&gt;虽然挖洞也需要一定运气和天赋，但多数你认为的挖洞天才，其实只不过是花了比你多100倍，甚至更多的时间在这项技术研究上而已&lt;/p&gt;
&lt;h3 id=&quot;7、进入研究者团队或社区，互相学习&quot;&gt;&lt;a href=&quot;#7、进入研究者团队或社区，互相学习&quot; class=&quot;headerlink&quot; title=&quot;7、进入研究者团队或社区，互相学习&quot;&gt;&lt;/a&gt;7、进入研究者团队或社区，互相学习&lt;/h3&gt;&lt;p&gt;国外的交流氛围会比国内的更好一些，也更愿意分享。&lt;/p&gt;
&lt;p&gt;很多时候自己的交流圈，大多是一些熟识的同行，或者同事，一般可交流的人还是比较少的。&lt;/p&gt;
&lt;p&gt;经常在网上看到不少人会问，如何认识xx大牛、黑客，但其实很多时候却是：&lt;/p&gt;
&lt;p&gt;努力提高自己的专业能力，圈子最终会吸纳你进去认识更多圈内人。&lt;/p&gt;
&lt;h3 id=&quot;8、建立自己的漏洞信息来源&quot;&gt;&lt;a href=&quot;#8、建立自己的漏洞信息来源&quot; class=&quot;headerlink&quot; title=&quot;8、建立自己的漏洞信息来源&quot;&gt;&lt;/a&gt;8、建立自己的漏洞信息来源&lt;/h3&gt;&lt;p&gt;RSS订阅无疑是自己最好的方式，这个需要依赖平时自己去不断收集订阅。&lt;/p&gt;
&lt;p&gt;很多漏洞相关的博文，往往曝露出某些软件新的攻击面，抢占先机就显得尤为重要，比如当年Android stagefirght mp4漏洞、word公式编辑器、adobe图片转换器等等，如果能及时关注并尝试去挖掘，往往可以收获不少漏洞的。&lt;/p&gt;
&lt;h3 id=&quot;9、收集和学习开源的漏洞挖掘工具&quot;&gt;&lt;a href=&quot;#9、收集和学习开源的漏洞挖掘工具&quot; class=&quot;headerlink&quot; title=&quot;9、收集和学习开源的漏洞挖掘工具&quot;&gt;&lt;/a&gt;9、收集和学习开源的漏洞挖掘工具&lt;/h3&gt;&lt;p&gt;比如afl、honggfuzz、libfuzzer等很多优秀的漏洞挖掘工具，都是值得好好阅读代码，学习其中的fuzzing思路，可以更好地应用到未来的漏洞挖掘研究上。&lt;/p&gt;
&lt;h3 id=&quot;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot;&gt;&lt;a href=&quot;#10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot; class=&quot;headerlink&quot; title=&quot;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot;&gt;&lt;/a&gt;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&lt;/h3&gt;&lt;p&gt;在《从0到1：开启商业与未来的秘密》一书中有一章叫做“秘密”，漏洞研究可以当作挖掘秘密，为什么人们不探索秘密呢？书中提到4种原因，我觉得同样适用于漏洞研究领域：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;渐进主义&lt;/strong&gt;：把目标定得低一些，更容易取得好成绩；&lt;/p&gt;
&lt;p&gt;（2）&lt;strong&gt;风险规避&lt;/strong&gt;：人们害怕秘密是因为怕犯错，除此之外，可能也担心KPI没法完成，又或者挖洞拿到的奖金又该如何跟公司“分赃”呢？&lt;/p&gt;
&lt;p&gt;（3）&lt;strong&gt;自满&lt;/strong&gt;：很多时候，某些人可以坐享其成，又何必自己去挖掘秘密；国内研究氛围又喜欢搞营销吹牛逼，牛逼吹多了吹大了，有时连自己都信了；&lt;/p&gt;
&lt;p&gt;（4）&lt;strong&gt;扁平化&lt;/strong&gt;：任何一个拥有雄心壮志的人，在涉及某一研究领域之前都会问自己一个问题：如果有可能挖掘到漏洞，难道全球人才库中更加聪明、更加有技术能力的人还没有发现吗？这种怀疑的声音阻止了不少人去探索秘密，从事研究工作，因为身处的世界似乎大到任何个人都无法做出独特的贡献。&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;今年因个人原因，已从安全研究转向业务安全，深知研究的不易。&lt;/p&gt;
&lt;p&gt;相信安全领域有秘密的存在，虽会导致黑产的诞生，但肯定也会因此诞生一些优秀的研究者。&lt;/p&gt;
&lt;p&gt;最后以白桦的《船》致谢所有仍在安全研究道路上前进的人：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我有过多次这样的奇遇，&lt;br&gt;从天堂到地狱只在瞬息之间：&lt;br&gt;每一朵可爱、温柔的浪花&lt;br&gt;都成了突然崛起、随即倾倒的高山。&lt;/p&gt;
&lt;p&gt;每一滴海水都变脸色，&lt;br&gt;刚刚还是那样的美丽、蔚蓝；&lt;br&gt;旋涡纠缠着旋涡，&lt;br&gt;我被抛向高空又投进深渊……&lt;/p&gt;
&lt;p&gt;当时我甚至想到过轻生，&lt;br&gt;眼前一片苦海无边；&lt;br&gt;放弃了希望就像放弃了舵柄，&lt;br&gt;在暴力之下只能沉默和哀叹。&lt;/p&gt;
&lt;p&gt;今天我才有资格嘲笑昨天的自己，&lt;br&gt;为昨天落叶似的惶恐感到羞惭；&lt;br&gt;虚度了多少年华，&lt;br&gt;船身多次被礁石撞穿……&lt;/p&gt;
&lt;p&gt;千万次在大洋里撒网，&lt;br&gt;才捕获到一点点生活的经验，&lt;br&gt;才恍然大悟，&lt;br&gt;啊！道理原是如此浅显；&lt;/p&gt;
&lt;p&gt;你要航行吗&lt;br&gt;必然会有千妖百怪出来阻拦；&lt;br&gt;暴虐的欺凌是它们的游戏，&lt;br&gt;制造灭亡是它们唯一的才干。&lt;/p&gt;
&lt;p&gt;命中注定我要常常和它们相逢，&lt;br&gt;因为我的名字叫做船；&lt;br&gt;面对强大于自身千万倍的对手，&lt;br&gt;能援救自己的只有清醒和勇敢。&lt;/p&gt;
&lt;p&gt;恐惧只能使自己盲目，&lt;br&gt;盲目只能夸大魔鬼的狰狞嘴脸；&lt;br&gt;也许我的样子比它们更可怕，&lt;br&gt;当我以命相拼，一往无前！&lt;/p&gt;
&lt;p&gt;只要我还有一根完整的龙骨，&lt;br&gt;绝不驶进避风的港湾；&lt;br&gt;把生命放在征途上，&lt;br&gt;让勇敢来决定道路的宽窄、长短。&lt;/p&gt;
&lt;p&gt;我完完全全的自由了，&lt;br&gt;船头成为埋葬它们的铁铲；&lt;br&gt;我在波浪中有节奏地跳跃，&lt;br&gt;就像荡着一个巨大的秋千。&lt;/p&gt;
&lt;p&gt;即使它们终于把我撕碎，&lt;br&gt;变成一些残破的木片，&lt;br&gt;我不会沉沦，决不！&lt;br&gt;我还会在浪尖上飞旋。&lt;/p&gt;
&lt;p&gt;后来者还会在残片上认出我，&lt;br&gt;未来的诗人会唱然长叹：&lt;br&gt;“这里有一个幸福的灵魂，&lt;br&gt;它曾经是一艘前进着的航船……”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇文章《&lt;a href=&quot;http://riusksk.me/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="安全研究" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>推荐今年C3黑客大会上的几个议题</title>
    <link href="http://riusksk.github.io/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%AE%E9%A2%98/"/>
    <id>http://riusksk.github.io/2018/12/30/推荐今年C3黑客大会上的几个议题/</id>
    <published>2018-12-30T11:06:31.000Z</published>
    <updated>2018-12-30T14:18:00.000Z</updated>
    
    <content type="html">&lt;p&gt;最近几天在德国举办的 The 35th Chaos Communication Congress (35C3) 黑客大会，在Twitter上传得火热，在国内却无人问津。&lt;/p&gt;
&lt;p&gt;从这可以看出同为微博的安全圈氛围是完全不同的，新浪微博还是偏娱乐些的，而且国外的圈子自然比天朝的要大得多，很多国家的人在上面交流。&lt;/p&gt;
&lt;p&gt;所以，我现在经常混Twitter，当作获取安全资讯的途径，新浪微博就真的当作看新闻的了……&lt;/p&gt;
&lt;h3 id=&quot;德国C3混沌黑客大会&quot;&gt;&lt;a href=&quot;#德国C3混沌黑客大会&quot; class=&quot;headerlink&quot; title=&quot;德国C3混沌黑客大会&quot;&gt;&lt;/a&gt;德国C3混沌黑客大会&lt;/h3&gt;&lt;p&gt;Chaos Communication Congress（C3）大会是每年在德国举办的黑客大会，直译过来就是”混沌通信大会“，圈内通常叫”C3“，今年是第35届，所以叫35c3，今年还有CTF比赛，一些打过pwn2own的人出了一些浏览器实际漏洞的题目，也蛮具有实战价值的。&lt;/p&gt;
&lt;p&gt;每年这大会都会以演讲视频的方式分享出各个议题，以前大多是聚焦在无线电安全，所以一些什么2G\3G\4G短信、电话窃听经常出自该会议。今年也有一些不错的软件安全相关的议题，下面推荐几个鄙人自认为不错的几个议题。&lt;/p&gt;
&lt;h3 id=&quot;From-Zero-to-Zero-Day&quot;&gt;&lt;a href=&quot;#From-Zero-to-Zero-Day&quot; class=&quot;headerlink&quot; title=&quot;From Zero to Zero Day&quot;&gt;&lt;/a&gt;From Zero to Zero Day&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyp0431o6oj30ju0hxtft.jpg&quot; alt=&quot;image-20181230193447667&quot;&gt;&lt;/p&gt;
&lt;p&gt;大会上有个议题叫 “From Zero to Zero Day”，演讲者是位高中生，讲述他自己如何在一年之内，从无任何安全基础到挖掘到第一枚Edge浏览器远程执行代码漏洞的经历。&lt;/p&gt;
&lt;p&gt;总结来讲就是：&lt;/p&gt;
&lt;p&gt;1、学习编程语言（C/C++、asm等等）&lt;/p&gt;
&lt;p&gt;2、学习操作系统原理&lt;/p&gt;
&lt;p&gt;3、学习常见二进制漏洞原理&lt;/p&gt;
&lt;p&gt;4、打打CTF，写写write-up&lt;/p&gt;
&lt;p&gt;5、学习并实践去分析真实的漏洞案例，就是直接看代码，调代码&lt;/p&gt;
&lt;p&gt;6、不断重复上述练习&lt;/p&gt;
&lt;p&gt;我直接帖几张关键截图，也推荐大家去听听（视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9657-from_zero_to_zero_day）：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9657-from_zero_to_zero_day）：&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyozsxuptzj30hz0aatcu.jpg&quot; alt=&quot;image-20181230192405638&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyozt7f18tj30jf0avwjw.jpg&quot; alt=&quot;image-20181230192425929&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fyozqdnwdwj30k30axgoz.jpg&quot; alt=&quot;image-20181230192131880&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fyozs2o8i2j30k70awtb3.jpg&quot; alt=&quot;image-20181230192320182&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fyozrme322j30k50atadg.jpg&quot; alt=&quot;image-20181230192254473&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Attack-Chrome-IPC&quot;&gt;&lt;a href=&quot;#Attack-Chrome-IPC&quot; class=&quot;headerlink&quot; title=&quot;Attack Chrome IPC&quot;&gt;&lt;/a&gt;Attack Chrome IPC&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/Users/riusksk/Library/Application Support/typora-user-images/image-20181230193950157.png&quot; alt=&quot;image-20181230193950157&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个议题之前作者在韩国PoC大会上讲过，并在网上公布过pdf（&lt;a href=&quot;https://data.hackinn.com/ppt/2018韩国POC安全大会/ned.pdf），主要讲他之前在Hack2Win&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://data.hackinn.com/ppt/2018韩国POC安全大会/ned.pdf），主要讲他之前在Hack2Win&lt;/a&gt; bevx黑客大赛上用于黑掉Chrome浏览器的IPC漏洞，此次C3大会的演讲视频参见：&lt;a href=&quot;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这议题里面讲了作者一些研究二进制漏洞的一些学习和研究的方法，比如做代码审计、打CTF，也介绍了他这几年的安全研究历程，比国内流行晒crash+CVE的方式更接地气。&lt;/p&gt;
&lt;p&gt;最后介绍如何使用 libfuzzer+libprotobuf-mutator去fuzz chrome IPC，并开源fuzzer代码合并到chroium项目中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyp0grvcxuj30wk0g3aej.jpg&quot; alt=&quot;image-20181230194648886&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Jailbreaking-iOS-From-past-to-present&quot;&gt;&lt;a href=&quot;#Jailbreaking-iOS-From-past-to-present&quot; class=&quot;headerlink&quot; title=&quot;Jailbreaking iOS From past to present&quot;&gt;&lt;/a&gt;Jailbreaking iOS From past to present&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fyp4tb6ppej30lb0c04cb.jpg&quot; alt=&quot;image-20181230202552499&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲iOS越狱发展史的，可以学习到iOS上各种安全机制的原理以及绕过方法，画了不少原理图，通俗易懂不少。对于想了解整个iOS越狱技术发展历程的同学，这确实是份不错的资料。&lt;/p&gt;
&lt;p&gt;作者这次也在推持上放出了pdf和视频：&lt;/p&gt;
&lt;p&gt;pdf: &lt;a href=&quot;https://api.tihmstar.net/35c3slides.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://api.tihmstar.net/35c3slides.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;video: &lt;a href=&quot;https://media.ccc.de/v/35c3-9618-jailbreaking_ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9618-jailbreaking_ios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个议题主要围绕以下几点展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;越狱类型（非完美越狱、完美越狱……）&lt;/li&gt;
&lt;li&gt;Exploit mitigations (ASLR, iBoot-level AES, KPP, KTRR, PAC) &lt;/li&gt;
&lt;li&gt;Kernel patches (h3lix) &lt;/li&gt;
&lt;li&gt;Kppless jailbreaks&lt;/li&gt;
&lt;li&gt;越狱的未来趋势&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;The-Layman’s-Guide-to-Zero-Day-Engineering&quot;&gt;&lt;a href=&quot;#The-Layman’s-Guide-to-Zero-Day-Engineering&quot; class=&quot;headerlink&quot; title=&quot;The Layman’s Guide to Zero-Day Engineering&quot;&gt;&lt;/a&gt;The Layman’s Guide to Zero-Day Engineering&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fyp2wxxr28j30yw0ihgr0.jpg&quot; alt=&quot;image-20181230211151217&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ret2公司分享如何寻找webkit攻击面并fuzz的方法，是基于MozillaSecurity的dharma语法生成框架写的js fuzzer，以及如何借助IDA+&lt;a href=&quot;https://github.com/gaasedelen/lighthouse&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lighthouse&lt;/a&gt;开源插件（正是Ret2团队开发的，曾获得过IDA插件比赛的二等奖）来分析代码覆盖率问题。&lt;/p&gt;
&lt;p&gt;除此之外，也介绍如何利用frida去hook mach_msg，用来fuzz WindowServer，最后用WindowServer的漏洞来实现root提权。&lt;/p&gt;
&lt;p&gt;他们在其博客（&lt;a href=&quot;https://blog.ret2.io）上也分享过不少漏洞研究方面的干货，这次分享的内容也大部分就是来自博客上的一些文章。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.ret2.io）上也分享过不少漏洞研究方面的干货，这次分享的内容也大部分就是来自博客上的一些文章。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面还提到长亭的real world ctf比赛了。&lt;/p&gt;
&lt;p&gt;这里有张比较有意思的图，发出来给大伙看下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fyp3j3xqdgj30z00jn4qp.jpg&quot; alt=&quot;image-20181230213304029&quot;&gt;&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9979-the_layman_s_guide_to_zero-day_engineering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9979-the_layman_s_guide_to_zero-day_engineering&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Modern-Windows-Userspace-Exploitation&quot;&gt;&lt;a href=&quot;#Modern-Windows-Userspace-Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Modern Windows Userspace Exploitation&quot;&gt;&lt;/a&gt;Modern Windows Userspace Exploitation&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fyp3yvr0eaj30tl0i815k.jpg&quot; alt=&quot;image-20181230214817405&quot;&gt;&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9660-modern_windows_userspace_exploitation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9660-modern_windows_userspace_exploitation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微软MSRC的人过来分享下windows平台下的一些二进制漏洞利用方法，包括ROP绕过DEP、信息泄露绕过ASLR、绕过CFG、ACG、CIG等等，并现场给了一些演示，不过看起来像是一些CTF赛题，演示的相关代码已放在作者的github上：&lt;a href=&quot;https://github.com/saaramar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/saaramar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;都是一些利用系统漏洞防御技术的原理与绕过技术的总结，连各种漏洞缓解机制绕过的微软奖励都给大家标注上了，其实有点类似上面Jailbreaking iOS议题的Windows版本。&lt;/p&gt;
&lt;p&gt;最后来张Exploit Mitigations清单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fyp4b42qn5j30rs0hvdir.jpg&quot; alt=&quot;image-20181230215938958&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;后面官方可能还会继续更新演讲视频，可以关注官方twitter（@c3voc_releases）获取消息。&lt;/p&gt;
&lt;p&gt;另外，对于英语不好的同学，不妨下个”腾讯翻译“同声翻译试下，虽然中文翻译没那么准确，但看看显示的英文单词也能知道个大意：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fyp0n9b99lj31400u0b29.jpg&quot; alt=&quot;image-20181230195201468&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天在德国举办的 The 35th Chaos Communication Congress (35C3) 黑客大会，在Twitter上传得火热，在国内却无人问津。&lt;/p&gt;
&lt;p&gt;从这可以看出同为微博的安全圈氛围是完全不同的，新浪微博还是偏娱乐些的，而且国外的圈子自然比
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年读过的书</title>
    <link href="http://riusksk.github.io/2018/12/28/2018%E5%B9%B4%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    <id>http://riusksk.github.io/2018/12/28/2018年读过的书/</id>
    <published>2018-12-28T12:17:12.000Z</published>
    <updated>2018-12-28T12:17:48.000Z</updated>
    
    <content type="html">&lt;p&gt;从2018年开始一直坚持每月读2本书以上，庆幸自己坚持下来了，共读了38本书，也希望明年能够继续坚持。&lt;/p&gt;
&lt;p&gt;有些是实体书，有些是在微信读书上看的电子版，在手机app上看书确实会高效很多，今年有一半的书是在微信读书上看的，非常适合空闲时间阅读，以及像坐地铁、等地铁这种零碎的时间。&lt;/p&gt;
&lt;p&gt;下面是我今年读过的书单，分别都打个分数，8分及以上的代表推荐，6分以下的别看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《人性的弱点》（6分）&lt;/li&gt;
&lt;li&gt;《代码整洁之道》（8分）&lt;/li&gt;
&lt;li&gt;《如何阅读一本书》（8分）&lt;/li&gt;
&lt;li&gt;《两晋南北朝那些事》（7分）&lt;/li&gt;
&lt;li&gt;《软技能：代码之外的生存指南》（8分）&lt;/li&gt;
&lt;li&gt;《秋叶：如何高效读懂一本书》（6分）&lt;/li&gt;
&lt;li&gt;《横向领导力》（7分）&lt;/li&gt;
&lt;li&gt;《程序员成长课》（8分）&lt;/li&gt;
&lt;li&gt;《英语写作手册》（8分）&lt;/li&gt;
&lt;li&gt;《爆款文案》（7分）&lt;/li&gt;
&lt;li&gt;《运营之光》（8分）&lt;/li&gt;
&lt;li&gt;《威胁建模》（7分）&lt;/li&gt;
&lt;li&gt;《程序员的英语》（7分）&lt;/li&gt;
&lt;li&gt;《冰鉴全鉴》（2分）&lt;/li&gt;
&lt;li&gt;《内向者沟通圣经》（4分）&lt;/li&gt;
&lt;li&gt;《灰度决策》（4分）&lt;/li&gt;
&lt;li&gt;《启功行书技法》（8分）&lt;/li&gt;
&lt;li&gt;《见识》（9分）&lt;/li&gt;
&lt;li&gt;《半小时漫画中国史1、2》（7分）&lt;/li&gt;
&lt;li&gt;《Web安全之机器学习入门》（6分）&lt;/li&gt;
&lt;li&gt;《秦崩》（8分）&lt;/li&gt;
&lt;li&gt;《启功给你讲书法》（8分）&lt;/li&gt;
&lt;li&gt;《思考，快与慢》（10分）&lt;/li&gt;
&lt;li&gt;《三国志》（8分）&lt;/li&gt;
&lt;li&gt;《季羡林谈写作》（6分）&lt;/li&gt;
&lt;li&gt;《Android应用安全防护与逆向分析》（7分）&lt;/li&gt;
&lt;li&gt;《精进：如何成为一个很厉害的人》（8分）&lt;/li&gt;
&lt;li&gt;《非暴力沟通》（9分）&lt;/li&gt;
&lt;li&gt;《系统架构设计》（7分）&lt;/li&gt;
&lt;li&gt;《人人都是产品经理》（8分）&lt;/li&gt;
&lt;li&gt;《漏洞》（7分）&lt;/li&gt;
&lt;li&gt;《风格感觉：21世纪写作指南》（8分）&lt;/li&gt;
&lt;li&gt;《态度》（8分）&lt;/li&gt;
&lt;li&gt;《高效阅读》（5分）&lt;/li&gt;
&lt;li&gt;《写给大家看的设计书》（10分）&lt;/li&gt;
&lt;li&gt;《硅谷钢铁侠：埃隆·马斯克的冒险人生》（8分）&lt;/li&gt;
&lt;li&gt;《八卦医学史2》（6分）&lt;/li&gt;
&lt;li&gt;《从0到1：开启商业与未来的秘密》（7分）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 所以8分以上的推荐书籍有：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《代码整洁之道》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《如何阅读一本书》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《软技能：代码之外的生存指南》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《程序员成长课》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《英语写作手册》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《运营之光》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《启功行书技法》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《见识》（9分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《秦崩》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《启功给你讲书法》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《思考，快与慢》（10分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《三国志》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《精进：如何成为一个很厉害的人》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《非暴力沟通》（9分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《人人都是产品经理》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《风格感觉：21世纪写作指南》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《态度》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《写给大家看的设计书》（10分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《硅谷钢铁侠：埃隆·马斯克的冒险人生》（8分）&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从2018年开始一直坚持每月读2本书以上，庆幸自己坚持下来了，共读了38本书，也希望明年能够继续坚持。&lt;/p&gt;
&lt;p&gt;有些是实体书，有些是在微信读书上看的电子版，在手机app上看书确实会高效很多，今年有一半的书是在微信读书上看的，非常适合空闲时间阅读，以及像坐地铁、等地铁这
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Bochspwn漏洞挖掘技术深究(2)：内核未初始化漏洞检测</title>
    <link href="http://riusksk.github.io/2018/12/22/bochspwn-reloaded/"/>
    <id>http://riusksk.github.io/2018/12/22/bochspwn-reloaded/</id>
    <published>2018-12-22T00:13:28.000Z</published>
    <updated>2018-12-22T03:21:13.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要介绍&lt;a href=&quot;https://github.com/googleprojectzero/bochspwn-reloaded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bochspwn Reloaded&lt;/a&gt;内核未初始化漏洞检测技术，它采用污点追踪对内核层向用户层泄露数据的行为进行检测。&lt;/p&gt;
&lt;p&gt;关于bochs插桩技术参考&lt;a href=&quot;http://riusksk.me/2018/12/01/bochspwn1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Bochspwn漏洞挖掘技术深究(1)：Double Fetches 检测》&lt;/a&gt;，此处不再赘述。&lt;/p&gt;
&lt;p&gt;直接先看下instrument.h中实现插桩函数有哪些：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs初始化CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs析构CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_exit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Bochs每次执行中断操作（软件中断、硬件中断或异常）时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_interrupt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs执行指令前的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs执行指令后的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_after_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs访问线性内存时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// WRMSR指令（写模式定义寄存器）被执行时的回调函数，MSR寄存器数与值作为参数传递给回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_wrmsr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; addr, Bit64u value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;初始化工作&quot;&gt;&lt;a href=&quot;#初始化工作&quot; class=&quot;headerlink&quot; title=&quot;初始化工作&quot;&gt;&lt;/a&gt;初始化工作&lt;/h3&gt;&lt;p&gt;第一篇中讲过&lt;code&gt;bx_instr_initialize&lt;/code&gt;主要用来加载配置信息，针对不同的系统环境设置不同的数据结构偏移地址，用来提供需要的进程/线程等重要信息。在这里它另外增加污点追踪功能的初始化工作：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize the taint subsystem.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;taint::initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize helper taint allocations.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;globals::pool_taint_alloc = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(globals::pool_taint_alloc, kPoolTaintByte, kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;globals::stack_taint_alloc = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(globals::stack_taint_alloc, kStackTaintByte, kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要作一些用于污点信息记录的内存结构分配与VEH异常处理回调设置：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Reserve a memory region for the taint data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  taint_area = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)VirtualAlloc(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, kTaintAreaSize, MEM_RESERVE, PAGE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Register a VEH handler to commit taint memory touched in other taint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// functions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AddVectoredExceptionHandler(&lt;span class=&quot;comment&quot;&gt;/*FirstHandler=*/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, OvercommitHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;VEH回调函数实现如下，当发生访问违例时，若异常地址不在污点内存区域，则将其设置为可读写内存，然后继续执行：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; LONG CALLBACK &lt;span class=&quot;title&quot;&gt;OvercommitHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  _In_ PEXCEPTION_POINTERS ExceptionInfo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ExceptionInfo-&amp;gt;ExceptionRecord-&amp;gt;ExceptionCode == EXCEPTION_ACCESS_VIOLATION) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *excp_address = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)ExceptionInfo-&amp;gt;ExceptionRecord-&amp;gt;ExceptionInformation[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (excp_address &amp;gt;= taint_area &amp;amp;&amp;amp; excp_address &amp;lt; &amp;amp;taint_area[kTaintAreaSize]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (VirtualAlloc((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)((&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt;)excp_address &amp;amp; (~&lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;)), &lt;span class=&quot;number&quot;&gt;0x10000&lt;/span&gt;, MEM_COMMIT, PAGE_READWRITE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXCEPTION_CONTINUE_EXECUTION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXCEPTION_CONTINUE_SEARCH;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;中断响应&quot;&gt;&lt;a href=&quot;#中断响应&quot; class=&quot;headerlink&quot; title=&quot;中断响应&quot;&gt;&lt;/a&gt;中断响应&lt;/h3&gt;&lt;p&gt;再看下&lt;code&gt;bx_instr_interrupt&lt;/code&gt;函数实现，主要是发生中断时，检测该中断地址是否可写，并设置全局标志：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_interrupt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::bp_active &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    write_lin_mem(pcpu, globals::bp_address, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;globals::bp_orig_byte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::bp_active = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;污点标记与追踪&quot;&gt;&lt;a href=&quot;#污点标记与追踪&quot; class=&quot;headerlink&quot; title=&quot;污点标记与追踪&quot;&gt;&lt;/a&gt;污点标记与追踪&lt;/h3&gt;&lt;p&gt;bochspwn-reloaded会对内核分配的stack/heap/pools作污点标记：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyf9luidhdj30jy09m75c.jpg&quot; alt=&quot;image-20181222092741926&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、栈污点标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检测修改ESP寄存器的指令，比如：&lt;code&gt;ADD ESP, ...&lt;/code&gt; &lt;code&gt;SUB ESP, ...&lt;/code&gt; &lt;code&gt;AND ESP, …&lt;/code&gt;，若在执行后（&lt;code&gt;bx_instr_after_execution&lt;/code&gt;）ESP发生递减，则调用&lt;code&gt;taint::set_taint(new_rsp, length, /*tainted=*/true)&lt;/code&gt;标记为污点&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; opcode = i-&amp;gt;getIaOpcode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_SUB_EqId:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_SUB_GqEq: &lt;span class=&quot;comment&quot;&gt;/* Stack allocation handling */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_PUSH_Eq: &lt;span class=&quot;comment&quot;&gt;/* Allocator prologue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_after_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  globals::rep_movs = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rsp_change) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; new_rsp = pcpu-&amp;gt;gen_reg[BX_64BIT_REG_RSP].rrx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (new_rsp &amp;lt; globals::rsp_value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; length = globals::rsp_value - new_rsp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (length &amp;lt;= kTaintHelperAllocSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        taint::set_taint(new_rsp, length, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write_lin_mem(pcpu, new_rsp, length, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)globals::stack_taint_alloc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::config.track_origins) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          taint::set_origin(new_rsp, length, pcpu-&amp;gt;prev_rip);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::rsp_change = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::rsp_value = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2、堆/Pools污点标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检测内核内存分配操作的指令，则调用&lt;code&gt;taint::set_taint(address, size, /*tainted=*/true)&lt;/code&gt;进行污点标记，主要通过&lt;code&gt;bx_instr_wrmsr&lt;/code&gt;函数来实现，当写入的地址是&lt;code&gt;MSR_LSTAR&lt;/code&gt;寄存器时，它代表着syscall调用：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MSR_LSTAR	0xc0000082 &lt;span class=&quot;comment&quot;&gt;/* long mode SYSCALL target */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_wrmsr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; addr, Bit64u value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (addr == MSR_LSTAR) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::nt_base = value - globals::config.KiSystemCall64_offset; &lt;span class=&quot;comment&quot;&gt;// ntoskrnl.exe中nt!KiSystemCall64偏移地址，用于获取内核基址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; globals::config.pool_alloc_prologues.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      globals::config.pool_alloc_prologues[i] += globals::nt_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set_breakpoints_bulk(globals::config.pool_alloc_prologues, BP_POOL_ALLOC_PROLOGUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; globals::config.pool_alloc_epilogues.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      globals::config.pool_alloc_epilogues[i] += globals::nt_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set_breakpoints_bulk(globals::config.pool_alloc_epilogues, BP_POOL_ALLOC_EPILOGUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;pool_alloc_prologues&lt;/code&gt;与&lt;code&gt;pool_alloc_epilogues&lt;/code&gt;分别代表alloc函数的前序与后序函数，以下是windows-x64系统配置下的地址：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pool_alloc_prologues  = 0x1E0590&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pool_alloc_epilogues  = 0x1E07AD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3、污点清除&lt;/strong&gt;&lt;br&gt;当栈顶弹出或者堆块调用free函数前序指令（Linux下配置地址），以及内存拷贝的目标地址是内核地址时，均将其污点标记清除，如果是win平台则主要依靠&lt;code&gt;bx_instr_lin_access&lt;/code&gt;来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; pc = pcpu-&amp;gt;prev_rip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rw != BX_WRITE &amp;amp;&amp;amp; rw != BX_RW) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!pcpu-&amp;gt;long_mode() || !windows::check_kernel_addr(pc) || !windows::check_kernel_addr(lin)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rep_movs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; rsp = pcpu-&amp;gt;gen_reg[BX_64BIT_REG_RSP].rrx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rsp_locked.find(rsp) != globals::rsp_locked.end()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  taint::set_taint(lin, len, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4、污点传播&lt;/strong&gt;&lt;br&gt;在&lt;code&gt;bx_instr_before_execution&lt;/code&gt;中主要对以下操作指令作检测，指令形式主要为 &lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;，用于污点传播追踪：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; opcode = i-&amp;gt;getIaOpcode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_MOV_GqEq: &lt;span class=&quot;comment&quot;&gt;/* Standard library memcpy() prologue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSB_YbXb:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSW_YwXw:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSD_YdXd:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSQ_YqXq: &lt;span class=&quot;comment&quot;&gt;/* Inline memcpy handling */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSB_YbXb: mult = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSW_YwXw: mult = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSD_YdXd: mult = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSQ_YqXq: mult = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_RET_Op64: &lt;span class=&quot;comment&quot;&gt;/* Allocator and memcpy() epilogue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于非&lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;指令的内存访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写操作：清除内存污点标记，标记为已初始化；&lt;/li&gt;
&lt;li&gt;读操作：检测污点标记，如果shadow memory中标记为未初始化读取，则在guest memory中验证：标记不匹配则清除污点，否则若真为未初始化读取就当漏洞报告出来&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* src_in_kernel */&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; tainted_offset = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    taint::access_type type = taint::check_taint(pcpu, src, size, &amp;amp;tainted_offset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == taint::METADATA_MARKER_MISMATCH) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      taint::set_taint(src, size, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == taint::ACCESS_INVALID) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      process_bug_candidate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          pcpu, i, pcpu-&amp;gt;prev_rip, src, size, dst, taint::get_origin(src + tainted_offset));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结起来，是否为漏洞主要基于以下几点：&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;中 源地址为内核，目标地址为用户地址，从内核输出数据到用户&lt;/p&gt;
&lt;p&gt;2、源地址被标记为污点&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍&lt;a href=&quot;https://github.com/googleprojectzero/bochspwn-reloaded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bochspwn Reloaded&lt;/a&gt;内核未初始化漏洞检测技术，它
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Bochspwn" scheme="http://riusksk.github.io/tags/Bochspwn/"/>
    
  </entry>
  
  <entry>
    <title>Bochspwn漏洞挖掘技术深究(1)：Double Fetches 检测</title>
    <link href="http://riusksk.github.io/2018/12/01/bochspwn1/"/>
    <id>http://riusksk.github.io/2018/12/01/bochspwn1/</id>
    <published>2018-12-01T03:08:09.000Z</published>
    <updated>2018-12-22T00:15:01.000Z</updated>
    
    <content type="html">&lt;p&gt;虽然现在技术文章很少人看，大家都喜欢聊安全八卦，但技术文章输出是一种很好的学习方式。更重要的是，专业的文章是给专业的人看的，并非为了取悦所有人。&lt;/p&gt;
&lt;p&gt;对于应用程序的代码插桩，有现成的Pin和DynamoRIO插桩框架，在Fuzzing中可以用来实现代码覆盖率的反馈驱动，这已经被应用到winafl，效果很好。除了挖洞，在逆向工程领域应用也很广泛。&lt;/p&gt;
&lt;p&gt;上面都是针对应用层的，内核层的，上面的Pin和DynamoRIO就派不上用场了，对于这种系统内核级的指令插桩，有时就会采用虚拟化技术为实现，比如通过Qemu或Bochs虚拟机。&lt;/p&gt;
&lt;p&gt;ProjectZero的j00ru大神就用bochs的插桩API为实现针对内核double fetches的监测，项目称为bochspwn，后来又采用污点追踪方式检测未初始化漏洞导致的内核信息泄露，叫bochspwn-reloaded。&lt;/p&gt;
&lt;p&gt;Bochs Instrument API 文档参考：&lt;a href=&quot;http://bochs.sourceforge.net/cgi-bin/lxr/source/instrument/instrumentation.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bochs.sourceforge.net/cgi-bin/lxr/source/instrument/instrumentation.txt&lt;/a&gt; ，在编译bochs时指定插桩代码目录：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./configure [...] --enable-instrumentation=&amp;quot;instrument/myinstrument&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是bochspwn中用到的API：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs初始化CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs析构CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_exit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs访问线性内存时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs执行指令前的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;bx_instr_initialize用来加载配置信息，针对不同的系统环境设置不同的数据结构偏移地址，用来提供需要的进程/线程等重要信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[general]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trace_log_path      = memlog.bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modules_list_path   = modules.bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os                  = windows&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bitness             = 32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;version             = win10_32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;min_read_size       = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;max_read_size       = 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;min_write_size      = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;max_write_size      = 16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;callstack_length    = 48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;write_as_text       = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;symbolize           = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;symbol_path         = &amp;lt;symbols path&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[win7_32]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kprcb               = 0x120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;current_thread      = 0x04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcb                 = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;process             = 0x150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;client_id           = 0x22c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;process_id          = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thread_id           = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create_time         = 0x200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;image_filename      = 0x16c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;kdversionblock      = 0x34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;psloadedmodulelist  = 0x18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loadorder_flink     = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;basedllname         = 0x2c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baseaddress         = 0x18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sizeofimage         = 0x20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;us_len              = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;us_buffer           = 0x4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;teb_cid             = 0x20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;irql                = 0x24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;previous_mode       = 0x13a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exception_list      = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;next_exception      = 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;try_level           = 0xc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Bochspwn的核心功能实现就在于&lt;code&gt;bx_instr_lin_access&lt;/code&gt;与&lt;code&gt;bx_instr_before_execution&lt;/code&gt;两个函数。先看下&lt;code&gt;bx_instr_before_execution&lt;/code&gt;的实现逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略实模式real mode&lt;/li&gt;
&lt;li&gt;忽略无关的系统调用中断指令，仅允许&lt;code&gt;int 0x2e&lt;/code&gt;与 &lt;code&gt;int 0x80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取当前进程/线程ID相关的信息，当发现漏洞时方便重现&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; client_id thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; opcode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// We&#39;re not interested in instructions executed in real mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!pcpu-&amp;gt;protected_mode() &amp;amp;&amp;amp; !pcpu-&amp;gt;long64_mode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// If the system needs an additional invokement from here, call it now.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::has_instr_before_execution_handler) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invoke_system_handler(BX_OS_EVENT_INSTR_BEFORE_EXECUTION, pcpu, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Any system-call invoking instruction is interesting - this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// is mostly due to 64-bit Linux which allows various ways&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// to be used for system-call invocation.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Note: We&#39;re not checking for int1, int3 nor into instructions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  opcode = i-&amp;gt;getIaOpcode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (opcode != BX_IA_SYSCALL &amp;amp;&amp;amp; opcode != BX_IA_SYSENTER &amp;amp;&amp;amp; opcode != BX_IA_INT_Ib) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// The only two allowed interrupts are int 0x2e and int 0x80, which are legacy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ways to invoke system calls on Windows and linux, respectively.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (opcode == BX_IA_INT_Ib &amp;amp;&amp;amp; i-&amp;gt;Ib() != &lt;span class=&quot;number&quot;&gt;0x2e&lt;/span&gt; &amp;amp;&amp;amp; i-&amp;gt;Ib() != &lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Obtain information about the current process/thread IDs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!invoke_system_handler(BX_OS_EVENT_FILL_CID, pcpu, &amp;amp;thread)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Process information about a new syscall depending on the current mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!events::event_new_syscall(pcpu, &amp;amp;thread)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看下&lt;code&gt;bx_instr_lin_access&lt;/code&gt;实现逻辑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略仅读写指令&lt;/li&gt;
&lt;li&gt;检测CPU类型（32位或64位）&lt;/li&gt;
&lt;li&gt;判断当前指令地址pc是否为内核地址，判断访问的线性内存地址是否为用户层地址&lt;/li&gt;
&lt;li&gt;检测读取的内存长度是否处于0~16字节之间，长度大小范围在config.txt中配置，仅处理此范围内的指令操作&lt;/li&gt;
&lt;li&gt;通过上述条件之后，就代表可能存在内核漏洞，然后反汇编指令，然后填充日志记录信息&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Not going to use physical memory address.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)phy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Read-write instructions are currently not interesting.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rw == BX_RW)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Is the CPU in protected or long mode?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; mode = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Note: DO NOT change order of these ifs. long64_mode must be called&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// before protected_mode, since it will also return &quot;true&quot; on protected_mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// query (well, long mode is technically protected mode).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pcpu-&amp;gt;long64_mode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; BX_SUPPORT_X86_64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mode = &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// BX_SUPPORT_X86_64&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pcpu-&amp;gt;protected_mode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This is either protected 32-bit mode or 32-bit compat. long mode.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mode = &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Nothing interesting.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// TODO(gynvael): Well actually there is the smm_mode(), which&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// might be a little interesting, even if it&#39;s just the bochs BIOS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// SMM code.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Is pc in kernel memory area?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Is lin in user memory area?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bx_address pc = pcpu-&amp;gt;prev_rip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!invoke_system_handler(BX_OS_EVENT_CHECK_KERNEL_ADDR, &amp;amp;pc, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      !invoke_system_handler(BX_OS_EVENT_CHECK_USER_ADDR, &amp;amp;lin, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* pc not in ring-0 or lin not in ring-3 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Check if the access meets specified operand length criteria.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rw == BX_READ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (len &amp;lt; globals::config.min_read_size || len &amp;gt; globals::config.max_read_size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (len &amp;lt; globals::config.min_write_size || len &amp;gt; globals::config.max_write_size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Save basic information about the access.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log_data_st::mem_access_type access_type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (rw) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_READ:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      access_type = log_data_st::MEM_READ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_WRITE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      access_type = log_data_st::MEM_WRITE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_EXECUTE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      access_type = log_data_st::MEM_EXEC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_RW:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      access_type = log_data_st::MEM_RW;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;abort&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Disassemble current instruction.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Bit8u ibuf[&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; pc_disasm[&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (read_lin_mem(pcpu, pc, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(ibuf), ibuf)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    disassembler bx_disassemble;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bx_disassemble.disasm(mode == &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;, mode == &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, pc, ibuf, pc_disasm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// With basic information filled in, process the access further.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  process_mem_access(pcpu, lin, len, pc, access_type, pc_disasm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;信息记录方式都是通过invoke_system_handler函数去处理自定义系统事件，目前主要支持4种操作系统（windows\linux\freebsd\openbsd），macOS还没搞过，原作者是说想继续实现macOS，这个值得尝试开发下：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tag_kSystemEventHandlers&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *system;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s_event_handler_func handlers[BX_OS_EVENT_MAX];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; kSystemEventHandlers[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;windows&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;(s_event_handler_func)windows::init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)windows::check_kernel_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)windows::check_user_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)windows::fill_cid,	&lt;span class=&quot;comment&quot;&gt;// 获取线程环境块TEB，读取进程/线程ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)windows::fill_info,	&lt;span class=&quot;comment&quot;&gt;// 基于config.txt中配置的进线程结构offset去读取进线程信息，包括进程文件名、创建时间、栈回溯等信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;linux&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;(s_event_handler_func)linux::init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)linux::check_kernel_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)linux::check_user_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)linux::fill_cid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)linux::fill_info,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;freebsd&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;(s_event_handler_func)freebsd::init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::check_kernel_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::check_user_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::fill_cid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::fill_info,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)freebsd::instr_before_execution&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;openbsd&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;(s_event_handler_func)openbsd::init,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::check_kernel_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::check_user_addr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::fill_cid,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::fill_info,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (s_event_handler_func)openbsd::instr_before_execution&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;#123;&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后就是输出记录的信息，比如作者发现的CVE-2018-0894漏洞信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;------------------------------ found uninit-copy of address fffff8a000a63010&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pid/tid: 000001a0/000001a4] &amp;#123;     wininit.exe&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       COPY of fffff8a000a63010 ---&amp;gt; 1afab8 (64 bytes), pc = fffff80002698600&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [                             mov r11, rcx ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Allocation origin: 0xfffff80002a11101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   (ntoskrnl.exe!IopQueryNameInternal+00000071)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- Shadow memory:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000: 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 ................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- Actual memory:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000: 2e 00 30 00 aa aa aa aa 20 30 a6 00 a0 f8 ff ff ..0..... 0......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000010: 5c 00 44 00 65 00 76 00 69 00 63 00 65 00 5c 00 \.D.e.v.i.c.e.\.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000020: 48 00 61 00 72 00 64 00 64 00 69 00 73 00 6b 00 H.a.r.d.d.i.s.k.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000030: 56 00 6f 00 6c 00 75 00 6d 00 65 00 32 00 00 00 V.o.l.u.m.e.2...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- Stack trace:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #0  0xfffff80002698600 (ntoskrnl.exe!memmove+00000000)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #1  0xfffff80002a11319 (ntoskrnl.exe!IopQueryNameInternal+00000289)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #2  0xfffff800028d4426 (ntoskrnl.exe!IopQueryName+00000026)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #3  0xfffff800028e8fa8 (ntoskrnl.exe!ObpQueryNameString+000000b0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #4  0xfffff8000291313b (ntoskrnl.exe!NtQueryVirtualMemory+000005fb)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #5  0xfffff800026b9283 (ntoskrnl.exe!KiSystemServiceCopyEnd+00000013)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;虽然现在技术文章很少人看，大家都喜欢聊安全八卦，但技术文章输出是一种很好的学习方式。更重要的是，专业的文章是给专业的人看的，并非为了取悦所有人。&lt;/p&gt;
&lt;p&gt;对于应用程序的代码插桩，有现成的Pin和DynamoRIO插桩框架，在Fuzzing中可以用来实现代码覆盖率的反馈
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="bochspwn" scheme="http://riusksk.github.io/tags/bochspwn/"/>
    
  </entry>
  
  <entry>
    <title>从杀软之殇谈产品</title>
    <link href="http://riusksk.github.io/2018/11/24/%E6%9D%80%E8%BD%AF%E4%B9%8B%E6%AE%87/"/>
    <id>http://riusksk.github.io/2018/11/24/杀软之殇/</id>
    <published>2018-11-24T02:09:41.000Z</published>
    <updated>2018-11-24T04:33:42.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxixl44cx8j30zk0i2tyn.jpg&quot; alt=&quot;百度&quot;&gt;&lt;/p&gt;
&lt;p&gt;前几天，百度杀毒、百度卫士宣布停止服务，祭出“百度杀毒感谢一路有你”的殇曲，就此终结！&lt;/p&gt;
&lt;p&gt;PC杀毒软件的历史已经有35年，但在这移动互联网的时代，问津者能有几人呢？&lt;/p&gt;
&lt;p&gt;今天就此事聊聊安全产品和安全从业人员。&lt;/p&gt;
&lt;h4 id=&quot;面向系统的产品&quot;&gt;&lt;a href=&quot;#面向系统的产品&quot; class=&quot;headerlink&quot; title=&quot;面向系统的产品&quot;&gt;&lt;/a&gt;面向系统的产品&lt;/h4&gt;&lt;p&gt;杀毒软件的出现就是弥补系统自身安全能力的不足，算是面向系统的安全产品，不仅是PC，Android上也是如此。&lt;/p&gt;
&lt;p&gt;当年Android病毒那么严重，第一款Android主动防御软件LBE诞生时也是风光无限，甚至后面还利用系统漏洞作防御。&lt;/p&gt;
&lt;p&gt;再看看现在，随着Windows系统自主安全能力以及自家杀软Windows Defender的不断完善，并且提供给杀软的接口越来越少，权限越来越集中管理，使得PC杀软越来越无用武之地，甚至曾经的头牌杀软已沦为流氓软件。&lt;/p&gt;
&lt;p&gt;而这几年Google在Android安全上的投入也是非常大，整个系统的安全性相比前几年提升很大，他们家的chrome也曾在pwn2own黑客大赛幸存过几年，虽然今年被破了。&lt;/p&gt;
&lt;p&gt;以前iOS截图后是不能直接分享的，然后就有一些软件直接提供截图后的分享功能，但是现在苹果自己在iOS上做了，如果软件还保留原分享功能，就成为一种干扰，有些软件就又不得不去掉：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fxj1m5l2w9j30cc0m0adq.jpg&quot; alt=&quot;image-20181124123301131&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;凡是面向系统的产品，自系统厂商打算自己做时，就没你啥事了，无论是现今的PC，还是未来的移动端，均是如此。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;面向业务的产品&quot;&gt;&lt;a href=&quot;#面向业务的产品&quot; class=&quot;headerlink&quot; title=&quot;面向业务的产品&quot;&gt;&lt;/a&gt;面向业务的产品&lt;/h4&gt;&lt;p&gt;以前，很多企业为了维护业务安全，都是从安全公司买服务或产品。&lt;/p&gt;
&lt;p&gt;后来，随着企业的壮大，很多安全工作都企业自己做，自己开发扫描器、防火墙等等，然后各安全公司就开始被收购，乙方安全人员开始向甲方流动。&lt;/p&gt;
&lt;p&gt;再后来，企业内部的业务部门也逐渐壮大，很多业务也开始自己做安全，他们也怕被安全部门捅漏洞丢面子，一些容易做的安全产品会被优先替代掉，一些需要长期投入并维护的安全产品，就得看业务部门是否有此人力，有些安全产品没有多年的积累一时也是无法替代的。与此同时，一些安全部门人员开始向业务部门流动。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;凡是面向业务的产品，自业务打算自己做时，就没你啥事了&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;面向人的产品&quot;&gt;&lt;a href=&quot;#面向人的产品&quot; class=&quot;headerlink&quot; title=&quot;面向人的产品&quot;&gt;&lt;/a&gt;面向人的产品&lt;/h4&gt;&lt;p&gt;人，可以分为商户（2B）与用户（2C），比如阿里就是典型的2B基因，腾讯就是典型的2C基因，虽然他们各自都不信这邪。正如当年阿里做来往，腾讯做拍拍一般，结局都是相当地凄惨。&lt;/p&gt;
&lt;p&gt;杀软2C的道路基本已经凉凉的，但是2B之路还有点残羹剩饭，尤其是天朝机构，出于国家安全考虑，在抵制国外安全产品的同时，就需要国产安全产品替代。所以现在很多国内杀软都是逐步转向做2B业务，但肯定都是不如从前了。&lt;/p&gt;
&lt;p&gt;人总有各种各样的需求，面对人的产品就是为了解决这些需求。比如人与人的沟通，以前飞鸽传书、快马加急，到现在的电话短信、微信视频等方式，需求亘古不变，只是产品在进化，在被另一种更高效、更低成本的产品替代。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;面向人的产品，产品要解决的需求形态可能长期存在，但产品终会被更高效、更低成本的产品替代&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;安全人员的生存之道&quot;&gt;&lt;a href=&quot;#安全人员的生存之道&quot; class=&quot;headerlink&quot; title=&quot;安全人员的生存之道&quot;&gt;&lt;/a&gt;安全人员的生存之道&lt;/h4&gt;&lt;p&gt;最近一年，在微信群里，仍然还有一些做Windows病毒分析的同学，还在聊Windows病毒，看着都觉得无力。如果是结合漏洞的病毒样本分析，还可以高谈APT混口饭吃，而其它类型的病毒都已经没什么市场了。&lt;/p&gt;
&lt;p&gt;从一方面讲，移动时代不求思变转型的安全人员，有时也挺惨的，杀软产品不做了，这帮开发和分析人员又该何去何从。&lt;/p&gt;
&lt;p&gt;就连招二进制安全的，很多人只会windows平台，不懂移动端，经常无法满足业务安全需求。当然，如果是深入Windows系统漏洞攻防的，那现在还是相当有市场的。&lt;/p&gt;
&lt;p&gt;杀软这事也只是系统自身进化导致的，如果是系统颠覆的，如Android灭掉了Symbian，一身超神的塞班技能也无济于事。&lt;/p&gt;
&lt;p&gt;我现在特别希望Android被新系统颠覆，所有安全人员又打回同一起跑线，重新开始研究新系统的漏洞攻防。当年虽赶上Android安全，但只搞了应用安全，没有深入系统安全，后来上车晚了，还是觉悟不够。&lt;/p&gt;
&lt;p&gt;所以，安全人员还是得居安思危，不然哪天就真没饭吃了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxixl44cx8j30zk0i2tyn.jpg&quot; alt=&quot;百度&quot;&gt;&lt;/p&gt;
&lt;p&gt;前几天，百度杀毒、百度卫士宣布停止服务，祭出“百度杀毒感谢一路有你”的殇曲，就此终结！
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>读《态度》</title>
    <link href="http://riusksk.github.io/2018/11/18/%E8%AF%BB%E3%80%8A%E6%80%81%E5%BA%A6%E3%80%8B/"/>
    <id>http://riusksk.github.io/2018/11/18/读《态度》/</id>
    <published>2018-11-18T09:47:02.000Z</published>
    <updated>2018-11-18T12:00:51.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fxcenoinw2j307009nta1.jpg&quot; alt=&quot;image-20181118184524117&quot;&gt;&lt;/p&gt;
&lt;p&gt;《态度》是吴军在今年新出的书籍，是他写给女儿的40封家书。第一次读吴军的书是《见识》，读完觉得不错，因此这次“双十一”买了好几本他写的书，包括《浪潮之颠》、《大学之路》。&lt;/p&gt;
&lt;p&gt;在新书中，主要分6部分来讲，分别讲了一些做人做事的原则、对待金钱和人际关系的态度、还有学习和人生哲学的一些观点。&lt;/p&gt;
&lt;h4 id=&quot;关于教育&quot;&gt;&lt;a href=&quot;#关于教育&quot; class=&quot;headerlink&quot; title=&quot;关于教育&quot;&gt;&lt;/a&gt;关于教育&lt;/h4&gt;&lt;p&gt;作者说”教育改变命运“，其实多数读书人应该都认同这一观点，他在书中讲述了3个观点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;”教育改变命运“已成为全世界大部分国家的共识&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;欧洲很早就意识到教育对人一生的帮助，所以很早就开始兴办免费教育，让交不起学费的贫家子弟都可以到”官办“学校读书，牛顿就是靠这种免费的公立教育完成中学学业，进入剑桥大学的。很多来自中国农村的贫穷人家，为了摆脱贫穷，让自己子女接受良好的教育，通过一代人的努力摆脱贫穷，改变命运。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;衣食无忧的富家子弟也有必要接受教育&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中国著名作家吴晓波，就是那个写了《腾讯传》的人，调查了早期在股市上发财的几十人，发现除了一两个之外，其他人的结局无一例外都很惨，有破产的，有坐牢的，有被仇家杀的，有正在被追杀的。这些人都有两个共同点：第一，敢于冒险；第二，受教育水平低，最高中学学历。因此，他们在有了钱之后，没有更高的理想和追求。&lt;/p&gt;
&lt;p&gt;【PS】：在中国，尤其是农村，一些没接受过多少教育的暴发户，有时会对年轻人或读书人说：“读书没有用的，你读那么多书赚的还不是没我多”！如果此时你对他说：“让你的孩子退学吧！“，估计他就没话了。还有一些在外工作多年的人，包括腾讯人，有时过年同学聚会，发现一些曾经读书不好或者辍学的老同学现在混得相当不错，比自己好太多的时候，通常都会反问自己：“读那么多书真的有用吗“？这种情况都是”幸存者偏差“的认识而已（顺便给大家推荐另一本书《思考，快与慢》，里面就讲了很多这种思考或认识的陷阱）。记得，腾讯内部论坛就有人发过这样感慨。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对退学创业的误解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;互联网行业的退学创业代表主要有5人：比尔盖茨、乔布斯、佩奇、布林，以及扎克伯格。佩奇和布林是进入斯坦福读博士之前退学的，盖茨和扎克伯格情况类似，人家都是上过哈佛的，同样比绝大部分年轻人都出色，并接受过良好的教育，而且他们都是创业成功之后才退学的。乔布斯是因为不忍花父母的钱才没有读大学的，但至少是在斯坦福大学接受过教育的，如果他来自一个相对富有的家庭，或许会读完大学。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;####关于格局&lt;/p&gt;
&lt;p&gt;决策时格局要大，做事时境界要高。用作者通俗一点的话来讲，就是要长远考虑，尽可能往最好的目标努力。&lt;/p&gt;
&lt;p&gt;书中举例几个MIT和哈佛毕业生组成的创业团队，他们打算做高频交易（在股市中通过快速操作以赚取低买高卖时差价）的创业项目，作者认为他们都是非常聪明的人，但做事的格局不大，因为这赚不到大钱，属于小打小闹，而且这事仅是提高股市交易量，并无其它意义，对世界更不可能产生任何重大影响，而且这件事的公司已经很多了。&lt;/p&gt;
&lt;p&gt;这种看似只赚不赔的高频交易公司为何做不到像Google、Apple那样赚更多钱呢？因为前者以改变世界为目的，后者以赚小钱、小富即安为目的。&lt;/p&gt;
&lt;p&gt;很多亚裔家长一直在纠结孩子上名校是否有用？作者对此的观点是，如果格局提升不上去，上了也没有用，还达不到谷歌员工的平均水平。&lt;/p&gt;
&lt;h4 id=&quot;关于贫穷&quot;&gt;&lt;a href=&quot;#关于贫穷&quot; class=&quot;headerlink&quot; title=&quot;关于贫穷&quot;&gt;&lt;/a&gt;关于贫穷&lt;/h4&gt;&lt;p&gt;一个生于富有家庭的孩子不怕别人说他穷的，而一个贫家子弟通常反而怕别人说他穷，看不起他。卖肾买iPhone的人，一定是贫家子弟，怕别人说他穷。于是，很多穷人最后还是选择与穷人，甚至比自己穷的人为伍，成绩差的孩子还是选择扎堆一块玩。久而久之，那些人就无法摆脱原属阶层了。&lt;/p&gt;
&lt;p&gt;大家常说：”物以类聚，人以群分“，因为这样对人来说，交际成本是最低的，也是最舒适的方式。一般人都不太愿意跳出自己的舒适区，去尝试更有难度且有助提升自我的挑战。&lt;/p&gt;
&lt;p&gt;不管贫穷与否，如果事情做不好，那么你所处的地位可能与贫穷无异。通常情况下，人的心理能否接受自己不如别人，在可能会被别人嘲笑的情况下，是否还能努力往前走，直到改变自己的状态，这就是一种考验，与走出贫困差不多。&lt;/p&gt;
&lt;p&gt;其实多数人都知道，要多向学习好的、能力强的人为伍，这些道理小学老师都经常说。但有时要去向比自己牛逼的人学习请教，也是需要一点勇气，以及改变自我的努力和决心。&lt;/p&gt;
&lt;h4 id=&quot;关于投资&quot;&gt;&lt;a href=&quot;#关于投资&quot; class=&quot;headerlink&quot; title=&quot;关于投资&quot;&gt;&lt;/a&gt;关于投资&lt;/h4&gt;&lt;p&gt;作者在书中挺推荐买标准普尔500指数，还让他女儿拿1/3的钱直接购买标普500指数ETF，每过两三个月就继续定投，不管涨跌。说实话，我也没关注这指数，今天赶紧加个关注先。&lt;/p&gt;
&lt;p&gt;作者对投资给出了4条建议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;永远不要觉得自己能够打败市场&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得下面这张图已经足够说明一切了，最近在微信和朋友圈上传得挺火的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fxcfh8tjvlj307z0cz77v.jpg&quot; alt=&quot;image-20181118191352193&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;对市场要有信心&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;作者说，股市有涨有跌，但要相信股市在较长的时间里是往上走的。&lt;/p&gt;
&lt;p&gt;我曾经对腾讯700也是迷之自信，但你看看现在，这一年都跌成啥样了，当然如果你说再等个一两年，那应该还是涨的，看谁命长了。还好作者后面补了个第3点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;虽然股市在下跌后总会涨回来，但是单一股票未必。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在2000年股价到达顶点的英特尔和思科，今天的股价不足当年的1/4，而且可能永远没有机会回到当时的峰值了。也就是说，投资单一的股票，即使遇到明星公司，也未必能长期赚钱。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;时间是你的朋友，而时机不是。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;投资要有耐心，不要急于求成。聪明的投资人永远在股市上投资，而不是试图投机挑选最低点和最高点。因此，走出坏运气的关键是耐心，让时间成为我们的朋友。&lt;/p&gt;
&lt;p&gt;除以上建议之外，作者还给出了3条禁忌：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不要进行过于冒险，会导致来顶之灾的投资&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如做空股票和使用杠杆投资，你们再回头看看“格雷厄姆的微笑”吧！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不要进行自己不懂的投资&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拿自己的短处和别人的长处比，胜算微乎其微。同时，你看不懂的投资里面常常有很多陷阱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;不要被那些所谓的失去了的投机机会乱了方寸&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经常有人说：”如果我当初买了比特币，今天能赚100倍“。这种话是没有意义的，如同中彩票一般，是运气，遇不上，也不必在意，因为人生的机会还有很多。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;关于友情&quot;&gt;&lt;a href=&quot;#关于友情&quot; class=&quot;headerlink&quot; title=&quot;关于友情&quot;&gt;&lt;/a&gt;关于友情&lt;/h4&gt;&lt;p&gt;作者在书中讲到一个在腾讯的经历，大家感受下，其它就不啰嗦了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxcfyq7yg6j312k0u04go.jpg&quot; alt=&quot;IMG_6440&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;关于交际&quot;&gt;&lt;a href=&quot;#关于交际&quot; class=&quot;headerlink&quot; title=&quot;关于交际&quot;&gt;&lt;/a&gt;关于交际&lt;/h4&gt;&lt;p&gt;与我们接触的人当中，可以分为4种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与自己关系好，能力强；&lt;/li&gt;
&lt;li&gt;与自己关系好，能力有限；&lt;/li&gt;
&lt;li&gt;并非自己朋友，但能力强；&lt;/li&gt;
&lt;li&gt;与自己关系不好，能力不强。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第1种好办，第4种交集不多，可以忽略，所以为人处世方面，我们需要比较留意的第2和第3种人。&lt;/p&gt;
&lt;p&gt;对于这些人，我们必须理性对待，避免依据个人喜好来判断人和事：符合自己喜好的人，无论他们做什么都觉得好；不符合自己喜好的人，无论他们做什么都要挑毛病。&lt;/p&gt;
&lt;p&gt;比如特朗普，很多人讨厌他，其实我也讨厌他，然后就有很多人对他做的任何事都持反对意见，无论对错，这就有点失去理想了。&lt;/p&gt;
&lt;p&gt;在社会上，个人生活和事业有时是需要他人的支持和帮助，需要我们能够团结大多数人，把事情做好。&lt;/p&gt;
&lt;h4 id=&quot;关于拒绝&quot;&gt;&lt;a href=&quot;#关于拒绝&quot; class=&quot;headerlink&quot; title=&quot;关于拒绝&quot;&gt;&lt;/a&gt;关于拒绝&lt;/h4&gt;&lt;p&gt;作者举例说曾有朋友找他帮忙，就是帮个孩子联系谷歌或者腾讯的实习机会，但看了孩子材料之后就直接回绝了。那朋友也表示理解，就没有再提此事。&lt;/p&gt;
&lt;p&gt;这种事太常见了，尤其是在腾讯这类公司，很多人会找过来帮忙找个工作之类，现在基本每次回家都有人找我。以前有人让我帮忙投简历，我一般都直接帮投了，即使有些简历或者学历问题，基本都拿不到面试机会的，我也帮忙投了，所以在公司那个”伯乐“平台上，结果全是拒绝的。后来，我学聪明了，不再当”老好人“。一些简历有问题，有明显水平不行的，我都委婉地回绝掉。一方面，投了也是白投，另一方面HR又不傻，我老帮人投这类简历，别人还会觉得我看人的水平太次太有问题了。&lt;/p&gt;
&lt;p&gt;对于别人请帮忙的事，作者总结出4点，按不同情况采取不同的方法处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能力不及，不能帮上忙，直接在第一时间委婉拒绝。&lt;/li&gt;
&lt;li&gt;能帮上忙，但是自己代价太大，不想帮的，就不要勉强自己，但也要及早通知对方。&lt;/li&gt;
&lt;li&gt;不论多困难都愿意帮，而且极有可能办成，这时就答应对方，然后全力去做。&lt;/li&gt;
&lt;li&gt;虽然愿意帮，但有可能帮上，也可能帮不上，这时要将实际情况说明，千万不要轻易许诺。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h4&gt;&lt;p&gt;这书整体上我觉得还不错，虽然有些是对中学生或大学生说的道理，很多事情自己经历过也都明白，但也有一些适合不同年龄段的人学习的知识点，所以还是推荐阅读。&lt;/p&gt;
&lt;p&gt;喜欢吴军写的书，并非崇拜对方，而他写的书确实很好，也很用心。在这种浮躁的社会，出书也不容易，写好书更不容易，自己出过书的人应该更有体会。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fxcenoinw2j307009nta1.jpg&quot; alt=&quot;image-20181118184524117&quot;&gt;&lt;/p&gt;
&lt;p&gt;《态度》是吴军在今年新出的书籍，是他写给女儿
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="读书笔记" scheme="http://riusksk.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>读《风格感觉：21世纪写作指南》</title>
    <link href="http://riusksk.github.io/2018/11/10/%E8%AF%BB%E3%80%8A%E9%A3%8E%E6%A0%BC%E6%84%9F%E8%A7%89%EF%BC%9A21%E4%B8%96%E7%BA%AA%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97%E3%80%8B/"/>
    <id>http://riusksk.github.io/2018/11/10/读《风格感觉：21世纪写作指南》/</id>
    <published>2018-11-10T08:17:37.000Z</published>
    <updated>2018-11-10T10:05:29.000Z</updated>
    
    <content type="html">&lt;p&gt;1、节俭使用元话语（语句中标示话语结构的标记语言，即用来提醒读者应该注意什么），可以用提问代替元话语，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：这一章讨论引起名字流行程度上升和下降的因素。&lt;/p&gt;
&lt;p&gt;【改后】：一个名字流行或不流行的原因是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、放弃专家腔、更自然地对话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：近年来，越来越多的心理学家和语言学家将注意力转向儿童语言习得的问题。本文将评述这一过程近年来的研究。&lt;/p&gt;
&lt;p&gt;【改后】：小孩子不用专门上课，就能获得说一门语言的能力。他们怎么做到的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、写作清晰有力，少用模糊词汇&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：杰克是个诚实的人。&lt;/p&gt;
&lt;p&gt;【改后】：杰克是个&lt;code&gt;特别&lt;/code&gt;诚实的人。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加了“特别”反而让人产生困惑，甚至以为说的是反话，所以少用“非常”、“十分”、“特别”这种过犹不及的强调词。&lt;/p&gt;
&lt;p&gt;4、少用抽象词，比如“xx性”、“xx观”、“xx力”，这种特别容易出现在工作中，俗称“官僚体”，腾讯内部就有一堆此类名词（闭环、打法、自控力、大局观、专注度……）&lt;/p&gt;
&lt;p&gt;5、去掉僵尸名词：比如“做出确认”变成“确认”、“做出辞职的决定”变成“决定辞职”。&lt;/p&gt;
&lt;p&gt;6、采用主动和互动风格，即站在读者角度或者自己主动的角度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：我们很高兴地宣布，本实验室的新设施将对外开放，随时准备承接各类脑科学实验。&lt;/p&gt;
&lt;p&gt;【改后】：你将有机会使用本实验室，来做你的脑科学实验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7、【有序地称呼反复出现的事物】避免读者过多思考，免得他们需要思考是否为新事物&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个&lt;code&gt;英国人&lt;/code&gt;、一个&lt;code&gt;法国人&lt;/code&gt;和一个&lt;code&gt;犹太人&lt;/code&gt;坐在一起，这个&lt;code&gt;英国人&lt;/code&gt;说……，这个&lt;code&gt;法国人&lt;/code&gt;说……，这个&lt;code&gt;犹太人&lt;/code&gt;说……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;少用他/她/它去代替前面说过的人物事等，减少读者疑惑和思考，避免产生歧义，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愧疚、复仇和苦痛会从感情上毁掉你和你的孩子。&lt;code&gt;你&lt;/code&gt;必须摆脱他们。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的&lt;code&gt;你&lt;/code&gt;是摆脱你的孩子，还是摆脱愧疚、复仇和苦痛？&lt;/p&gt;
&lt;p&gt;8、避免使用过多的连接词，否则文章就会变得臃肿不堪，比如下句中的&lt;code&gt;因为&lt;/code&gt;就是多余的，因为前面的“原因”已经暗示我们正在做出解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;太多人生活在黑暗之中的原因是&lt;code&gt;因为&lt;/code&gt;他们想那样生活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;9、【谨慎地运用否定】正如克林顿辩解道“我没有和那个女人发生过性关系”的时候，并没有使各种传言平息下来，有时甚至起到“此地无银三百两“的反作用。&lt;/p&gt;
&lt;p&gt;10、正确的写作用法只是促成良好写作最小的因素，其重要性远远比不过保持连贯性、使用古典风格、克服知识的诅咒，更不用说在智力上维护勤恳了。假如真的希望提高写作质量，或者怒斥他人的文章，最需要关注的不是那些语法规则，而是那些支配批判性思考和发现事实的规则：&lt;/p&gt;
&lt;p&gt;​    a. 查资料&lt;/p&gt;
&lt;p&gt;​    b.确保论证有理有据&lt;/p&gt;
&lt;p&gt;​    c. 不要把轶事或个人经历当作世界的常态，避免把特殊个例当作显著现象&lt;/p&gt;
&lt;p&gt;​    d. 谨防虚假的二分法：把复杂问题化为两种思想之间的战争，几乎无法帮助我们增进理解&lt;/p&gt;
&lt;p&gt;​    e.论证应当基于理性，而非个人。即“不要证明自己对，而要弄清什么是对的”&lt;/p&gt;
&lt;p&gt;最后说一句最重要的话：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;热文或畅销书之所以流行，关键在于其内容，而非华丽的辞藻文法。&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;1、节俭使用元话语（语句中标示话语结构的标记语言，即用来提醒读者应该注意什么），可以用提问代替元话语，比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;【改前】：这一章讨论引起名字流行程度上升和下降的因素。&lt;/p&gt;
&lt;p&gt;【改后】：一个名字流行或不流行的原因是什么？&lt;/p&gt;

    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>我的挑书手段</title>
    <link href="http://riusksk.github.io/2018/11/10/%E6%88%91%E7%9A%84%E6%8C%91%E4%B9%A6%E6%89%8B%E6%AE%B5/"/>
    <id>http://riusksk.github.io/2018/11/10/我的挑书手段/</id>
    <published>2018-11-10T00:53:52.000Z</published>
    <updated>2018-11-10T02:47:23.000Z</updated>
    
    <content type="html">&lt;p&gt;双十一，一年一度的”屯书日“又到了。&lt;/p&gt;
&lt;p&gt;鄙人生平无其它购物嗜好，唯有购书。&lt;/p&gt;
&lt;p&gt;在电子书横行的时代，各类读书应用都在崛起，比如”微信读书“、”QQ阅读“、”掌阅“等，个人习惯用微信读书，因为有社交好友的阅读推荐，以及公司送的读书券，所以基本也都是免费的，这个才是重点。&lt;/p&gt;
&lt;p&gt;对于懒人，也有听书应用，比如”懒人听书“、”喜马拉雅“，特别适合听小说、历史人文，之前我就在上面听过《明朝那些事儿》、《盗墓笔记》等，特别是一些小说类的配音，如电影一般，甚是精彩声动。&lt;/p&gt;
&lt;p&gt;开篇聊完，该说说”挑书”这件事儿了……&lt;/p&gt;
&lt;p&gt;首先，对于非技术书，如果在上述读书app中有免费的，一般我不会去买实体书，直接在app上翻来看看，有兴趣就继续，没兴趣就结束了。&lt;/p&gt;
&lt;p&gt;所以，这里所说的挑书，挑的是技术书以及无电子版的非技术书，或者其它想收藏的经典书籍（如书帖、史书、经管心理名著等等）。&lt;/p&gt;
&lt;h4 id=&quot;挑书第一式：查作者翻目录&quot;&gt;&lt;a href=&quot;#挑书第一式：查作者翻目录&quot; class=&quot;headerlink&quot; title=&quot;挑书第一式：查作者翻目录&quot;&gt;&lt;/a&gt;挑书第一式：查作者翻目录&lt;/h4&gt;&lt;p&gt;翻开当当网信息安全书籍总榜，在前3名，永远有一本书占其中，书名永远是《黑客xx从入门到精通》，而且还是个系列，好多本，也不得不承认，越初级越入门，越受欢迎，毕竟菜鸟永远比专业人士多……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fx2pvzdgcfj30q806iq5z.jpg&quot; alt=&quot;image-20181110093819437&quot;&gt;&lt;/p&gt;
&lt;p&gt;挑书第一眼，自然是作者与目录，但对它们的判断，又常常要求读者具备一定的专业知识，因为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“只有具备犯罪能力的人才能洞察他人的犯罪行为。”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看作者，经常署名“xx工作室”，也有个人，此时都可以查看他们出过的书，对比各书目录，经常可以发现“换汤不换药”的行为，把旧书内容重新包装进新书再出版。&lt;/p&gt;
&lt;p&gt;有时出版社编辑也会找我帮忙评价下某些新书目录，我就经常这么搞，偶而就会发现存在这种情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fx2qf148i7j30d20f612a.jpg&quot; alt=&quot;image-20181110095640534&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在很多书籍都可以在线试读了，也一种不错的挑书方式。&lt;/p&gt;
&lt;h4 id=&quot;挑书第二式：利用工具查价&quot;&gt;&lt;a href=&quot;#挑书第二式：利用工具查价&quot; class=&quot;headerlink&quot; title=&quot;挑书第二式：利用工具查价&quot;&gt;&lt;/a&gt;挑书第二式：利用工具查价&lt;/h4&gt;&lt;p&gt;每到购物节，各网站都会推出“满多少减多少”的优惠，但有时查下历史价格趋势会发现，都是先抬高价格再打折的。&lt;/p&gt;
&lt;p&gt;对于这种情况都一些工具可以查询，如果是在电脑上可以用“油猴“脚本：购物党自动比价工具：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwgy1fx2qp7xqnwj30zg0azn24.jpg&quot; alt=&quot;image-20181110100630299&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果是手机上，可以使用”慢慢买“、”历史价值查询“，比如京东《态度》这本书，昨天就从32.5抬高到59：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fx2qsszf40j309a0g5tb5.jpg&quot; alt=&quot;image-20181110100956404&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;挑书第三式：看评价&quot;&gt;&lt;a href=&quot;#挑书第三式：看评价&quot; class=&quot;headerlink&quot; title=&quot;挑书第三式：看评价&quot;&gt;&lt;/a&gt;挑书第三式：看评价&lt;/h4&gt;&lt;p&gt;购物网站上面都有评价可以看，还有豆瓣读书上，都可以看到一些书籍的评价，作为自己的一些参考。虽然豆瓣读书的评分不如电影那般准确，但评语还是可以参考的。&lt;/p&gt;
&lt;p&gt;还有网上也有一些推荐书籍的文章，经典的比如”C语言之四书五经“、“Linux内核学习四库全书”，还有最近左耳朵耗子在微博上推荐的“程序员必读经典书籍”，都是可以借鉴参考的。&lt;/p&gt;
&lt;p&gt;这些文章网上都有，大家自行搜索，对于信息安全从业人员，之前我也列了个书单“信息安全从业者书单推荐”：&lt;a href=&quot;https://github.com/riusksk/secbook，好坏自行判断，毕竟不同人对同一本书的看法也是不一样的。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/secbook，好坏自行判断，毕竟不同人对同一本书的看法也是不一样的。&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;挑书第四式：预估对个人的实用价值&quot;&gt;&lt;a href=&quot;#挑书第四式：预估对个人的实用价值&quot; class=&quot;headerlink&quot; title=&quot;挑书第四式：预估对个人的实用价值&quot;&gt;&lt;/a&gt;挑书第四式：预估对个人的实用价值&lt;/h4&gt;&lt;p&gt;“买书如山倒，看书如抽丝”是多数人的真实写照，所以有时我也特别能理解女生为何喜欢整天买化妆品衣服包包之类的。对于这种情况，我一般这样选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在未来一年自己用不上的技术知识，不买相关书籍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;未来一年可能过时或淘汰的技术知识（比如Flash、塞班等），不买相关书籍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;挑选与当前自身能力要求相近或高一点的书籍，至少能看懂半本书的，当年初学二进制逆向，看《网络渗透技术》一书就跟天书一般，没几年的技术功底积累，也根本看不懂此书&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;可能绝版的好书，也可考虑提前购买，即使当前看不懂，还说《网络渗透技术》这书，后来我在淘宝双倍价购买打印版了，现在china-pub上也可以双倍价购买此书，不过封面已换&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;挑书第五式：打铁仍需自身硬&quot;&gt;&lt;a href=&quot;#挑书第五式：打铁仍需自身硬&quot; class=&quot;headerlink&quot; title=&quot;挑书第五式：打铁仍需自身硬&quot;&gt;&lt;/a&gt;挑书第五式：打铁仍需自身硬&lt;/h4&gt;&lt;p&gt;遥想当年，我看的第一本安全书籍叫《黑客入门》，当时挑书的标准是：必须带有“黑客”两个字，否则不看。&lt;/p&gt;
&lt;p&gt;过一段时间，发现这些书籍对提高技术并没有什么作用，然后开始找大学计算机课程开始从基础学起。&lt;/p&gt;
&lt;p&gt;这个转折点，要从《深入理解计算机系统》开始，然后又开始学汇编、C/C++、数据结构与算法等等基本课。&lt;/p&gt;
&lt;p&gt;当自己积累得越来越多的时候，能看懂的书就越多，对技术书籍的好坏判断，自然就有自己的评判标准。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fx2rvlwgu4j309j0b4dhn.jpg&quot; alt=&quot;WX20180707-203543&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;双十一，一年一度的”屯书日“又到了。&lt;/p&gt;
&lt;p&gt;鄙人生平无其它购物嗜好，唯有购书。&lt;/p&gt;
&lt;p&gt;在电子书横行的时代，各类读书应用都在崛起，比如”微信读书“、”QQ阅读“、”掌阅“等，个人习惯用微信读书，因为有社交好友的阅读推荐，以及公司送的读书券，所以基本也都是免费的
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（5）—— Intel Processor Trace</title>
    <link href="http://riusksk.github.io/2018/10/14/honggfuzz5/"/>
    <id>http://riusksk.github.io/2018/10/14/honggfuzz5/</id>
    <published>2018-10-14T01:48:40.000Z</published>
    <updated>2018-12-01T02:58:14.000Z</updated>
    
    <content type="html">&lt;p&gt;对于闭源程序的反馈驱动Fuzzing，通常有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二进制插桩：使用Pin或DynamoRIO动态插桩监控代码覆盖率，比如winafl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟化技术：使用Qemu或Boch等虚拟化技术实现应用层和内核层的代码覆盖率监控，比如afl、bochpwn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;硬件级技术：使用Intel Processor Trace（PT）技术，比如honggfuzz&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Intel-PT&quot;&gt;&lt;a href=&quot;#Intel-PT&quot; class=&quot;headerlink&quot; title=&quot;Intel PT&quot;&gt;&lt;/a&gt;Intel PT&lt;/h4&gt;&lt;p&gt;Intel® Processor Trace (Intel® PT) 是在i5/i7 5000以上型号上加入的功能，由于它是硬件级的特性，相比Qemu或Boch，在性能上和代码工作量会占有一定优势。在Linux上可以通过perf来使用PT，可以先简单看是否支持PT：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;查看是否支持PT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ls /sys/devices/intel_pt/format&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;追踪程序执行：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;perf record -e intel_pt// program&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以使用开源工具&lt;a href=&quot;https://github.com/andikleen/simple-pt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;simple-pt&lt;/a&gt;中的ptfeature命令行工具来检测:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./ptfeature pt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Supports PT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最新版GDB也支持pt功能了：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gdb program&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record btrace pt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record instruction-history /m	# show instructions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;record function-history		# show functions executed&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;honggfuzz-perf-event-open&quot;&gt;&lt;a href=&quot;#honggfuzz-perf-event-open&quot; class=&quot;headerlink&quot; title=&quot;honggfuzz perf_event_open&quot;&gt;&lt;/a&gt;honggfuzz perf_event_open&lt;/h4&gt;&lt;p&gt;在程序内通过&lt;code&gt;perf_event_open&lt;/code&gt;（&lt;a href=&quot;http://man7.org/linux/man-pages/man2/perf_event_open.2.html）函数可以使用PT实现BB基本块的覆盖率追踪，传递给指定进程pid来实现监控：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://man7.org/linux/man-pages/man2/perf_event_open.2.html）函数可以使用PT实现BB基本块的覆盖率追踪，传递给指定进程pid来实现监控：&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/perf_event_open.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将返回的文件描述符传递给mmap映射为可读写的用户内存空间，以便从中读取PT记录的追踪数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/mmapbuf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;PT记录的追踪数据采用压缩的二进制格式输出，每秒每个CPU都会持续记录并输出，由于是硬件记录的，最早自然是出现在内核空间，为了使用它，就需要将其导出到用户空间，即通过前面mmap方法映射到用户可写的内存空间，然后再去定位数据解码。PT导出的追踪数据被存储在一个叫&lt;code&gt;AUX space&lt;/code&gt;的内存区域，它相对&lt;code&gt;perfMmapBuf&lt;/code&gt;的偏移记录在&lt;code&gt;perf_event_mmap_page-&amp;gt;aux_offset&lt;/code&gt;，大小为&lt;code&gt;perf_event_mmap_page-&amp;gt;aux_size&lt;/code&gt;，上面代码的第二步&lt;code&gt;mmap&lt;/code&gt;就是去映射&lt;code&gt;AUX space&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下来就是利用libpt来解码捕获到追踪数据，实现函数位于perf_ptAnalyzePkt中：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/ptAnalyzePkt.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后将执行到的BB基本块信息更新到feedback map，之后的实现步骤就跟本系列第1篇驱动反馈中所讲的一致。&lt;/p&gt;
&lt;p&gt;跑起来的效果如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fxr27bx6jnj30ks08245z.jpg&quot; alt=&quot;image-20181201105755833&quot;&gt;&lt;/p&gt;
&lt;p&gt;到这里，关于《honggfuzz漏洞挖掘技术深究系列》的文章先暂告一段落了，它就相当于是自己的学习笔记，也可以留作日后查询。&lt;/p&gt;
&lt;p&gt;本系列的其它文章如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483746&amp;amp;idx=1&amp;amp;sn=9d0ff5e0bae65f9ca9dbea4cf74449c6&amp;amp;chksm=fb04159acc739c8c36e0785e2ce9c3a202066c6cc39a9ce32fd0fc9dfeb348e860a82e29c9d6&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（1）——反馈驱动（Feedback-Driven）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483780&amp;amp;idx=1&amp;amp;sn=8e634a1deb08006063156db60b1c1f77&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（2）—— Persistent Fuzzing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483819&amp;amp;idx=1&amp;amp;sn=daed3baf16e1211d6d869183ba1680f4&amp;amp;chksm=fb041553cc739c457d54494c99d1870488dfa76831fde40a351098b0fcfcdb9f716a473ba213&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（3）——Fuzz策略&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU0MzgzNTU0Mw==&amp;amp;mid=2247483828&amp;amp;idx=1&amp;amp;sn=e96241ce399781414db3ba556ce1f90d&amp;amp;chksm=fb04154ccc739c5a12176eb7492e80abfd36e630193627ba140394e678e47ee2b0f1532516b1&amp;amp;token=3421110&amp;amp;lang=zh_CN#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;honggfuzz漏洞挖掘技术深究系列（4）—— 扩展Fuzzer&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于闭源程序的反馈驱动Fuzzing，通常有3种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;二进制插桩：使用Pin或DynamoRIO动态插桩监控代码覆盖率，比如winafl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟化技术：使用Qemu或Boch等虚拟化技术实现应用层和内核层的代
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
      <category term="漏洞挖掘" scheme="http://riusksk.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（4）—— 扩展Fuzzer</title>
    <link href="http://riusksk.github.io/2018/10/02/honggfuzz4/"/>
    <id>http://riusksk.github.io/2018/10/02/honggfuzz4/</id>
    <published>2018-10-02T01:35:52.000Z</published>
    <updated>2018-10-02T02:54:52.000Z</updated>
    
    <content type="html">&lt;p&gt;对于一些复合文件格式，如果只是单纯的暴力Fuzzing，会导致生成很多无法被解析的文件，因此需要对文件变异作一些定制化的工作，比如docx、doc等office复合文件，docx是个压缩包，doc是个OLE格式，如果fuzz docx自然需要将其zip解压，再针对感兴趣的文件作变异，对于doc最好是作文件格式解析，只对感兴趣的stream作文件变异，这样的fuzzing的有效性才会更高。&lt;/p&gt;
&lt;p&gt;庆幸地是，honggfuzz提供&lt;code&gt;-c&lt;/code&gt;参数用于扩展变异规则以代替原有变异方式，同时提供有&lt;code&gt;--pprocess_cmd&lt;/code&gt;在原有的文件变异后再作处理：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;--mutate_cmd|-c VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;External command producing fuzz files (instead of internal mutators)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--pprocess_cmd VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;External command postprocessing files produced by internal mutators&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;功能比较有用，也是我用得比较多的，另一个&lt;code&gt;--pprocess_cmd&lt;/code&gt;基本我没用过。&lt;/p&gt;
&lt;p&gt;当你通过&lt;code&gt;-f&lt;/code&gt;提供输入样本目录后，在fuzzing时，随机提取的文件会直接传递给&lt;code&gt;-c&lt;/code&gt;参数指定的扩展命令作变异。&lt;/p&gt;
&lt;p&gt;比如想针对某文件特定offset范围内的内容进行变异，下面是针对macOS/iOS字体文件中的虚拟指令作Fuzzing时写的脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight py&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; mmap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; randint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RANGE_START = &lt;span class=&quot;number&quot;&gt;0x16D8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RANGE_END   = &lt;span class=&quot;number&quot;&gt;0x304D&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MIN_BYTES_TO_FLIP = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MAX_BYTES_TO_FLIP = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;.DS_Store&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exit(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(sys.argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&quot;r+b&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mapped = mmap.mmap(f.fileno(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;#print &quot;file size: 0x%x&quot; % len(mapped)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bytes_to_flip = randint(MIN_BYTES_TO_FLIP, MAX_BYTES_TO_FLIP)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bytes_flipped = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; bytes_flipped &amp;lt; bytes_to_flip:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte_pos = randint(RANGE_START, RANGE_END)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#print &quot;byte_pos: 0x%x&quot; %byte_pos &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte_new = chr(randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapped[byte_pos] = byte_new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bytes_flipped += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mapped.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;变异效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/font_rangfuzz.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后挖到一个TTF字体虚拟指令漏洞：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;orig file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2F90h: 00 3F C5 CD 2B 10 C1 10 DE 3F C5 【CD】 2B 10 C5 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;poc file:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2F90h: 00 3F C5 CD 2B 10 C1 10 DE 3F C5 【DD】 2B 10 C5 10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glyf table -&amp;gt; SimpleGlyf[] -&amp;gt; Instructions(&amp;apos;0xCD&amp;apos; =&amp;gt; ‘0xDD&amp;apos;) -&amp;gt; MDRP指令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的，你也可以写个doc、docx等office文件格式解析并变异的扩展fuzzer，比如利用olefile库（但只支持修改同等大小不变的doc，要插入或删除需要自行实现），或者通过COM接口来实现操作。&lt;/p&gt;
&lt;p&gt;比如之前有段时间doc中的公式编辑器存在很多漏洞，你就可以专门针对&lt;code&gt;Equation Native&lt;/code&gt;流作fuzzing。&lt;/p&gt;
&lt;p&gt;最后放两张图(riufuzz是自己对honggfuzz二次开发的版本，后面有机会再讲)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/olefuzz.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/doc_crash.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;




</content>
    
    <summary type="html">
    
      &lt;p&gt;对于一些复合文件格式，如果只是单纯的暴力Fuzzing，会导致生成很多无法被解析的文件，因此需要对文件变异作一些定制化的工作，比如docx、doc等office复合文件，docx是个压缩包，doc是个OLE格式，如果fuzz docx自然需要将其zip解压，再针对感兴趣的文
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
  </entry>
  
  <entry>
    <title>honggfuzz漏洞挖掘技术深究系列（3）——Fuzz策略</title>
    <link href="http://riusksk.github.io/2018/09/16/honggfuzz3/"/>
    <id>http://riusksk.github.io/2018/09/16/honggfuzz3/</id>
    <published>2018-09-16T03:54:16.000Z</published>
    <updated>2018-10-02T01:49:03.000Z</updated>
    
    <content type="html">&lt;p&gt; honggfuzz在对输入文件进行变异前，会先创建个临时文件名（honggfuzz+pid+time），然后将输入数据变异后写入临时文件。&lt;/p&gt;
&lt;p&gt; fuzz策略的实现主要集中在mangle.c中，在循环的fuzzloop函数中，会根据用户的选择的fuzz方式来调用动态fuzz或者静态fuzz的方法，但最后都是调用mangle_mangleContent来变异文件数据：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-3bdc1da036608cc745ef0cb89c2313ea_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 跟进mangle_mangleContent函数：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-529248182e9e09517288c6cbc0f4152d_hd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 重点就在于后半部分，它会随机选择变异函数进行处理，更改的字节数也是随机的，根据用户指定的mutation变异率来定，即允许变异文件大小的百分比，变异函数列表如下：&lt;/p&gt;
 &lt;center&gt;&lt;img src=&quot;http://riusksk.me/media/v2-9450da60b2082522f7aa9dff7757a921_hd.png&quot; alt=&quot;&quot;&gt;&lt;/center&gt;

&lt;p&gt; 这些函数都是在mangle_init中初始化，各函数之间也会相互调用：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-025eaad0cd3d34fb828240b30469bede_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 把这些函数过一遍就是honggfuzz中所有的文件变异规则了，如果想实现自己的fuzzer，这些规则来扣出来用Python实现一遍，顺便把afl的规则也扣过来就更完美了，下面是我之前写office fuzzer时的半成品代码，最后偷懒直接用radamas去实现变异了：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-a0d2b4262c74f02388926e1829e70a37_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 再回到刚才的变异函数列表，我们一个个走读源码。&lt;/p&gt;
&lt;p&gt; 1、mangle_Resize函数：&lt;/p&gt;
&lt;p&gt; 用空格填充随机位置&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-51e43d8f246b8fcb2408bc0c8700baa2_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-8875c992f90668d4a2be2817ee32acc8_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 2、mangle_Byte函数：&lt;/p&gt;
&lt;p&gt; 向随机位置写随机的uint8类型的数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-b857966a5c005b1e95f80512382933d6_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 3、mangle_Bit函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数值做位翻转&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-179d9066a2fd1fc2653f335ce5a41f72_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 4、mangle_Bytes函数：&lt;/p&gt;
&lt;p&gt; 在随机位置覆盖写2~4字节数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-4857e9d3d3fb2722bb4705cff49d9bc9_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 5、mangle_Magic函数：&lt;/p&gt;
&lt;p&gt; 取各种边界值进行覆写，这些边界值部分跟AFL还不一样，我在自己的fuzzer里面把它们作了整合。由于边幅所限，我省略了不少边界值：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-8b34894b9c1fe0833e95dc6d426ff8fb_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 6、mangle_IncByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据加1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-ea765d0bf263d6aed9cdaf94a1065631_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 7、mangle_DecByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据减1&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-bc2bf5117cb1495783b2d5501623e602_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 8、mangle_NegByte函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据取反&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-4ef170d3cbb5915de395b7f7aa304079_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 9、mangle_AddSub函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的1、2、4或8字节的数据长度作加减操作，操作数取 rand(0~8192)-4096&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-66a0ed1564725c2dbdf05439e6e26295_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 10、mangle_Dictionary函数：&lt;/p&gt;
&lt;p&gt; 变异目录名，也是随机取文件夹名称进行变异，如果有多个目录，那被变异的目录数也是随机的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-d5aaeb860ab0f32d1283e2d987e456ad_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 11、mangle_DictionaryInsert函数：&lt;/p&gt;
&lt;p&gt; 在目录的随机位置中插入随机数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0fa9250d8e778ca02841b66fc08a00ce_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 12、mangle_MemMove函数：&lt;/p&gt;
&lt;p&gt; 取随机位置的数据拷贝随机长度的数据，里面就是调用memmove函数实现的&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-eabb7cafe2e6042ef8bd2e18d526b9df_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 13、mangle_MemSet函数：&lt;/p&gt;
&lt;p&gt; 取随机位置、随机大小，用UINT8_MAX数值填充&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-82430bbef8b74651aea3a1bdeca9b2dc_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 14、mangle_Random函数：&lt;/p&gt;
&lt;p&gt; 取随机位置、随机大小的缓冲区，用随机数填充&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-51e9a2621714c7a6d88dc68c4a859979_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 15、mangle_CloneByte函数：&lt;/p&gt;
&lt;p&gt; 取两处随机位置的作数据交换&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-cac0e8c50be64a1174f9b7a6cc924a5e_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 16、mangle_Expand函数：&lt;/p&gt;
&lt;p&gt; 文件末尾扩展随机长度的空间，用空格填充，然后在随机位置，取前面的随机长度作数据拷贝&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0e199dd7f82c223a928ead2b7a6cdd04_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-bb4820b762220d720d78928d34e923e1_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 17、mangle_Shrink函数：&lt;/p&gt;
&lt;p&gt; 删除随机长度的文件内容&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-010ccb9f2dd19bd450b655cb9f9c7209_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 18、mangle_InsertRnd函数：&lt;/p&gt;
&lt;p&gt; 在文件的随机位置插入随机长度的数据&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-325836aaf17585d5a02265ae000b72fc_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 19、mangle_ASCIIVal函数：&lt;/p&gt;
&lt;p&gt; 在随机位置覆盖32字节的随机数&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://riusksk.me/media/v2-0385d1c51fda364543b22c77067b28ac_hd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; 总结&lt;/p&gt;
&lt;p&gt; 在Fuzzing过程中，很多变异规则是共用的，可以参考一些主源的开源软件，比如afl\peach\honggfuzz\libfuzzer，提取规则作整合，然后写个自己的fuzzing框架，在后面作针对的fuzzer时，可以直接套用。&lt;/p&gt;
&lt;p&gt; 从上面的fuzz策略可以总结出常规的变异规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机数据替换&lt;/li&gt;
&lt;li&gt;数据值增减&lt;/li&gt;
&lt;li&gt;已知边界值替换&lt;/li&gt;
&lt;li&gt;插入随机数据&lt;/li&gt;
&lt;li&gt;删减文件内容&lt;/li&gt;
&lt;li&gt;目录变异&lt;/li&gt;
&lt;li&gt;数据拷贝覆盖&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; honggfuzz在对输入文件进行变异前，会先创建个临时文件名（honggfuzz+pid+time），然后将输入数据变异后写入临时文件。&lt;/p&gt;
&lt;p&gt; fuzz策略的实现主要集中在mangle.c中，在循环的fuzzloop函数中，会根据用户的选择的fuzz方式来调用
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="honggfuzz" scheme="http://riusksk.github.io/tags/honggfuzz/"/>
    
      <category term="fuzz" scheme="http://riusksk.github.io/tags/fuzz/"/>
    
  </entry>
  
</feed>
