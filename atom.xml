<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>riusksk&#39;s blog</title>
  <subtitle>攀蟾折桂摄寰宇，摘星揽月御乾坤。踏云踩雾骋宵壤，驱风逐日闯天地。 ------泉哥</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://riusksk.github.io/"/>
  <updated>2020-01-22T10:06:40.000Z</updated>
  <id>http://riusksk.github.io/</id>
  
  <author>
    <name>riusksk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从研究者的视角看Fuzzing技术发展30年</title>
    <link href="http://riusksk.github.io/2020/01/22/Fuzzing%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95%E7%9A%84%E8%BF%9930%E5%B9%B4/"/>
    <id>http://riusksk.github.io/2020/01/22/Fuzzing技术发展的这30年/</id>
    <published>2020-01-22T08:16:48.000Z</published>
    <updated>2020-01-22T10:06:40.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;源起&quot;&gt;&lt;a href=&quot;#源起&quot; class=&quot;headerlink&quot; title=&quot;源起&quot;&gt;&lt;/a&gt;源起&lt;/h3&gt;&lt;p&gt;1988年，在威斯康星大学Barton Miller教授的计算机实验课上（&lt;em&gt;&lt;a href=&quot;http://pages.cs.wisc.edu/~bart/fuzz/CS736-Projects-f1988.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://pages.cs.wisc.edu/~bart/fuzz/CS736-Projects-f1988.pdf&lt;/a&gt;&lt;/em&gt; ），首次提出&lt;code&gt;Fuzz生成器&lt;/code&gt;(Fuzz Generator)的概念，用于测试Unix程序的健壮性，即用随机数据来测试程序直至崩溃。因此，Barton Miller教授也被多数人尊称为”模糊测试之父”。但是，当时更多是为了验证代码质量和程序的稳定性，而非专门用于挖掘安全漏洞，真正用于软件安全漏洞挖掘的开端要从下面两件事说起。&lt;/p&gt;
&lt;h3 id=&quot;从学术界到工业界的证明&quot;&gt;&lt;a href=&quot;#从学术界到工业界的证明&quot; class=&quot;headerlink&quot; title=&quot;从学术界到工业界的证明&quot;&gt;&lt;/a&gt;从学术界到工业界的证明&lt;/h3&gt;&lt;p&gt;2001年，芬兰奥卢大学公布&lt;code&gt;PROTOS&lt;/code&gt;测试集项目的研究成果（&lt;em&gt;&lt;a href=&quot;https://rd.springer.com/content/pdf/10.1007%2F978-0-387-35413-2_16.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://rd.springer.com/content/pdf/10.1007%2F978-0-387-35413-2_16.pdf&lt;/a&gt;&lt;/em&gt; ），首次将Fuzzing技术应用在网络协议的安全测试当中，他们针对不同的网络协议构造出不同的测试用例集，这些在其官网（&lt;em&gt;&lt;a href=&quot;https://www.ee.oulu.fi/research/ouspg/Protos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ee.oulu.fi/research/ouspg/Protos&lt;/a&gt;&lt;/em&gt; ）上依然可以下载到。2002年，&lt;code&gt;PROTOS&lt;/code&gt;逐渐成熟，Microsoft开始为该项目提供资金支持。于是，2003年项目组成立了Codenomicon公司，开始将Fuzzing技术应用于商业产品，也确实发现了不少安全问题。因此，PROTOS项目可以说是Fuzzing技术发展历程中的一次重要里程碑。可能大家对Codenomicon公司不太了解，但说到”心脏滴血”漏洞，应该无人不知无人不晓。没错，它就是Codenomicon公司发现的。&lt;/p&gt;
&lt;p&gt;2002年，在BlackHat USA黑客大会上，来自&lt;code&gt;Immunity&lt;/code&gt;安全公司（PS：还有人记得&lt;code&gt;Immunity Debugger&lt;/code&gt;吗？）的Dave Aitel发表议题&lt;em&gt;“An Introduction to SPIKE, the Fuzzer Creation Kit”&lt;/em&gt;，至此著名的Fuzzer工具&lt;code&gt;SPIKE&lt;/code&gt;公布了，它是基于块模板定义的网络协议测试工具，优点是支持定义可变长度数据块的能力，除生成随机数据外，它还提供一些现成的边界值生成，以提供触发崩溃的概率。&lt;code&gt;SPIKE&lt;/code&gt;的诞生，使得广大用户能够依据自身需求定制网络协议Fuzzer，这对Fuzzing技术的普及起到巨大的推动作用。早些年，笔者也曾写过一篇&lt;code&gt;SPIKE&lt;/code&gt;的教程&lt;em&gt;“基于SPIKE的网络协议Fuzzing技术(&lt;a href=&quot;http://riusksk.me/2011/12/30/spike-fuzz/)&amp;quot;&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.me/2011/12/30/spike-fuzz/)&amp;quot;&lt;/a&gt;&lt;/em&gt;，但现在其实基本不用了。&lt;/p&gt;
&lt;p&gt;从&lt;code&gt;PROTOS&lt;/code&gt;到&lt;code&gt;SPIKE&lt;/code&gt;的诞生，代表着学术界与工业界对Fuzzing技术在商业与安全实战领域的应用提供了有力的证明。&lt;/p&gt;
&lt;h3 id=&quot;文件Fuzzing技术的兴起&quot;&gt;&lt;a href=&quot;#文件Fuzzing技术的兴起&quot; class=&quot;headerlink&quot; title=&quot;文件Fuzzing技术的兴起&quot;&gt;&lt;/a&gt;文件Fuzzing技术的兴起&lt;/h3&gt;&lt;p&gt;2004年，&lt;code&gt;Peach&lt;/code&gt;模糊测试框架的发布，标志着文件Fuzzing时代的到来。最初&lt;code&gt;Peach&lt;/code&gt;是用&lt;code&gt;Python&lt;/code&gt;开发的，后来在2007年被收购后改用&lt;code&gt;C#&lt;/code&gt;重写，并分为社区版和付费版。&lt;code&gt;Peach&lt;/code&gt;支持文件格式、网络协议、ActivieX控件等多种形式，通过编写pit文件(xml格式)来定义数据格式，每次开始写的时候其实挺费劲的，后来有人提供自动将010editor格式解析器（仿C语言的bt文件）转换为pit，在一定程度上可以缓解劳动力。笔者第一次通过文件Fuzzing挖到漏洞也是借助&lt;code&gt;Peach&lt;/code&gt;实现的。&lt;/p&gt;
&lt;p&gt;直至今日，&lt;code&gt;Peach&lt;/code&gt;依然还有人在用，更有人将&lt;code&gt;Peach&lt;/code&gt;与&lt;code&gt;AFL&lt;/code&gt;打通，在&lt;code&gt;Github&lt;/code&gt;上发布&lt;code&gt;aflsmart&lt;/code&gt;的开源项目。&lt;/p&gt;
&lt;p&gt;文件Fuzzing应该是当前Fuzzing应用中最为普遍的形式，即使是网络协议等其它目标的Fuzzing，也是可以转换为文件Fuzzing的。比如&lt;code&gt;OpenSSL&lt;/code&gt;网络协议Fuzzing，通过源码打Log的方式先收集网络数据为本地文件，再调用其API写个hareness用AFL或libfuzzer进行本地测试，就顺利地将网络协议Fuzzing转换为文件Fuzzing。&lt;/p&gt;
&lt;h3 id=&quot;语法模板Fuzzing：打开攻击浏览器的大门&quot;&gt;&lt;a href=&quot;#语法模板Fuzzing：打开攻击浏览器的大门&quot; class=&quot;headerlink&quot; title=&quot;语法模板Fuzzing：打开攻击浏览器的大门&quot;&gt;&lt;/a&gt;语法模板Fuzzing：打开攻击浏览器的大门&lt;/h3&gt;&lt;p&gt;2008年，Mozilla安全团队发布了&lt;code&gt;jsfunfuzz&lt;/code&gt;和&lt;code&gt;DOMfuzz&lt;/code&gt;，基于JS语法模板来生成测试用例，以挖掘浏览器漏洞，后来两款工具合称&lt;code&gt;funfuzz&lt;/code&gt;( &lt;em&gt;&lt;a href=&quot;https://github.com/MozillaSecurity/funfuzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/MozillaSecurity/funfuzz&lt;/a&gt;&lt;/em&gt; )，以开源的形式对外公开。这款工具在当时确实挖到了不少浏览器的漏洞，但其语法模板的可扩展性并不友好，只能在其代码上作修改，这点不如&lt;code&gt;dharma&lt;/code&gt;( &lt;em&gt;&lt;a href=&quot;https://github.com/MozillaSecurity/dharma&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/MozillaSecurity/dharma&lt;/a&gt;&lt;/em&gt; )，以及后来Project Zero发布的&lt;code&gt;Domato&lt;/code&gt;( &lt;em&gt;&lt;a href=&quot;https://github.com/googleprojectzero/domato&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/domato&lt;/a&gt;&lt;/em&gt; )。这种基于语法模板的Fuzzing方式，挖完一波后，就要求保持模板的更新才能持续产出，同时要理解测试目标在JS代码上的触发逻辑，比如&lt;code&gt;JIT&lt;/code&gt;可通过for循环来触发代码优化，&lt;code&gt;Dom UAF&lt;/code&gt;可通过创建&lt;code&gt;Dom&lt;/code&gt;元素，并调用相关元素的方法来触发删除和引用，以探测是否存在&lt;code&gt;UAF&lt;/code&gt;的可能。整体上依赖于对语法和目标原理的理解，才能构造出好的语法模板。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;funfuzz&lt;/code&gt;之后，业界也出现了好多款优秀的JS语法Fuzzing工具，比如&lt;code&gt;grinder&lt;/code&gt;、&lt;code&gt;nduja&lt;/code&gt;、&lt;code&gt;crossfuzz&lt;/code&gt;等等。当年PC流行时代，用&lt;code&gt;grinder&lt;/code&gt;来Fuzzing Windows IE浏览器的人应该比较多。&lt;/p&gt;
&lt;p&gt;浏览器一直是网络攻击中最受关注和最常用的入口，过去如是，现今依然。因为系统自带，且用户使用率高，又是远程访问的最佳途径。渲染引擎和JS引擎一直是浏览器主要攻击面，主要以html、js、vbs作为解析语言，因此对这些语言的语法Fuzzing就自然而然的产生了。除此之外，如今&lt;code&gt;WebSQL&lt;/code&gt;也开始备受关注，比如Chrome上的&lt;code&gt;sqlite&lt;/code&gt;模块，SQL语法的fuzzing也随之而来。&lt;/p&gt;
&lt;p&gt;除了浏览器，pdf的JS和flash的as语法解析，也一度作为攻击Adobe Reader和Adobe Flash的入口。&lt;/p&gt;
&lt;h3 id=&quot;符号执行：学术与工业之争&quot;&gt;&lt;a href=&quot;#符号执行：学术与工业之争&quot; class=&quot;headerlink&quot; title=&quot;符号执行：学术与工业之争&quot;&gt;&lt;/a&gt;符号执行：学术与工业之争&lt;/h3&gt;&lt;p&gt;2008年，基于&lt;code&gt;LLVM&lt;/code&gt;的符号执行引擎&lt;code&gt;KLEE&lt;/code&gt;发布后，引领了一波程序分析新姿势的潮流。后来，符号执行被应用于Fuzzing中，经常被用来打CTF比赛，用来找key、解混淆、fuzzing等用途。比如，将&lt;code&gt;AFL&lt;/code&gt;与&lt;code&gt;angr&lt;/code&gt;结合的&lt;code&gt;driller&lt;/code&gt;（&lt;em&gt;&lt;a href=&quot;https://github.com/shellphish/driller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/shellphish/driller&lt;/a&gt;&lt;/em&gt; )，还被用在了CGC(Cyber Grand Challenge)自动网络攻防竞赛上，但这种比赛都是特定场景下的比赛，不能完全代表真实的软件世界；还有，将AFL与KLEE结合的&lt;code&gt;kleefl&lt;/code&gt;（&lt;em&gt;&lt;a href=&quot;https://github.com/julieeen/kleefl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/julieeen/kleefl&lt;/a&gt;&lt;/em&gt; ），这款工具知道的人应该不多。&lt;/p&gt;
&lt;p&gt;符号执行在学术界中应用得比较多，工业界相对少一些，这是现状。将符号执行应用在Fuzzing中，通过约束求解新路径的条件值，以增加代码覆盖率，可以一定程度上弥补暴力变异的不足。符号执行主要的挑战在于路径爆炸问题，约束求解能力的局限性，以及性能消耗问题，比如内存和时间消耗过大。符号执行与约束求解对于小型应用比较有效果，也常被用于CTF比赛，在CTF中使用最广的当属&lt;code&gt;angr&lt;/code&gt;框架。但是，基于当前的业界情况，符号执行仍然比较难以应用于大型软件中。符号执行在Fuzzing中的应用并没有真正带来新的技术浪潮，真正的技术浪潮始于代码覆盖引导技术的引入。&lt;/p&gt;
&lt;h3 id=&quot;代码覆盖引导技术：Fuzzing技术的分水岭&quot;&gt;&lt;a href=&quot;#代码覆盖引导技术：Fuzzing技术的分水岭&quot; class=&quot;headerlink&quot; title=&quot;代码覆盖引导技术：Fuzzing技术的分水岭&quot;&gt;&lt;/a&gt;代码覆盖引导技术：Fuzzing技术的分水岭&lt;/h3&gt;&lt;p&gt;2013年底，&lt;code&gt;afl-fuzz&lt;/code&gt;（ &lt;em&gt;&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lcamtuf.coredump.cx/afl/&lt;/a&gt;&lt;/em&gt; ）发布了，首次采用源码编译插桩和QEMU模式来实现代码覆盖引导Fuzzing的方式，这绝对是Fuzzing技术发展历程中最重要的一次里程碑，也是技术分水岭，它开启了Fuzzing技术的新篇章。刚发布的时候，afl并没有那么火，主要是在2014和2015年期间，被很多人使用后挖到不少主流开源软件的0day，并在Twitter上宣传，使得更多人关注到并使用，这证明了代码覆盖引导技术在Fuzzing实战中的价值。&lt;/p&gt;
&lt;p&gt;随后，基于afl二次开发的fuzzer如雨后春笋般涌现出来，比如winafl、libfuzzer、AFLFast、Vuzzer等等，而且针对各种语言的版本出相继出现，比如go、python、js、ruby等等。一些已知名的Fuzzer也迅速跟进，比如&lt;code&gt;syzkaller&lt;/code&gt;内核Fuzzer，它原本是基于API调用模板的，后来也引入了代码覆盖引导能力。同时，业界都在试图将其移植到各种平台上（比如windows、android、IOT平台等等），并实现支持闭源程序的代码覆盖引导能力，这一直是近几年来Fuzzing技术研究的热点方向，比如动静态插桩、虚拟机模拟执行、硬件特性等等。无论是工业界大会(BlackHat、OffensiveCon、CCC等等)，还是学术界四大顶会，关于Fuzzing的议题也越来越多，相信这种趋势会持续下去。&lt;/p&gt;
&lt;h3 id=&quot;系统函数调用模板Fuzzing一度成为攻击内核的常用手段&quot;&gt;&lt;a href=&quot;#系统函数调用模板Fuzzing一度成为攻击内核的常用手段&quot; class=&quot;headerlink&quot; title=&quot;系统函数调用模板Fuzzing一度成为攻击内核的常用手段&quot;&gt;&lt;/a&gt;系统函数调用模板Fuzzing一度成为攻击内核的常用手段&lt;/h3&gt;&lt;p&gt;2015年Google开源了&lt;code&gt;syzkaller&lt;/code&gt;，一款用于Fuzzing Linux内核的工具，漏洞产出特别高。现在依然很多人用它来挖各系统平台的内核漏洞，包括Android、macOS、Windows等主流系统平台。&lt;code&gt;syzkaller&lt;/code&gt;通过定义系统函数调用模板来实现，在模板中定义系统调用函数参数类型，并解决函数调用的顺序依赖和值依赖问题。Project Zero官方博客就曾写过一篇利用&lt;code&gt;syzkaller&lt;/code&gt; fuzz &lt;code&gt;socket&lt;/code&gt;挖掘Linux内核漏洞的文章，叫&lt;em&gt;“Exploiting the Linux kernel via packet sockets(syzkaller usage)”&lt;/em&gt; ( &lt;em&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html&lt;/a&gt;&lt;/em&gt; )，详细讲述了如何编写模板，以及&lt;code&gt;syzkaller&lt;/code&gt;的使用方式。&lt;/p&gt;
&lt;p&gt;Windows平台也常被通过构建GUI API调用模板来Fuzzing系统内核，macOS平台内核Fuzzing就常拿IOKit函数开刀，都是基于这种系统函数调用模板的Fuzzing方式实现的。&lt;/p&gt;
&lt;p&gt;2016年Google提出”结构感知型Fuzzing”(&lt;a href=&quot;https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Structure-Aware Fuzzing &lt;/a&gt;)，并基于&lt;code&gt;libfuzzer&lt;/code&gt;与&lt;code&gt;protobuf&lt;/code&gt;实现了&lt;code&gt;libprotobuf-mutator&lt;/code&gt;(&lt;em&gt;&lt;a href=&quot;https://github.com/google/libprotobuf-mutator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/libprotobuf-mutator&lt;/a&gt;&lt;/em&gt;)，其实现思路与&lt;code&gt;syskaller&lt;/code&gt;相似，它弥补了&lt;code&gt;peach&lt;/code&gt;的无覆盖引导的问题，也弥补了&lt;code&gt;afl&lt;/code&gt;和&lt;code&gt;libfuzzer&lt;/code&gt;对于复杂输入类型的低效变异问题。正如前面提到的，也有人将&lt;code&gt;afl&lt;/code&gt;与&lt;code&gt;peach&lt;/code&gt;整合成&lt;code&gt;aflsmart&lt;/code&gt;，以此实现类似功能。现在Project Zero也用&lt;code&gt;libprotobuf-mutator&lt;/code&gt;来fuzzing iOS内核，详见&lt;em&gt;“SockPuppet: A Walkthrough of a Kernel Exploit for iOS 12.4”&lt;/em&gt;(&lt;em&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2019/12/sockpuppet-walkthrough-of-kernel.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://googleprojectzero.blogspot.com/2019/12/sockpuppet-walkthrough-of-kernel.html&lt;/a&gt;&lt;/em&gt;)。&lt;/p&gt;
&lt;p&gt;结构感知型Fuzzing并不是什么新技术，跟Peach的实现思路是一样的，只是对输入数据类型作模板定义，以提高变异的准确率。只是当前大家更倾向于将结构感知与覆盖引导等多种技术优势整合一块，基于系统函数模板用于Fuzzing系统内核，相信这种方式未来仍会被经常使用。&lt;/p&gt;
&lt;h3 id=&quot;助力开源生态安全建设&quot;&gt;&lt;a href=&quot;#助力开源生态安全建设&quot; class=&quot;headerlink&quot; title=&quot;助力开源生态安全建设&quot;&gt;&lt;/a&gt;助力开源生态安全建设&lt;/h3&gt;&lt;p&gt;在工业界中，最知名的Fuzzing平台当属Google的&lt;code&gt;clusterfuzz&lt;/code&gt;（ &lt;em&gt;&lt;a href=&quot;https://github.com/google/clusterfuzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/clusterfuzz&lt;/a&gt;&lt;/em&gt; ），运行在25000+台机器上，发现过16000+个Chrome bug，11000+开源项目bug，这个平台整合了&lt;code&gt;OSS-Fuzz&lt;/code&gt;(&lt;em&gt;&lt;a href=&quot;https://github.com/google/oss-fuzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/oss-fuzz&lt;/a&gt;&lt;/em&gt; )，既支持libfuzzer和AFL的代码覆盖引导Fuzzing，也支持黑盒Fuzzing。&lt;code&gt;OSS-Fuzz&lt;/code&gt;和&lt;code&gt;clusterfuzz&lt;/code&gt;分别在2016年和2019年开源对外，业界同行可以协同开发，对于提交fuzzer后挖到新漏洞的，Google会美刀奖励提交者，对于主流开源项目的&lt;code&gt;0Day&lt;/code&gt;，Google也是有奖励机制的。同时，Google开发了&lt;code&gt;ASan&lt;/code&gt;、&lt;code&gt;MSan&lt;/code&gt;、&lt;code&gt;TSan&lt;/code&gt;、&lt;code&gt;UBSan&lt;/code&gt;、&lt;code&gt;LSan&lt;/code&gt;等多种编译时插桩工具用来帮助检测漏洞，有些漏洞只在开启相关Sanitizer之后才会触发异常，跟在Windows下开启页堆的方式类似，可以帮助更有效地发现崩溃场景，在发现和分析漏洞上提供帮助。&lt;/p&gt;
&lt;p&gt;Google对开源生态安全建设的贡献，是各大互联网公司不能比的。他们的贡献不仅帮助提高各大主流开源项目的安全性，也降低了Fuzzing的技术成本，在资金和技术上对开源生态安全的建设提供了大力支持。&lt;/p&gt;
&lt;h3 id=&quot;语法树变异成为语法解析引擎漏洞挖掘的新方向&quot;&gt;&lt;a href=&quot;#语法树变异成为语法解析引擎漏洞挖掘的新方向&quot; class=&quot;headerlink&quot; title=&quot;语法树变异成为语法解析引擎漏洞挖掘的新方向&quot;&gt;&lt;/a&gt;语法树变异成为语法解析引擎漏洞挖掘的新方向&lt;/h3&gt;&lt;p&gt;2012年，USENIX安全顶会上发布一篇论文&lt;em&gt;“Fuzzing with code fragments”&lt;/em&gt;，研究者开发了一款叫&lt;code&gt;LangFuzz&lt;/code&gt;的工具，他们从firefox、webkit、chromium等开源的浏览器项目以及网络上去收集js测试样本，然后用ANTLR其进行AST语法树分析，再将样本拆分成非终止语法的代码片断，放入代码池中，最后再基于代码池的代码片断对输入样本作交叉变异，主要取同类型的代码片断作替换或插入，再运行生成的变异样本进行测试。&lt;/p&gt;
&lt;p&gt;基于&lt;code&gt;LangFuzz&lt;/code&gt;的思路，后面又有人开源了&lt;code&gt;IFuzzer&lt;/code&gt;，并发表相关论文公开，在&lt;code&gt;LangFuzz&lt;/code&gt;的基础上增加遗传算法，对输入样本进行评估，筛选出优秀的个体进行组装以产生新样本。不过这个工具并没有那么完善，也未见到比较好的实际漏洞产出。&lt;/p&gt;
&lt;p&gt;2018年，Project Zero的Samuel Groß发布一款叫&lt;code&gt;fuzzilli&lt;/code&gt;的JS语法Fuzzer工具，它整合了语法变异、模板生成、覆盖引导等多种技术，使用自定义中间语言用于语法变异，再将变异后的中间语言转换成JS代码。&lt;code&gt;fuzzilli&lt;/code&gt;在3大主流JS引擎的测试中，战果颇丰，发现了不少漏洞，也因此被业界同行拿去作二次开发，又发现了其它新的漏洞。&lt;/p&gt;
&lt;p&gt;2019年，有2篇学术论文发布，他们都引用了论文&lt;em&gt;“Fuzzing with code fragments”&lt;/em&gt;中的思想，它们分别是”&lt;em&gt;CodeAlchemist: Semantics-Aware Code Generation to Find Vulnerabilities in JavaScript Engines&lt;/em&gt;“和”&lt;em&gt;Superion: Grammar-Aware Greybox Fuzzing&lt;/em&gt;“，&lt;code&gt;CodeAlchemist&lt;/code&gt;将输入样本进行语法树分析和数据流分析，为拆分出来的代码片段设置前置和后置的约束条件，前置条件代表一些引用的变量需要先定义，后置条件代表代码片段的输出结果，通过两者来解决一些未定义变量引用的问题。&lt;code&gt;Superion&lt;/code&gt;是将语法树变异规则置入AFL中实现的，借助AFL筛选变异后的输入样本，而且支持多种语言，也是采用ANTLR作语法树分析，其在语法扩展上比较友好。两款工具均在最新JS解析引擎上发现过若干0day漏洞，并且均已在Github上开源。&lt;/p&gt;
&lt;p&gt;除了传统的模板Fuzzing，语法变异(无论是AST，还是自定义中间语言)也是一项值得探索的方向。&lt;/p&gt;
&lt;h3 id=&quot;人工智能在Fuzzing中的应用仍亟待探索&quot;&gt;&lt;a href=&quot;#人工智能在Fuzzing中的应用仍亟待探索&quot; class=&quot;headerlink&quot; title=&quot;人工智能在Fuzzing中的应用仍亟待探索&quot;&gt;&lt;/a&gt;人工智能在Fuzzing中的应用仍亟待探索&lt;/h3&gt;&lt;p&gt;2018年是人工智能元年，很多领域都在探索AI的应用，漏洞挖掘领域亦然。之前笔者阅读过一些AI应用在Fuzzing中的相关议题，主要集中在测试样本生成的训练上，利用已知漏洞的样本或正常样本作训练，然后重新生成测试样本进行测试。可惜从效果上来看，是一种高投入低产出的事情，有些还不如直接暴力变异来得高效高产。但这也不是说，AI没有价值，只是它在这方面的发展时间较短，很多东西仍亟待探索，还有待时间的年轮来证明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;源起&quot;&gt;&lt;a href=&quot;#源起&quot; class=&quot;headerlink&quot; title=&quot;源起&quot;&gt;&lt;/a&gt;源起&lt;/h3&gt;&lt;p&gt;1988年，在威斯康星大学Barton Miller教授的计算机实验课上（&lt;em&gt;&lt;a href=&quot;http://pages.cs.wisc
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Fuzzing" scheme="http://riusksk.github.io/tags/Fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzing平台建设的研究与设计(paper)</title>
    <link href="http://riusksk.github.io/2020/01/21/Fuzzing%E5%B9%B3%E5%8F%B0%E5%BB%BA%E8%AE%BE%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1-paper/"/>
    <id>http://riusksk.github.io/2020/01/21/Fuzzing平台建设的研究与设计-paper/</id>
    <published>2020-01-21T02:19:37.000Z</published>
    <updated>2020-01-21T02:31:16.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;近年来，无论是工业界，还是学术界，Fuzzing技术的应用都非常广泛。每年的BlackHat、OffensiveCon、CCC等工业界顶会，以及学术界四大顶会（ S&amp;amp;P、CCS、Security、NDSS ），经常可以见到Fuzzing相关议题。Google Project Zero也公布其近5年的漏洞挖掘方式占比，其中Fuzzing占比37.2%，手工占比54.2%，其它占比8.6%，这对于高产的P0来说，37.2%的占比已经意味着不少漏洞了。按Project Zero官方公布的bug列表来看，当前共有1975个漏洞公开（包括一些无效、未修复的，这里仅作粗略估算），按37.2%来算，大约有735个漏洞是通过Fuzzing挖掘到的，着实不少的数量，况且大多是高质量漏洞。所以说，Fuzzing依然是当前安全界所热衷的漏洞挖掘方式。&lt;/p&gt;
&lt;p&gt;本文主要探讨下企业内部关于Fuzzing平台建设的一些想法，个人主要是想表达一个观点：&lt;strong&gt;协同Fuzzing&lt;/strong&gt;，即整合企业内部各工种（开发、测试、安全、运维等等）的力量，将Fuzzing合入CI构建中，通过DevSecOps协同模式来完成产品的Fuzzing工作，以便将漏洞消除在上线前阶段。&lt;/p&gt;
&lt;h3 id=&quot;Fuzzing平台的价值思考&quot;&gt;&lt;a href=&quot;#Fuzzing平台的价值思考&quot; class=&quot;headerlink&quot; title=&quot;Fuzzing平台的价值思考&quot;&gt;&lt;/a&gt;Fuzzing平台的价值思考&lt;/h3&gt;&lt;p&gt;虽说Project Zero超过一半是人工审计发现的，但对于企业内部，项目之多，代码语言和代码行也是非常之多，很难单纯靠人工来解决的。量级的变化，自然会导致自动化需求的诞生，才能更加高效地发现、消除和监管企业内部的代码风险。&lt;/p&gt;
&lt;p&gt;产品从开发到发布，涉及到多工种协作，如果能让他们一块参与到安全工作当中，那么有时也可以弥补安全人力的不足，同时让非安全出身的业余选手也能干专业的事，帮助安全人员覆盖更多的攻击面测试，提升漏洞发现率。&lt;/p&gt;
&lt;p&gt;安全人员参与到产品的整个研发流程当中，可以将发现漏洞的时间线提前，有助于在产品上线前发现并解决安全风险，提高产品安全性。&lt;/p&gt;
&lt;h3 id=&quot;协同Fuzzing平台的设计思路&quot;&gt;&lt;a href=&quot;#协同Fuzzing平台的设计思路&quot; class=&quot;headerlink&quot; title=&quot;协同Fuzzing平台的设计思路&quot;&gt;&lt;/a&gt;协同Fuzzing平台的设计思路&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/1578971205508.png&quot; alt=&quot;1578971205508&quot;&gt;&lt;/p&gt;
&lt;p&gt;以往我们在帮业务产品作安全测试时，开始前业务同事会提供文档资料或者开会分享产品功能设计的方方面面，以及担心的安全风险问题，安全同事需要花时间消化，前期双方都需要消耗不少时间成本，况且在有限的时间内，对产品的攻击面剖析也不一定足够到位。&lt;/p&gt;
&lt;p&gt;假设当前需要对产品进行Fuzzing测试，一般需要一个支持命令行的测试程序，通常称为harness。开发或者测试的同学可能本身就会开发有相应的测试程序，如果没有，安全测试人员就得自己开发，有API或者源码都好办，没有的话，可能还得做Hook。&lt;/p&gt;
&lt;p&gt;对产品最了解的，一般当属开发同学。所以，如果开发者在开发完相应功能后，开发以及质量测试人员若能够编写相应的接口测试程序，将对于安全测试会有很大帮助。一方面是工作效率的提升，另一方面是测试面的覆盖广度提升。&lt;/p&gt;
&lt;p&gt;如此之后，我们可以设计出协同Fuzzing平台的工作流水线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;开发阶段&lt;/strong&gt;：开发人员编写相应的harness程序，尽可能覆盖用于解析外部数据的处理函数。直接开发或者使用libfuzzer等安全测试库进行开发均可，安全人员也可定期对其进行安全培训，指导libfuzzer等工具的使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建阶段&lt;/strong&gt;：对于源码编译场景，支持多种构建触发方式，最佳的方式还是基于git事件触发，即提交代码后触发，然后将源码下载到指定的构建机编译，开发者需要配置编译命令，此处也可以开启ASAN或者AFL编译等功能；对于非编译场景，则直接提供相应的可执行程序下载地址，将其归档打包至用于Fuzzing的服务器上。目前，“腾讯CI”已将构建功能嵌入到自家git平台“工蜂”上，提供覆盖所有主流编译工具和语言，因此未来其在安全领域上的应用还有发挥的空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试阶段&lt;/strong&gt;：配置相应的测试命令，即harness程序的参数，以及运行环境，包括Windows、Linux、macOS，如果硬件资源丰富的话，Android和iOS又何尝不可。提交在服务器上布署好常见Fuzzer工具（afl/libfuzzer/honggfuzz等等），或者自主开发的其它Fuzzer，同时部署一些常见文件格式的样本库。对于特殊数据格式，比如自定义协议/文件格式，最好由开发或测试同学提供，否则只能安全测试人员去解决，一些提取样本数据的方法后面会介绍。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;告警阶段&lt;/strong&gt;：若发现崩溃，则作二次运行确认，确认二次崩溃则告警出来，可邮件、工单、微信等多种方式，将运行命令参数、崩溃场景的栈回溯、可利用性分析等基本信息同步出来。对于崩溃容忍度较低的产品，可设置“质量红线”，去重后的崩溃数量超过多少个禁止发布。开发修复漏洞后，继续从第一步的开发阶段开始继续循环下去，直至无新漏洞发现。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Fuzzing三要素&quot;&gt;&lt;a href=&quot;#Fuzzing三要素&quot; class=&quot;headerlink&quot; title=&quot;Fuzzing三要素&quot;&gt;&lt;/a&gt;Fuzzing三要素&lt;/h3&gt;&lt;p&gt;Github上已有很多知名Fuzzer被开源，圈内也有不少人借此挖到漏洞，直接基于现成工具，或者二次开发挖到的都有，也有人借鉴思路自主开发新的工具。对于一款新漏洞挖掘工具的发布，多数人可能会认为，开源作者应该是已经挖完漏洞了才公布的，应该已经挖不到0day了。但有时，你又会发现，老树开新花的事情还是很常见的。那么决定Fuzzer能否挖到漏洞的关键因素有哪些？根据个人经验，笔者觉得主要有三要素：&lt;strong&gt;目标、策略、样本&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;目标：攻击面分析&quot;&gt;&lt;a href=&quot;#目标：攻击面分析&quot; class=&quot;headerlink&quot; title=&quot;目标：攻击面分析&quot;&gt;&lt;/a&gt;目标：攻击面分析&lt;/h4&gt;&lt;p&gt;对于企业内部产品的测试，直接找开发要设计文档，甚至源码，都可以帮我们快速分析出攻击面。面对黑盒测试时，尤其是主流软件/系统的Fuzzing测试时，能够让我们参考的主要还是其官方文档，比如MSDN、Apple开发文档、Acrobat Javascript API手册等等。当初winafl诞生时，从MSDN找API去Fuzzing的方式屡试不爽，运气好的，一个API拿10个CVE也不是没干过；Apple开发文档中的系统的各个模块介绍，github上的示例代码等等，无不成为寻找攻击面的最佳途径；还有Acrobat 一个JS API产生好几个漏洞的情况，也有人直接写脚本分析API手册，提取API模板作Fuzzing；其它系统平台上写爬虫提取系统函数原型模板，作驱动Fuzzing。&lt;/p&gt;
&lt;p&gt;这些从官方手册，以及官方放置在Github的示例代码，无不成为最佳的目标攻击面分析途径。如果你搞过上面这些，应该明白我在说什么。&lt;/p&gt;
&lt;p&gt;除了文档，一些业界公开的漏洞信息，比如Project Zero、ZDI、厂商的补丁公告等等都是挖洞方向标。在以上信息都缺失的情况，就只能人工逆向分析来寻找攻击面了。&lt;/p&gt;
&lt;p&gt;比如2019年微软的一次补丁公告中，出现了很多Jet数据库引擎的远程代码执行漏洞：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/1578992349658.png&quot; alt=&quot;1578992349658&quot;&gt;&lt;/p&gt;
&lt;p&gt;于是从MSDN入手去寻找可能存在的攻击面，然后用手上的Fuzzer框架进行Fuzzing，几小时之后直接挖到一个品相极佳的漏洞，因为生成的poc直接控制了EIP：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/1578992386112.png&quot; alt=&quot;1578992386112&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;策略：变异之法&quot;&gt;&lt;a href=&quot;#策略：变异之法&quot; class=&quot;headerlink&quot; title=&quot;策略：变异之法&quot;&gt;&lt;/a&gt;策略：变异之法&lt;/h4&gt;&lt;p&gt;常见的变异策略主要有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基于暴力&lt;/strong&gt;：随机数据替换、插入、删除、数值增减、边界值替换、拷贝覆盖等等，比如radamsa等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于模板&lt;/strong&gt;：文件格式、协议格式、API原型模板、语法模板变异等等，比如peach、domato等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于代码覆盖引导&lt;/strong&gt;：通过提高代码路径的反馈方式来优化样本，比如AFL、Libfuzzer等等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于语法树变异&lt;/strong&gt;：通过AST语法树变异来Fuzzing语法解析引擎，比如Fuzzilli，该工具本身也实现基于模板和代码覆盖引导的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了以上常规的变异方法之外，有时需要针对当前的应急漏洞作新变异规则，或者适配特定的业务场景作定制化，这就要求我们的Fuzzer平台具备可扩展的变异策略插件开发，这种方式不仅可以社区化方式协同，企业内部也可以协同开发，类似oss-fuzz。&lt;/p&gt;
&lt;p&gt;举个案例，2018年word公式编辑器开始流行起来，还被在野利用过。当时笔者就用python开发个针对OLE中“Equation Native” 的变异器，然后用riufuzz跑起来（riufuzz是笔者基于honggfuzz二次开发的fuzzer，2018及之前的新功能已在github上开源，之后开发就未开源了，大家可以自行发挥）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/1578992857498.png&quot; alt=&quot;1578992857498&quot;&gt;&lt;/p&gt;
&lt;p&gt;有时在变异前、变异后可能有特列的处理机制需要处理，比如pdf js fuzz，输入pdf可能得提取js再作变异，这是变异前处理；再比如png图片变异，变异后会导致crc校验失效，需要作变异后修复。还有对于复合文档中的某特定格式的文件变异后，需要重组打包，比如变异docx中的图片、pdf中的字体图片等等，此过程注意后缀名的变更问题。&lt;/p&gt;
&lt;h4 id=&quot;样本的收集与筛选&quot;&gt;&lt;a href=&quot;#样本的收集与筛选&quot; class=&quot;headerlink&quot; title=&quot;样本的收集与筛选&quot;&gt;&lt;/a&gt;样本的收集与筛选&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/1578993191152.png&quot; alt=&quot;1578993191152&quot;&gt;&lt;/p&gt;
&lt;p&gt;以前笔者都是手工去网上找样本去下载那种包含很多文件的压缩包，但这种方式太费劲了，用过想再更新又得再去找。后来就干脆用scrapy写个爬虫去搜索引擎搜索，像pdf、office文档、图片几乎都是爬不尽的，但它支持的文件格式比较有限。因此，我就改去Github爬虫，很多开发者在开发时，也需要一些测试样本来验证，因此项目内经常包含有各种文件格式的样本，但它的搜索结果只有100页，需要变换关键词（字典库、单词库、输入法词库等等）来搜索，但整体搜索到的数量还是没有Google等搜索引擎多，可以当作互补方案。&lt;/p&gt;
&lt;p&gt;若是遇到如openssl这种特殊协议数据，以及其它非完整文件格式的自定义格式，一般就得通过源码加Log，或者Hook技术去dump出二进制流样本数据，以此作为输入样本。&lt;/p&gt;
&lt;p&gt;当我们获取的样本过多时，就需要作筛选，以避免过多的无用测试。对于开源项目，用AFL的工具足矣，但闭源程序就需要自己实现，以下就是笔者基于pin开发的语料库蒸馏器，用C++和Python开发的，支持跨平台：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/1578993681237.png&quot; alt=&quot;1578993681237&quot;&gt;&lt;/p&gt;
&lt;p&gt;以macOS上的pdf样本筛选为例，整体效果还不错：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;总体大小：16.17G =&amp;gt; 563.8M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;文件数量：10074 =&amp;gt; 1105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;运行时间：3 天22 小时&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/1578993924461.png&quot; alt=&quot;1578993924461&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于上述方法论，笔者在近3年内，共获取国际四大厂商（Apple、Microsoft、Google、Adobe）70余次CVE漏洞致谢，其它一些厂商产品的漏洞暂且不计。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;本文主要介绍了协同Fuzzing的设计思路，将Fuzzing置入CI构建中的方法，并分享了决定Fuzzing效果的关键三要素：目标、策略、样本，对这些要素一一分析，并附相应的实战案例。未来，我们也会尝试多去实践和推广这种多工种协同Fuzzing的工作方式，并建设更加完善的平台管理控制系统，方便实现多人协同工作。&lt;/p&gt;
&lt;p&gt;基于笔者水平有限，这套设计方案有些在企业内部实施的话，难免会有不足之处，欢迎业界同行斧正。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;近年来，无论是工业界，还是学术界，Fuzzing技术的应用都非常广泛。每年的BlackHat、OffensiveCon、CCC等工业界顶会，
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Fuzzing" scheme="http://riusksk.github.io/tags/Fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>Frida框架在Fuzzing中的应用</title>
    <link href="http://riusksk.github.io/2019/11/30/Frida%E6%A1%86%E6%9E%B6%E5%9C%A8Fuzzing%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://riusksk.github.io/2019/11/30/Frida框架在Fuzzing中的应用/</id>
    <published>2019-11-30T02:06:03.000Z</published>
    <updated>2020-01-21T02:32:58.000Z</updated>
    
    <content type="html">&lt;p&gt;由于&lt;code&gt;Frida&lt;/code&gt;（&lt;a href=&quot;https://frida.re&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://frida.re&lt;/a&gt; ）动态插桩框架的跨平台、简单易用，现在已经被广泛应用于安全领域。相比&lt;code&gt;Xposed&lt;/code&gt;而言，虽不能更底层地去Hook系统进程，但它可以免启动，应对App的hook完全够用，更关键的是，它完全可以用JavaScript来写代码，免去编译的烦恼，调试也方便。&lt;/p&gt;
&lt;p&gt;之前在工作中，也就用&lt;code&gt;Frida&lt;/code&gt;去Hook Android与iOS应用来做安全测试，效果挺好的，开发起来也挺高效的。本文主要围绕Fuzzing领域，来分析和记录最近一些使用&lt;code&gt;Frida&lt;/code&gt;的Fuzzer。&lt;/p&gt;
&lt;h3 id=&quot;定制型Fuzzer&quot;&gt;&lt;a href=&quot;#定制型Fuzzer&quot; class=&quot;headerlink&quot; title=&quot;定制型Fuzzer&quot;&gt;&lt;/a&gt;定制型Fuzzer&lt;/h3&gt;&lt;p&gt;用&lt;code&gt;Frida&lt;/code&gt;来Fuzzing APP的方法，首先推荐Project Zero大神写的&lt;code&gt;Adventures in Video Conferencing&lt;/code&gt;系列博文，详细介绍了Hook WhatApps和iMessage的输入数据处理函数并进行Fuzzing的方法，同时也开源了Hook iMessage的工具：&lt;a href=&quot;https://github.com/googleprojectzero/iOS-messaging-tools/tree/master/iMessage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/iOS-messaging-tools/tree/master/iMessage&lt;/a&gt; ，提供dump和发送消息的功能，自己在额外构造变异数据去Fuzzing。&lt;/p&gt;
&lt;p&gt;这种方式特别适用于拥有私有的定制协议或数据格式的APP Fuzzing，只是需要花时间去逆向分析程序的输入数据解析流程，找到关键的处理函数。&lt;/p&gt;
&lt;h3 id=&quot;通用型Fuzzer&quot;&gt;&lt;a href=&quot;#通用型Fuzzer&quot; class=&quot;headerlink&quot; title=&quot;通用型Fuzzer&quot;&gt;&lt;/a&gt;通用型Fuzzer&lt;/h3&gt;&lt;p&gt;最近又看到两款使用&lt;code&gt;Frida&lt;/code&gt;的Fuzzer，出自同一人之手，用&lt;code&gt;Python&lt;/code&gt;和&lt;code&gt;JS&lt;/code&gt;写的，代码量不多：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;frida-js-afl-instr（&lt;a href=&quot;https://github.com/andreafioraldi/frida-js-afl-instr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/andreafioraldi/frida-js-afl-instr&lt;/a&gt; ）：打通&lt;code&gt;AFL++&lt;/code&gt;与&lt;code&gt;Frida&lt;/code&gt;实现内存Fuzzing的工具，仅限Linux平台&lt;/li&gt;
&lt;li&gt;frida-qbdi-fuzzer（&lt;a href=&quot;https://github.com/andreafioraldi/frida-qbdi-fuzzer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/andreafioraldi/frida-qbdi-fuzzer&lt;/a&gt; ）：基于&lt;code&gt;Frida&lt;/code&gt;与&lt;code&gt;QBDI&lt;/code&gt;的Android Fuzzer，借鉴AFL的代码覆盖引导思路，实现Android平台下闭源程序的覆盖引导Fuzzing。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面直接画时序图来看它的原理，就不贴源码分析了：&lt;/p&gt;
&lt;h4 id=&quot;frida-js-afl-instr原理图&quot;&gt;&lt;a href=&quot;#frida-js-afl-instr原理图&quot; class=&quot;headerlink&quot; title=&quot;frida-js-afl-instr原理图&quot;&gt;&lt;/a&gt;frida-js-afl-instr原理图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20191130121915743.png&quot; alt=&quot;image-20191130121915743&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;frida-qbdi-fuzzer原理图&quot;&gt;&lt;a href=&quot;#frida-qbdi-fuzzer原理图&quot; class=&quot;headerlink&quot; title=&quot;frida-qbdi-fuzzer原理图&quot;&gt;&lt;/a&gt;frida-qbdi-fuzzer原理图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20191130122032208.png&quot; alt=&quot;image-20191130122032208&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;用Frida来实现闭源程序的代码覆盖引导，代码量很少，以Python和JS就可以快速开发起来，但涉及到python等进程的启动，肯定没有纯C/C++的代码运行速度快，但对于Fuzzing，一般还是够用的，还是值得学习和使用的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于&lt;code&gt;Frida&lt;/code&gt;（&lt;a href=&quot;https://frida.re&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://frida.re&lt;/a&gt; ）动态插桩框架的跨平台、简单易用，现在已经被广泛应用于安全领域。相比&lt;co
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Fuzzing" scheme="http://riusksk.github.io/tags/Fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>Fuzzing平台建设的研究与设计</title>
    <link href="http://riusksk.github.io/2019/11/18/Fuzzing%E5%B9%B3%E5%8F%B0%E5%BB%BA%E8%AE%BE%E7%9A%84%E7%A0%94%E7%A9%B6%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    <id>http://riusksk.github.io/2019/11/18/Fuzzing平台建设的研究与设计/</id>
    <published>2019-11-18T10:01:55.000Z</published>
    <updated>2020-01-21T02:31:10.000Z</updated>
    
    <content type="html">

	&lt;div class=&quot;row&quot;&gt;
	  &lt;iframe src=&quot;http://nagland.github.io/viewer/web/viewer.html?val=http://riusksk.me/media/Fuzzing.pdf&quot; style=&quot;width:100%; height:550px&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;



</content>
    
    <summary type="html">
    
      

	&lt;div class=&quot;row&quot;&gt;
	  &lt;iframe src=&quot;http://nagland.github.io/viewer/web/viewer.html?val=http://riusksk.me/media/Fuzzing.pdf&quot; style=&quot;width:1
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Fuzzing" scheme="http://riusksk.github.io/tags/Fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>Android应用逻辑漏洞半自动化挖掘思路</title>
    <link href="http://riusksk.github.io/2019/11/02/Jandroid%EF%BC%9A%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96Android%E5%BA%94%E7%94%A8%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    <id>http://riusksk.github.io/2019/11/02/Jandroid：半自动化Android应用逻辑漏洞挖掘/</id>
    <published>2019-11-02T01:22:25.000Z</published>
    <updated>2019-11-02T03:25:16.000Z</updated>
    
    <content type="html">&lt;p&gt;大清早起来就看到F-Secure LABS团队（以前叫MWR，就是那支用13个逻辑漏洞攻击chrome的团队，是pwn2own专业户）发了一篇文章“Automating Pwn2Own with Jandroid” (&lt;a href=&quot;https://labs.f-secure.com/blog/automating-pwn2own-with-jandroid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://labs.f-secure.com/blog/automating-pwn2own-with-jandroid/&lt;/a&gt; )，讲述如何利用Jandroid实现Android应用逻辑漏洞的半自动化挖掘思路。&lt;/p&gt;
&lt;p&gt;专注逻辑漏洞有一些好处，尤其是打比赛用途的，撞洞率较低，且利用稳定，一般都不用搞什么内存布局控制的，MWR尤其擅长此类漏洞的挖掘，之前就在pwn2own上攻击破过华为手机和chrome浏览器。&lt;/p&gt;
&lt;p&gt;文中介绍了Jandroid (&lt;a href=&quot;https://github.com/FSecureLABS/Jandroid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/FSecureLABS/Jandroid&lt;/a&gt; )这款开源工具，要求python 3.4以上版本运行，支持&lt;code&gt;apk&lt;/code&gt;/&lt;code&gt;dex&lt;/code&gt;/&lt;code&gt;system.img&lt;/code&gt;/&lt;code&gt;ext4&lt;/code&gt;文件解析。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python3 src/jandroid.py -h                                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           JANDROID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;usage: jandroid.py [-h] [-f FOLDER] [-p [&amp;#123;android&amp;#125;]] [-e [&amp;#123;device,ext4,img&amp;#125;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   [-g [&amp;#123;neo4j,visjs,both&amp;#125;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A tool for performing pattern matching against applications.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;optional arguments:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -h, --help            show this help message and exit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -f FOLDER, --folder FOLDER&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        app分析目录，所以支持应用的批量分析&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -p [&amp;#123;android&amp;#125;], --platform [&amp;#123;android&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        支持的平台，目前仅支持android平台&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -e [&amp;#123;device,ext4,img&amp;#125;], --extract [&amp;#123;device,ext4,img&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        支持从连接设备、ext4、system.img中提取应用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -g [&amp;#123;neo4j,visjs,both&amp;#125;], --graph [&amp;#123;neo4j,visjs,both&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        支持检测结果的图表显示&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它通过定义json模板来标记污点传播路径，比如拥有&lt;code&gt;android.intent.category.BROWSABLE&lt;/code&gt;浏览器打开权限的Activity，再查找&lt;code&gt;Landroid/webkit/WebView;-&amp;gt;addJavascriptInterface&lt;/code&gt;看是否存在JavaScript接口，以判断是否可能存在远程攻击的条件，但这种只能是半自动化辅助，还需要人工逆向确认。&lt;/p&gt;
&lt;p&gt;模板示例：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;METADATA&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;NAME&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;JSbridgeBrowsable&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;MANIFESTPARAMS&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;BASEPATH&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;manifest-&amp;gt;application-&amp;gt;activity OR manifest-&amp;gt;application-&amp;gt;activity-alias&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;SEARCHPATH&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;intent-filter&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;&quot;action&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;attr&quot;&gt;&quot;LOOKFOR&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;attr&quot;&gt;&quot;TAGVALUEMATCH&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;NAMESPACE&amp;gt;:name=android.intent.action.VIEW&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;&quot;category&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;attr&quot;&gt;&quot;LOOKFOR&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;attr&quot;&gt;&quot;TAGVALUEMATCH&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;NAMESPACE&amp;gt;:name=android.intent.category.BROWSABLE&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;&quot;data&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;attr&quot;&gt;&quot;RETURN&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;NAMESPACE&amp;gt;:host AS @host&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;NAMESPACE&amp;gt;:scheme AS @scheme&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;RETURN&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;smali&amp;gt;:&amp;lt;NAMESPACE&amp;gt;:name AS @activity_name&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;CODEPARAMS&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;SEARCH&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;SEARCHFORCALLTOMETHOD&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;&quot;METHOD&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Landroid/webkit/WebView;-&amp;gt;addJavascriptInterface&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;attr&quot;&gt;&quot;RETURN&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;class&amp;gt; AS @web_view&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;TRACE&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;TRACEFROM&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;method&amp;gt;:@web_view[]-&amp;gt;loadUrl(Ljava/lang/String;)V&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;TRACETO&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;class&amp;gt;:@activity_name&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;TRACELENGTHMAX&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;RETURN&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;tracepath&amp;gt; AS @tracepath_browsablejsbridge&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;GRAPH&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;@tracepath_browsablejsbridge WITH &amp;lt;method&amp;gt;:&amp;lt;desc&amp;gt;:&amp;lt;class&amp;gt; AS attribute=nodename&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;各字段含义看示例就好了，这里不作详解。读者也可参考F-Secure发的文章，里面有详解。&lt;/p&gt;
&lt;p&gt;总结起来，模板支持：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AndroidManifest.xml的匹配搜索&lt;/li&gt;
&lt;li&gt;smali代码的匹配搜索&lt;/li&gt;
&lt;li&gt;传播路径的图表显示，以及显示的文件格式定义&lt;/li&gt;
&lt;li&gt;函数调用参数追踪&lt;/li&gt;
&lt;li&gt;函数调用的起点与终点定义、追踪以及追踪深度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我直接找个apk分析运行，会出错提示以下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &amp;quot;src/jandroid.py&amp;quot;, line 408, in &amp;lt;module&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    inst_jandroid.fn_main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &amp;quot;src/jandroid.py&amp;quot;, line 227, in fn_main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.pull_source&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &amp;quot;/Volumes/Macintosh/Users/riusksk/Android-Security/工具/Jandroid/src/plugins/android/main.py&amp;quot;, line 51, in fn_start_plugin_analysis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app_pull_src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  File &amp;quot;/Volumes/Macintosh/Users/riusksk/Android-Security/工具/Jandroid/src/plugins/android/requirements_checker.py&amp;quot;, line 53, in fn_perform_initial_checks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise JandroidException(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NameError: name &amp;apos;JandroidException&amp;apos; is not defined&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直接在&lt;code&gt;Jandroid/src/plugins/android/requirements_checker.py&lt;/code&gt;开头加以下代码即可解决：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; common &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; JandroidException&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行效果：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python3 src/jandroid.py -f ./apps -g visjs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           JANDROID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Creating template object.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     1 potential template(s) found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Parsing /Volumes/Macintosh/Users/riusksk/Android-Security/工具/Jandroid/templates/android/sample_basic_browsable_jsbridge.template&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Initiating Android analysis.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Performing basic checks. Please wait.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Basic checks complete.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Beginning analysis...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    1 app(s) to analyse, using 2 thread(s).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Created worker process 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Created worker process 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    AnalyzeAPK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Analysing without session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Analysing ctrip.android.view_8.13.0_1248.apk in worker thread 0.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    AXML contains a RESOURCE MAP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Start of Namespace mapping: prefix 47: &amp;apos;android&amp;apos; --&amp;gt; uri 48: &amp;apos;http://schemas.android.com/apk/res/android&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    START_TAG: manifest (line=2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    found an attribute: &amp;#123;http://schemas.android.com/apk/res/android&amp;#125;versionCode=&amp;apos;b&amp;apos;1248&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    found an attribute: &amp;#123;http://schemas.android.com/apk/res/android&amp;#125;versionName=&amp;apos;b&amp;apos;8.13.0&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    found an attribute: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Settings basic blocks childs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Creating exceptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Parsing instructions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Parsing exceptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Creating basic blocks in Landroid/support/constraint/solver/LinearSystem;-&amp;gt;createRowDimensionPercent(Landroid/support/constraint/solver/LinearSystem; Landroid/support/constraint/solver/SolverVariable; Landroid/support/constraint/solver/SolverVariable; Landroid/support/constraint/solver/SolverVariable; F Z)Landroid/support/constraint/solver/ArrayRow; [access_flags=public static] @ 0x199210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Looking for subclasses of Lctrip/business/map/SimpleOverseaMapActivity;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    ctrip.android.view_8.13.0_1248.apk took 349 seconds to analyse.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEBUG    Finished analysing ctrip.android.view_8.13.0_1248.apk with output &amp;#123;&amp;apos;bug_obj&amp;apos;: &amp;#123;&amp;apos;JSbridgeBrowsable&amp;apos;: False&amp;#125;, &amp;apos;graph_list&amp;apos;: []&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Finished analysing apps.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Creating custom graph.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     Custom graph can be found at /Volumes/Macintosh/Users/riusksk/Android-Security/工具/Jandroid/output/graph/jandroid.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INFO     All done.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果会在上面jandroid.html中显示，但由于我这里没有检测到满足JSbridgeBrowsable条件的代码，因此html里面的图是空的。如果有满足条件的代码，会得到类似如下的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/visjs3.png&quot; alt=&quot;visjs3&quot;&gt;&lt;/p&gt;
&lt;p&gt;Jandroid还提供有GUI操作界面，包括模板创建功能，所以使用也很方便，运行以下命令即可打开：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python3 gui/jandroid_gui.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20191102103606311.png&quot; alt=&quot;image-20191102103606311&quot;&gt;&lt;/p&gt;
&lt;p&gt;比如追踪DexClassLoader.loadClass加载外部dex文件的情况：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20191102104919972.png&quot; alt=&quot;image-20191102104919972&quot;&gt;&lt;/p&gt;
&lt;p&gt;再举个实例，下图是MWR当初分析三星时，一个Unzip目录穿越漏洞的函数传播路径图，漏洞被用于Mobile Pwn2Own 2017：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20191102104533888.png&quot; alt=&quot;image-20191102104533888&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以，Jandroid还是非常适合用来挖掘逻辑漏洞的辅助工具，核心思想依然是污点追踪的思路，操作简单，可视化效果也很好。基于模板的定制化，增加了其运用的灵活性，尤其对于复杂的业务逻辑设计，很适合作定制化地批量检测，但依然需要人工分析确认，并非完全自动化的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大清早起来就看到F-Secure LABS团队（以前叫MWR，就是那支用13个逻辑漏洞攻击chrome的团队，是pwn2own专业户）发了一篇文章“Automating Pwn2Own with Jandroid” (&lt;a href=&quot;https://labs.f-secu
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>漫谈网络安全应急要略</title>
    <link href="http://riusksk.github.io/2019/09/07/%E6%BC%AB%E8%B0%88%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E6%8C%87%E5%AF%BC%E6%80%9D%E6%83%B3/"/>
    <id>http://riusksk.github.io/2019/09/07/漫谈网络安全应急指导思想/</id>
    <published>2019-09-07T02:04:32.000Z</published>
    <updated>2019-09-07T12:53:33.000Z</updated>
    
    <content type="html">&lt;p&gt;【注】：本文仅代表个人观点，与公司立场无关。&lt;/p&gt;
&lt;p&gt;早上看到朋友圈有人说Metasploit公布BlueKeep远程执行漏洞的利用，一些安全群里也有人喊着加班了，但这漏洞明明很早就已经发布补丁了，现在才加班应急明显是有问题的。因此才有了本文，谈谈关于安全应急的一些个人想法。&lt;/p&gt;
&lt;h3 id=&quot;要略一：急则治其标，缓则治其本&quot;&gt;&lt;a href=&quot;#要略一：急则治其标，缓则治其本&quot; class=&quot;headerlink&quot; title=&quot;要略一：急则治其标，缓则治其本&quot;&gt;&lt;/a&gt;要略一：急则治其标，缓则治其本&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/Sep-07-2019 12-20-44.gif&quot; alt=&quot;Sep-07-2019 12-20-44&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在韩剧《幽灵》中，男主角在入侵犯罪者的电脑后，发现他正在上传受害者视频，在电脑里他看到一份名为申孝静的文件，里面全是照片，男主在照片里看到那个戴金表的男人，还没看清扫描出他的脸，幽灵就把网线拔掉了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如服务器因漏洞被入侵，是先修漏洞还是先上面韩剧那样拔网线呢？&lt;/p&gt;
&lt;p&gt;估计你想拔网线都拔不到，可以先关闭外网止损。虽然这里本因是漏洞导致的，如果入侵后还在线上补漏洞，估计等你补完，裤子都被脱光了。&lt;/p&gt;
&lt;p&gt;这里”标”是数据泄露，”本”是漏洞，紧急情况下，先治标，及时止损，防止数据泄露；缓解之后，再治本，修补漏洞，也包括安全系统监控与拦截机制被绕过的问题。&lt;/p&gt;
&lt;p&gt;如果今天还在应急BlueKeep漏洞，说明补丁日的时候没有及时打补丁，才导致今天的局面。&lt;/p&gt;
&lt;p&gt;毕竟，你总不能老是靠拔网线来解决问题吧！&lt;/p&gt;
&lt;h3 id=&quot;要略二：数据安全高于一切&quot;&gt;&lt;a href=&quot;#要略二：数据安全高于一切&quot; class=&quot;headerlink&quot; title=&quot;要略二：数据安全高于一切&quot;&gt;&lt;/a&gt;要略二：数据安全高于一切&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/Sep-07-2019 12-16-48.gif&quot; alt=&quot;Sep-07-2019 12-16-48&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;日剧《医龙》中，跟随男主的一位护士突发气胸，情况危急，如果叫救护车可能来不及，于是男主直接拿根笔管折断，插入患者的两侧胸腔放气，以降低胸腔压力。正常人的胸腔是负压，当气体进入后会压缩肺脏，导致呼吸困难，片中的场景应该是张力性气胸，即胸腔压力大于外部气压时，才插入胸腔放气。但是，如此风骚的非常规手段，未消毒，还产生新创伤的治疗手段，明显是不符合医疗操作流程的，但若不这样做，又可能没命。所以，危急情况下，总有一点最高优先级的标准，那就是：生命高于一切！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/Sep-07-2019 12-17-55.gif&quot; alt=&quot;Sep-07-2019 12-17-55&quot;&gt;&lt;/p&gt;
&lt;p&gt;在各公司里面，都有自己要求的产品发布流程，从需求、开发、测试、发布都有一系列的流程要走，这也是对产品质量的保证。但是，若被外部发现严重漏洞，想发布补丁也这样走一遍，中间还涉及各种审批，搞完都得好多天了，到时候，裤子又要被脱光了！那到底是遵守，还是不遵守。&lt;/p&gt;
&lt;p&gt;这就要求同样要有一条最高优先级的标准，那就是：数据安全高于一切！&lt;/p&gt;
&lt;p&gt;数据包括公司保密信息、用户数据等等不宜公开的数据，如果在危害数据安全的情况下，就不该过于拘泥于繁文缛节，应有相应的应急通道去完成快速发布安全补丁的途径。&lt;/p&gt;
&lt;h3 id=&quot;要略三：举一反三，触类旁通&quot;&gt;&lt;a href=&quot;#要略三：举一反三，触类旁通&quot; class=&quot;headerlink&quot; title=&quot;要略三：举一反三，触类旁通&quot;&gt;&lt;/a&gt;要略三：举一反三，触类旁通&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/timg.jpeg&quot; alt=&quot;timg&quot;&gt;&lt;/p&gt;
&lt;p&gt;每起安全应急事件背后，都有其导致事件的问题存在，很多时候它又代表着一类问题，而非单一案例作单一处理，最好能保证一个案例，引出一类问题并解决掉。&lt;/p&gt;
&lt;p&gt;比如由于SQL注入导致的拖库事件，并非止损修漏洞就完事了，其背后的扫描器为何漏扫，WAF为何被绕过，或者漏洞代码为何回滚（上个月苹果就因此导致iOS 12.4被拿旧洞越狱）。解决背后引发漏洞的各类问题，是不是就能够拿扫描器发现更多业务的同类漏洞，WAF是不是能够帮各多业务防御漏洞，代码发布流程的完善是否可以避免代码回滚导致的漏洞……&lt;/p&gt;
&lt;h3 id=&quot;要略四：广开言路，以德服人&quot;&gt;&lt;a href=&quot;#要略四：广开言路，以德服人&quot; class=&quot;headerlink&quot; title=&quot;要略四：广开言路，以德服人&quot;&gt;&lt;/a&gt;要略四：广开言路，以德服人&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/Sep-07-2019 17-33-27.gif&quot; alt=&quot;Sep-07-2019 17-33-27&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在电影《巴斯特·斯克鲁格斯的歌谣》中，巴斯特·斯克鲁格斯是个牛仔，穿戴着闪闪发光的马刺和崭新的白色马裤，喜欢唱歌，还有无人能敌的好枪法，他自诩是全西部决斗掏枪最快的枪手，还把这编成了歌谣，天天弹着吉他唱在口头，他以一种无敌的姿态一路杀一路唱一路跳。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/Sep-07-2019 17-32-53.gif&quot; alt=&quot;Sep-07-2019 17-32-53&quot;&gt;&lt;/p&gt;
&lt;p&gt;但最终他遇上了旗鼓相当的对手，被人以自己惯用规则和套路一枪爆头。&lt;/p&gt;
&lt;p&gt;这个故事告诉我们，装逼一时爽，过头火葬场。&lt;/p&gt;
&lt;p&gt;同样地，再牛逼的安全系统也可能被绕过，再安全的网站也可能被入侵，没有绝对安全的地方。&lt;/p&gt;
&lt;p&gt;现在流行建设SRC与众测，也是为了与自身安全团队的能力作互补，广开言路，博采众长，改善自身安全系统，解决自己未能发现的问题。&lt;/p&gt;
&lt;p&gt;为何提到以德服人，一方面是指善待白帽子，保持有效沟通，另一方面是指避免”文人相轻”的现象。谁都年轻过，搞技术的人有时多少有点傲气，报洞的BS收洞的，甚至报洞者之间互相BS。如果企业也带着相同的情绪，难免会导致与白帽子之间沟通矛盾，所以说善待白帽子，以德服人，哪怕白帽子少凌晨两三点搞事，也是好的。&lt;/p&gt;
&lt;p&gt;这些年，微软对漏洞的处理的态度变化最大，从最初放言绝不为漏洞买卖，散漫地漏洞处理态度，到现在及时响应，建立完善的漏洞奖励计划，奖金力度也在不断提高，同时每年在BlackHat上公布TOP 100最具价值的安全研究员名单，赋予帽子荣誉感。&lt;/p&gt;
&lt;p&gt;这些都代表着行业对漏洞，对白帽子的态度的一路转变历程。&lt;/p&gt;
&lt;h3 id=&quot;要略五：未雨绸缪，防范未然&quot;&gt;&lt;a href=&quot;#要略五：未雨绸缪，防范未然&quot; class=&quot;headerlink&quot; title=&quot;要略五：未雨绸缪，防范未然&quot;&gt;&lt;/a&gt;要略五：未雨绸缪，防范未然&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/timg2.jpeg&quot; alt=&quot;timg2&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在行业都在推广DevSecOps，是由Gartner 在2012年的一份报告中提出的概念。在这份报告中，Gartner提出信息安全专业人士需要更主动的融入DevOps的实践中，秉承DevOps的精神，拥抱团队协作、敏捷和职责共担的哲学。说得直白点就是，将安全融入到研发、运营等各个流程中，以实现安全自动化，连续响应和检测机制，帮助各团队之间协同合作。&lt;/p&gt;
&lt;p&gt;在应急事件中至少覆盖到：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;事前防范：包括漏洞扫描、代码审计、渗透测试、威胁情报、数据保护等等；&lt;/li&gt;
&lt;li&gt;事中拦截：包括WAF、EDR、RAPS、IDS、杀软等等；&lt;/li&gt;
&lt;li&gt;事后追溯：包括日志记录、取证系统等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;要略六：犯罪者，虽远必诛&quot;&gt;&lt;a href=&quot;#要略六：犯罪者，虽远必诛&quot; class=&quot;headerlink&quot; title=&quot;要略六：犯罪者，虽远必诛&quot;&gt;&lt;/a&gt;要略六：犯罪者，虽远必诛&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/QQ20190907-194700.png&quot; alt=&quot;QQ20190907-194700&quot;&gt;&lt;/p&gt;
&lt;p&gt;早作最坏的打算，因为白帽子也有”黑化”的可能。之前微软得罪过多少个白帽子了，就曾有白帽子在一气之下，每隔一段时间就爆0day出来。虽然其中微软也有责任，但白帽子这种行为总是不对的。&lt;/p&gt;
&lt;p&gt;特别鄙视那些借测试之名，行不轨不事的人，搞了破坏还要钱，这就是不厚道，耗人品的耻事。&lt;/p&gt;
&lt;p&gt;即使是现在的SRC与众测，虽说是奖励机制，但本质上依然是种利益交换行为，有利益就可能产生冲突。所以，需要时刻为这种冲突准备着。&lt;/p&gt;
&lt;p&gt;坚持”不搞事，不怕事”的态度，贯彻”决不放弃使用武力”的作战方针，保留犯罪证据，在必要的时候，坚决拿起法律武器捍卫自身权益。&lt;/p&gt;
&lt;p&gt;一句话：犯罪者，虽远必诛！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;vulwar&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;【注】：本文仅代表个人观点，与公司立场无关。&lt;/p&gt;
&lt;p&gt;早上看到朋友圈有人说Metasploit公布BlueKeep远程执行漏洞的利用，一些安全群里也有人喊着加班了，但这漏洞明明很早就已经发布补丁了，现在才加班应急明显是有问题的。因此才有了本文，谈谈关于安全应急的一些个
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>安全研究的价值思考</title>
    <link href="http://riusksk.github.io/2019/08/18/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E7%9A%84%E4%BB%B7%E5%80%BC%E6%80%9D%E8%80%83/"/>
    <id>http://riusksk.github.io/2019/08/18/安全研究的价值思考/</id>
    <published>2019-08-18T05:27:14.000Z</published>
    <updated>2019-08-18T07:59:12.000Z</updated>
    
    <content type="html">&lt;p&gt;【注】：纯属个人言论，与公司立场无关！&lt;/p&gt;
&lt;p&gt;最近的Black Hat大会议题ppt已提供下载，里面有两个非技术议题，其视角比较有趣，一些问题值得思考，因此才有本文。&lt;/p&gt;
&lt;p&gt;这两个议题分别是”Project Zero File Years Of Make 0day Hard”和”Selling 0-days to governments and offensive security companies”，一个讲述5年来Google的Project Zero团队在漏洞研究上的工作效果，一个讲述关于漏洞交易的一些现状、流程。&lt;/p&gt;
&lt;h3 id=&quot;安全研究都干啥&quot;&gt;&lt;a href=&quot;#安全研究都干啥&quot; class=&quot;headerlink&quot; title=&quot;安全研究都干啥&quot;&gt;&lt;/a&gt;安全研究都干啥&lt;/h3&gt;&lt;p&gt;安全研究并不局限于漏洞领域，但它依然是目前最主流的方向，研究范围也可以包括网络安全、反病毒、大数据安全、业务安全等诸多安全领域。这里主要聊下漏洞领域的研究，看看Project Zero的人主要都在干啥：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190818142847773.png&quot; alt=&quot;image-20190818142847773&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结一下就是（主要指漏洞研究领域，估计很多人只干1、3、4的工作）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;漏洞挖掘与利用&lt;/li&gt;
&lt;li&gt;方法论建设&lt;/li&gt;
&lt;li&gt;技术写作&lt;/li&gt;
&lt;li&gt;行业交流与合作&lt;/li&gt;
&lt;li&gt;软件工程化建设，可能是指DevSecOps，包括安全防御策略建设、libfuzzer自动化测试等的应用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;###从招聘职责看研究目的&lt;/p&gt;
&lt;p&gt;谈研究价值，不妨先来谈谈研究的目的，我特意从各招聘网站上搜集了一些关于安全研究岗位的招聘信息，主要统计其岗位职责描述的关键词，生成如下词云：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/职责.png&quot; alt=&quot;职责&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，当前的研究岗位普遍就是招漏洞挖掘职位的，都是搞主流系统及软件为主，但挖洞的目的又是为什么呢，这种在很少企业会写在招聘帖的。从统计结果看，主要有以下3个研究目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;挖掘主流系统/软件漏洞；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;帮助安全产品提升检测能力；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为业务提供技术支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一点是手段，等于啥也没说，第2点算是做安全产品，第3点是得看是什么业务，如第2点也算业务，但如果是一些非安全产品业务，其实所能提供的技术支持就相对比较局限，可能人家业务也不一定看得上你这研究。&lt;/p&gt;
&lt;h3 id=&quot;影响力价值&quot;&gt;&lt;a href=&quot;#影响力价值&quot; class=&quot;headerlink&quot; title=&quot;影响力价值&quot;&gt;&lt;/a&gt;影响力价值&lt;/h3&gt;&lt;p&gt;搞安全研究，普遍都是为了影响力公关（PR），国内外均是如此，BlackHat上的Pwnie Awards都有一个“&lt;em&gt;最名不副实&lt;/em&gt;漏洞奖”，叫做”most over-hyped bug”，就是用来批评那些过度炒作的漏洞。但是一些确实危害比较大的漏洞，及时负责任地披露反而有利于防御工作的开展。Project Zero议题中讲到一句话，开放的攻击研究相对攻击者而言，对防御者更为有利。之前国内试颁行的某提案，因可能阻碍安全研究者公开研究成果，遭到不少圈内人的反对。这跟古时候，有的国家禁止人民用刀一样，最终只是阻碍生产力的发展而已。其实只要不是急功近利，获得与研究成果相匹配的影响力也是合理的。那获得影响力之后的价值呢？对团队，对个人，可能获取得更多交流与学习的机会，也可能获得更多业务合作机会，直接点，可能找份工作防止中年危机都更有资本了。&lt;/p&gt;
&lt;h3 id=&quot;商业价值&quot;&gt;&lt;a href=&quot;#商业价值&quot; class=&quot;headerlink&quot; title=&quot;商业价值&quot;&gt;&lt;/a&gt;商业价值&lt;/h3&gt;&lt;p&gt;何为商业价值？就是赚钱嘛！通过安全研究落地为产品，然后拿去卖；也可提供技术服务，比如帮助对IoT、车联网产品等新兴行业产品进行安全测试。产品一般比技术服务更值钱，技术服务经常是一波过，产品却是可以长期收费的，比如IDA一年卖几万刀，用户每年都得交钱，而若只是提供逆向服务，费劲且不持久，赚得还少。如果是漏洞交易，高质量的漏洞利用链也是可以获得不菲的利益。在0day漏洞交易感兴趣的，主要涉及以下3类角色：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190818144822263.png&quot; alt=&quot;image-20190818144822263&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;防御型企业、漏洞奖励计划和平台&lt;/li&gt;
&lt;li&gt;黑客比赛举办者，类似漏洞收购中间商，自己可能也会去挖洞，也可能收购poc来自己写exploit，或者直接收购exploit，再转手卖出去赚差价&lt;/li&gt;
&lt;li&gt;攻击型企业、政府、黑产团伙&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在国内已经限制参加Pwn2Own之类的国外比赛，从2018年开始，国内由”天府杯”比赛代替，主要是防止漏洞外流危害国家网络安全。这些比赛也推动了厂商对漏洞处理的态度，以及漏洞奖励计划的建设，使得报告者能够合法地获得相应的奖励和认可。&lt;/p&gt;
&lt;h3 id=&quot;新型业务安全预防&quot;&gt;&lt;a href=&quot;#新型业务安全预防&quot; class=&quot;headerlink&quot; title=&quot;新型业务安全预防&quot;&gt;&lt;/a&gt;新型业务安全预防&lt;/h3&gt;&lt;p&gt;提前研究一些公司业务可能涉足的新领域，避免新兴业务产品出来后，无能力解决上面的安全问题。但整个的前提是，该新产品能活下来，否则一切都是白搭。&lt;/p&gt;
&lt;h3 id=&quot;行业贡献&quot;&gt;&lt;a href=&quot;#行业贡献&quot; class=&quot;headerlink&quot; title=&quot;行业贡献&quot;&gt;&lt;/a&gt;行业贡献&lt;/h3&gt;&lt;p&gt;在安全行业贡献榜上，Project Zero无疑是佼佼者。在5年内，他们共贡献1500+个主流系统/软件漏洞，推动很多安全防御机制的诞生，甚至影响漏洞在市场上的价格。漏洞研究者有时担心手上的漏洞被撞掉，会直接报给厂商，混个致谢，搞不好年底还能混个”MSRC Top 100”，今年开始它改名叫”最具价值安全研究员”，更高大上了。这个月，我就被Project Zero的人撞掉了一个微软漏洞。在PZ分享的议题里面，提出一些衡量”make 0day hard”的标准，但毕竟是相对概念，仅当作参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;挖到品相优秀的漏洞所花费的时间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;漏洞平均生存时间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;撞洞数量；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;漏洞利用链的长度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新型高质量的攻击面的发现概率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;个人保值防老&quot;&gt;&lt;a href=&quot;#个人保值防老&quot; class=&quot;headerlink&quot; title=&quot;个人保值防老&quot;&gt;&lt;/a&gt;个人保值防老&lt;/h3&gt;&lt;p&gt;研究本身就是一种学习方式。相信爱学习的人，最终运气都不会太差。尤其是现在鼓吹35岁中年危机的互联网时代，保持学习是最靠谱的个人保值防老方式。如果保持工作内容不变，那么通常头一年所积累的技术与工作方法足够应付绝大部分工作。若再不搞点有挑战的新工作内容，或者业余做点研究，那就要成为拿着一套技术吃N年的”老白兔”了。持续学习，保持或者超越与年龄相符的技术能力才是王道。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/gzh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;【注】：纯属个人言论，与公司立场无关！&lt;/p&gt;
&lt;p&gt;最近的Black Hat大会议题ppt已提供下载，里面有两个非技术议题，其视角比较有趣，一些问题值得思考，因此才有本文。&lt;/p&gt;
&lt;p&gt;这两个议题分别是”Project Zero File Years Of Make 0
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>一些值得学习的Fuzzer开源项目</title>
    <link href="http://riusksk.github.io/2019/07/14/%E4%B8%80%E4%BA%9B%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0%E7%9A%84Fuzzer%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>http://riusksk.github.io/2019/07/14/一些值得学习的Fuzzer开源项目/</id>
    <published>2019-07-14T02:42:40.000Z</published>
    <updated>2019-07-14T05:50:36.000Z</updated>
    
    <content type="html">&lt;p&gt;之前&lt;code&gt;GitHub&lt;/code&gt;上有人整理过一个叫&lt;code&gt;Awesome-Fuzzing&lt;/code&gt;的资料，整理了关于&lt;code&gt;Fuzzing&lt;/code&gt;技术的电子书、视频、工具、教程以及用于练习的漏洞程序。整体上不错，但工具上还是不够全，有些不错且希望阅读代码学习的工具，发现未在其中，因此重新整理出下面这一份资源，其中有些还曾二次开发过，有些是还未来得及学习的，写出来权且当作学习计划。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;AFL&lt;/strong&gt;——支持源码插桩的代码覆盖引导的Fuzzer，绝对是fuzzer领域的一大里程碑，虽然它也支持基于QEMU的闭源程序，但效果不好，且容易出错，由它衍生出来非常多afl分支版本，借助它已经被挖出非常多的漏洞，但它的变异策略其实有待提高。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lcamtuf.coredump.cx/afl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://lcamtuf.coredump.cx/afl/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WinAFL&lt;/strong&gt;——windows版本的afl，使用&lt;code&gt;DynamoRIO&lt;/code&gt;去插桩闭源程序以获取代码覆盖率信息，同时支持硬件PT获取覆盖率信息，但PT获取覆盖率其实并没有插桩获取得全，但速度可能会快一些。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/googleprojectzero/winafl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/winafl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;AFLFast&lt;/strong&gt;——加速版的AFL，Fuzzing速度确实会比原版快一些。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mboehme/aflfast&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mboehme/aflfast&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vuzzer&lt;/strong&gt;——支持闭源程序的覆盖引导Fuzzer，使用LibDFT的pin工具实现数据流追踪，结合动静态分析，以获取更多的代码路径，比如比较语句中的比较值，它会先作记录，再未来变异时使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/vusec/vuzzer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/vusec/vuzzer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PTfuzzer&lt;/strong&gt;——Linux平台下的采用 Interl PT硬件支持的覆盖引导Fuzzer，所以它支持闭源程序。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hunter-ht-2018/ptfuzzer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hunter-ht-2018/ptfuzzer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;afl-unicorn&lt;/strong&gt;——采用Unicorn模拟指令的AFL，支持Linux闭源程序&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tigerpuma/Afl_unicorn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tigerpuma/Afl_unicorn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;pe-afl&lt;/strong&gt;——通过静态插桩实现针对Windows闭源程序的覆盖引导的AFL Fuzzer，支持用户层应用和内核驱动&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wmliang/pe-afl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wmliang/pe-afl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;kAFL&lt;/strong&gt;——支持QEMU虚拟机下的系统内核Fuzzing的AFL，适用于Linux、macOS与Windows&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/RUB-SysSec/kAFL/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/RUB-SysSec/kAFL/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;TriforceAFL&lt;/strong&gt;——基于QEMU全系统模拟的AFL，借助系统仿真器实现分支信息跟踪，支持Linux内核Fuzzing&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nccgroup/TriforceAFL&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/nccgroup/TriforceAFL&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ClusterFuzzer&lt;/strong&gt;——Google开源的可扩展的Fuzzing基础设施&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/clusterfuzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/clusterfuzz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;LibFuzzer&lt;/strong&gt;——进程内覆盖率引导的开源的fuzz引擎库，属于llvm的一部分，在各大主流开源库中，以及Google内部最经常用的安全测试工具&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://llvm.org/docs/LibFuzzer.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://llvm.org/docs/LibFuzzer.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;OSS-Fuzz&lt;/strong&gt;——基于LibFuzzer的开源软件Fuzzer集合，实现docker下自动下载、编译安装及运行&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/oss-fuzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/oss-fuzz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;honggfuzz&lt;/strong&gt;——Google开发的基于软硬件的覆盖驱动型Fuzzer，单纯暴力Fuzz的效果也挺好的，支持多平台，包括Linux\macOS\Windows\Android&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/honggfuzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/honggfuzz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;KernelFuzzer&lt;/strong&gt;——跨平台内核Fuzzer框架，不开源策略，只在其paper中提及变异策略，需要自己实现，支持Windows、OSX和QNX系统，但只提供Windows编译脚本&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mwrlabs/KernelFuzzer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mwrlabs/KernelFuzzer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;OSXFuzzer&lt;/strong&gt;——基于Kernel Fuzzer的macOS内核Fuzzer&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mwrlabs/OSXFuzz.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mwrlabs/OSXFuzz.git&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PassiveFuzzFrameworkOSX&lt;/strong&gt;——通过Hook实现被动式的OSX内核Fuzzer&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SilverMoonSecurity/PassiveFuzzFrameworkOSX&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/SilverMoonSecurity/PassiveFuzzFrameworkOSX&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bochspwn&lt;/strong&gt;——基于Boch插桩API实现Double Fetches内核漏洞的检测&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/googleprojectzero/bochspwn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/bochspwn&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bochspwn-reloaded&lt;/strong&gt;——基于Boch插桩API实现内核信息泄露的检测&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/googleprojectzero/bochspwn-reloaded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/bochspwn-reloaded&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;syzkaller&lt;/strong&gt;——基于覆盖率引导的Linux内核Fuzzer，需要基于其模板语法实现API调用模板，提供给syzkaller进行数据变异，也曾被移植到其它平台&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/syzkaller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/syzkaller&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;dharma&lt;/strong&gt;——基于语法模板生成的Fuzzer，由Mozilla开源的用于Fuzz Firefox JS引擎&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MozillaSecurity/dharma&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/MozillaSecurity/dharma&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;domator&lt;/strong&gt;——Project Zero团队开源的DOM Fuzzer，用python实现基于模板生成的Fuzzer&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/googleprojectzero/domato&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/domato&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fuzzilli&lt;/strong&gt;——基于语法变异的JavaScript引擎Fuzzer，先通过语法模板生成测试用例，再生成中间语法进行变异，结合覆盖率引导以触发更多代码路径&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/googleprojectzero/fuzzilli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/fuzzilli&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Razzer&lt;/strong&gt;——内核竞争条件漏洞Fuzzer&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/compsec-snu/razzer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/compsec-snu/razzer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ViridianFuzzer&lt;/strong&gt;——用于Fuzzing Hyper-V hypercalls的内核驱动，由MWRLabs公司出品&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mwrlabs/ViridianFuzzer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mwrlabs/ViridianFuzzer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ChromeFuzzer&lt;/strong&gt;——基于grinder语法生成器改装的Chrome浏览器Fuzzer&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/demi6od/ChromeFuzzer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/demi6od/ChromeFuzzer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;funfuzz&lt;/strong&gt;——Mozilla开源的JS fuzzer工具集合，主要用于Fuzz SpiderMonkey&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/MozillaSecurity/funfuzz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/MozillaSecurity/funfuzz&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前&lt;code&gt;GitHub&lt;/code&gt;上有人整理过一个叫&lt;code&gt;Awesome-Fuzzing&lt;/code&gt;的资料，整理了关于&lt;code&gt;Fuzzing&lt;/code&gt;技术的电子书、视频、工具、教程以及用于练习的漏洞程序。整体上不错，但工具上还是不够全，有些不错且希望
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Fuzzing" scheme="http://riusksk.github.io/tags/Fuzzing/"/>
    
      <category term="Fuzzer" scheme="http://riusksk.github.io/tags/Fuzzer/"/>
    
  </entry>
  
  <entry>
    <title>Infiltrate2019议题学习</title>
    <link href="http://riusksk.github.io/2019/06/29/Infiltrate2019%E8%AE%AE%E9%A2%98%E5%AD%A6%E4%B9%A0/"/>
    <id>http://riusksk.github.io/2019/06/29/Infiltrate2019议题学习/</id>
    <published>2019-06-29T02:26:18.000Z</published>
    <updated>2019-06-29T04:38:42.000Z</updated>
    
    <content type="html">&lt;p&gt;Infiltrate2019安全大会是在5月初举办的，会议资料收集后放在电脑上1个多月了，连续几个周末都有事，一直没来得及学习，今天刚好学习下，有些议题其实跟MOSEC上有重复。&lt;/p&gt;
&lt;p&gt;重点聊几个个人感兴趣的议题，并最后附上10个议题ppt资料下载。&lt;/p&gt;
&lt;h3 id=&quot;2PAC-2Furious-Envisioning-an-iOS&quot;&gt;&lt;a href=&quot;#2PAC-2Furious-Envisioning-an-iOS&quot; class=&quot;headerlink&quot; title=&quot;2PAC 2Furious Envisioning an iOS&quot;&gt;&lt;/a&gt;2PAC 2Furious Envisioning an iOS&lt;/h3&gt;&lt;p&gt;科恩出品，分两部分：PAC绕过与基带研究，刚好在MOSEC上project zero的人讲了5种PAC绕过方法，议题名叫”A study in PAC”，涵盖了其中的方法，而基带研究部分也作为独立议题在MOSEC上分享过，介绍 基带攻击方法、逆向分析固件的方法。&lt;/p&gt;
&lt;p&gt;之前在MOSEC上，我对5种PAC绕过方法作了学习笔记，直接上图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g4htu5v9uwj30kt0bu117.jpg&quot; alt=&quot;image-20190629104044528&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g4htugqt77j30l60azk14.jpg&quot; alt=&quot;image-20190629104108330&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g4htvdapshj30ln0bjqdc.jpg&quot; alt=&quot;image-20190629104158997&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g4htvmwxq5j30lb0bvtic.jpg&quot; alt=&quot;image-20190629104215919&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g4htw8f19bj30l20bv47u.jpg&quot; alt=&quot;image-20190629104249591&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;EL3-Tour-Get-The-Ultimate-Privilege-of-Android-Phone&quot;&gt;&lt;a href=&quot;#EL3-Tour-Get-The-Ultimate-Privilege-of-Android-Phone&quot; class=&quot;headerlink&quot; title=&quot;EL3 Tour - Get The Ultimate Privilege of Android Phone&quot;&gt;&lt;/a&gt;EL3 Tour - Get The Ultimate Privilege of Android Phone&lt;/h3&gt;&lt;p&gt;盘古出品，拿华为P20开刀，应该是手工逆向分析TEE相关代码，挖到一个代码执行漏洞攻击EL3的过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g4htzfth2jj30ki08ytfb.jpg&quot; alt=&quot;image-20190629104554838&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过VBAR_EL+0x400的异常处理例程来定位SMC处理例程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g4hu1jvypuj30eo08ctdm.jpg&quot; alt=&quot;image-20190629104757284&quot;&gt;&lt;/p&gt;
&lt;p&gt;漏洞代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g4hu25urjvj30l10930y7.jpg&quot; alt=&quot;image-20190629104832507&quot;&gt;&lt;/p&gt;
&lt;p&gt;对方的漏洞利用思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过漏洞实现任意内存读写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;布署 Shellcode 于地址 0x209F8000（EL1下可访问，属于共享内存）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;篡改 Page Descriptior : 0x209F8627 =&amp;gt; 0x209F8783（可执行）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TLBI ALLEL3：清除TLB缓存，保持数据一致，使页表修改可被CPU感知到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调用 0x209F8000，触发shellcode执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后演示如何利用该漏洞绕过华为手机的人脸验证，包括篡改人脸匹配分值、活体检测结果。&lt;/p&gt;
&lt;h3 id=&quot;Adventures-in-Video-Conferencing&quot;&gt;&lt;a href=&quot;#Adventures-in-Video-Conferencing&quot; class=&quot;headerlink&quot; title=&quot;Adventures in Video Conferencing&quot;&gt;&lt;/a&gt;Adventures in Video Conferencing&lt;/h3&gt;&lt;p&gt;Project Zero以前在其博客上分享过，看博文会更清晰一些，详见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 1: The Wild World of WebRTC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 2: Fun with FaceTime&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 3: The Even Wilder World of WhatsApp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-4.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 4: What Didn’t Work Out with WhatsApp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/12/adventures-in-video-conferencing-part-5.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Adventures in Video Conferencing Part 5: Where Do We Go from Here?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Natalie Silvanovich 作为PZ的头牌女黑客，在此议题的厉害之处就是用了几行fuzz代码挖了包括浏览器、FaceTime、WhatsApp在内的主流应用10多个CVE远程漏洞。就是下面这段代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me//media/006tNc79gy1g4huf2vvhfj30c80df3zm.jpg&quot; alt=&quot;image-20190629110057733&quot;&gt;&lt;/p&gt;
&lt;p&gt;通过分析视频交互过程，找到外部数据传递的关键点，开源的改代码插入fuzz，闭源的写Hook去实现fuzz，相关的工具也已在GitHub上开源：&lt;a href=&quot;https://github.com/googleprojectzero/Street-Party。之前看到国内也有人顺势搞到几个FaceTime的漏洞。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/Street-Party。之前看到国内也有人顺势搞到几个FaceTime的漏洞。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;TEE-Exploitation-Exploiting-Trusted-Apps-on-Samsung’s-TEE&quot;&gt;&lt;a href=&quot;#TEE-Exploitation-Exploiting-Trusted-Apps-on-Samsung’s-TEE&quot; class=&quot;headerlink&quot; title=&quot;TEE Exploitation: Exploiting Trusted Apps on Samsung’s TEE&quot;&gt;&lt;/a&gt;TEE Exploitation: Exploiting Trusted Apps on Samsung’s TEE&lt;/h3&gt;&lt;p&gt;Blue Frost Security出品，举了几个三星漏洞的例子：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TA的栈溢出案例：由于只有NX(没有栈保护和ASLR)，所以直接上ROP搞定的&lt;/li&gt;
&lt;li&gt;共享内存Double Fectch漏洞：TA在验证和使用命令数据的时间窗口内，可能被篡改数据，实现任意读写&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me//media/006tNc79gy1g4huyzbl81j30id0dh0tr.jpg&quot; alt=&quot;image-20190629112004922&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于缺乏一些常见的内存保护机制（仅有NX），在TA利用上反而更加容易。TA攻破后，对于厂商最大的影响可能是DRM版权与支付密钥等问题；而对于用户而言，主要是用户数据的窃取问题。&lt;/p&gt;
&lt;h3 id=&quot;资料打包下载&quot;&gt;&lt;a href=&quot;#资料打包下载&quot; class=&quot;headerlink&quot; title=&quot;资料打包下载&quot;&gt;&lt;/a&gt;资料打包下载&lt;/h3&gt;&lt;p&gt;下载链接：&lt;a href=&quot;https://github.com/riusksk/SecConArchive/tree/master/Infiltrate2019&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/SecConArchive/tree/master/Infiltrate2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me//media/006tNc79gy1g4hvqqcgb5j30co05y759.jpg&quot; alt=&quot;image-20190629114646339&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Infiltrate2019安全大会是在5月初举办的，会议资料收集后放在电脑上1个多月了，连续几个周末都有事，一直没来得及学习，今天刚好学习下，有些议题其实跟MOSEC上有重复。&lt;/p&gt;
&lt;p&gt;重点聊几个个人感兴趣的议题，并最后附上10个议题ppt资料下载。&lt;/p&gt;
&lt;h3
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>2019年哪些安全大会的议题值得学习</title>
    <link href="http://riusksk.github.io/2019/05/11/2019%E5%B9%B4%E5%93%AA%E4%BA%9B%E5%AE%89%E5%85%A8%E5%A4%A7%E4%BC%9A%E7%9A%84%E8%AE%AE%E9%A2%98%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0/"/>
    <id>http://riusksk.github.io/2019/05/11/2019年哪些安全大会的议题值得学习/</id>
    <published>2019-05-11T02:19:22.000Z</published>
    <updated>2019-05-11T08:20:32.000Z</updated>
    
    <content type="html">&lt;p&gt;“2019年哪些安全大会值得参加？”或者这更符合多数人心中的标题，但为何不这么写呢？&lt;/p&gt;
&lt;p&gt;因为有些拥有好议题的大会一般都会公开PPT，尤其是国外会议，来回参会成本比较高，如果有现成的PPT供学习，自然不用每次都参加。当然，也有因作者拒绝公开的议题，这种只能现场听了。&lt;/p&gt;
&lt;p&gt;评价安全大会的好坏，是多方面的，绝不是单纯的议题质量这一维度。但这里我主要想从技术者的角度来看评价，所以后面你发现很多知名大会未在此列，请不要惊讶。&lt;/p&gt;
&lt;p&gt;即使是同一举办方，也无法保证每年的议题质量呈上升状态，有些会议也开始没落了，所以这里以2019年为时间点来点评。&lt;/p&gt;
&lt;p&gt;下面来聊聊2019年哪些安全大会的议题值得学习，有些已经举办过，有些尚未开始。&lt;/p&gt;
&lt;h2 id=&quot;推荐的安全会议&quot;&gt;&lt;a href=&quot;#推荐的安全会议&quot; class=&quot;headerlink&quot; title=&quot;推荐的安全会议&quot;&gt;&lt;/a&gt;推荐的安全会议&lt;/h2&gt;&lt;h3 id=&quot;1、BlackHat&quot;&gt;&lt;a href=&quot;#1、BlackHat&quot; class=&quot;headerlink&quot; title=&quot;1、BlackHat&quot;&gt;&lt;/a&gt;1、BlackHat&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511125059375.png&quot; alt=&quot;image-20190511125059375&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官网&lt;/strong&gt;：&lt;a href=&quot;https://www.blackhat.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blackhat.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你不知道BlackHat，说明你不在安全圈混。&lt;/p&gt;
&lt;p&gt;USA是主会场，议题质量和数量也是最高的，议题类型覆盖面也很广，除此之外还有欧洲和亚洲等分会场，质量相对次一些。&lt;/p&gt;
&lt;p&gt;这次BlackHat USA的议题也陆续公开了：&lt;a href=&quot;https://www.blackhat.com/us-19/briefings/schedule/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.blackhat.com/us-19/briefings/schedule/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;早几年的议题水平参差不齐，很水的也有，打广告也有。最近几年反而议题质量提高，不少华人面孔出现，为了PR效果而竞争，促进大家都拿出干货来分享，这也是其有利的一面。&lt;/p&gt;
&lt;p&gt;每年都有几千个议题投稿，竞争很大，但这很好地促进议题质量的提高。&lt;/p&gt;
&lt;p&gt;每年会后，官方都会放出PPT与视频，非常开放地分享知识。&lt;/p&gt;
&lt;p&gt;所以，首推BlackHat，自然无疑。&lt;/p&gt;
&lt;p&gt;但如果你以为接下我会写Defcon，那我会告诉你：No！&lt;/p&gt;
&lt;h3 id=&quot;2、OffensiveCon&quot;&gt;&lt;a href=&quot;#2、OffensiveCon&quot; class=&quot;headerlink&quot; title=&quot;2、OffensiveCon&quot;&gt;&lt;/a&gt;2、OffensiveCon&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/Logo_Offensivecon_by_BFS_1.jpg&quot; alt=&quot;offensivecon&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;官网&lt;/strong&gt;：&lt;a href=&quot;https://www.offensivecon.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.offensivecon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之前还专门写了篇文章&lt;a href=&quot;http://riusksk.me/2019/02/22/今年的OffensiveCon大会议题不错/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《今年的OffensiveCon大会议题质量不错》&lt;/a&gt;介绍2019年大会中一些不错的议题。&lt;/p&gt;
&lt;p&gt;虽然OffensiveCon是从2018年才开始举办的，但议题质量一直保持不错，演讲者中包括Project Zero、Google syzkaller作者、Pwn2Own与Hack2Win获奖者等等。&lt;/p&gt;
&lt;p&gt;会后，一般是由演讲者选择是否公开ppt，多数人是在Twitter上公开的，官网上我没找到资源（&lt;a href=&quot;https://github.com/riusksk/SecConArchive/tree/master/OffensiveCon2019），所以之前收集的ppt都是从twitter上扒下来的。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/SecConArchive/tree/master/OffensiveCon2019），所以之前收集的ppt都是从twitter上扒下来的。&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;3、HITB-Hack-In-The-Box&quot;&gt;&lt;a href=&quot;#3、HITB-Hack-In-The-Box&quot; class=&quot;headerlink&quot; title=&quot;3、HITB (Hack In The Box)&quot;&gt;&lt;/a&gt;3、HITB (Hack In The Box)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511133408850.png&quot; alt=&quot;image-20190511133408850&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://conference.hitb.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://conference.hitb.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这几天HITB刚在荷兰阿姆斯特丹举办完，议题PPT也一并公开(&lt;a href=&quot;https://conference.hitb.org/hitbsecconf2019ams/materials/)。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://conference.hitb.org/hitbsecconf2019ams/materials/)。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果要说国内外安全会议中，哪个公开PPT最快的，一定是HITB，他们一般是现场演讲完，就直接扔官网下载。然后过一段时间，也同样发布演讲视频。&lt;/p&gt;
&lt;p&gt;他们有时会同时搞两个演讲会场，一个是收费的主会场，议题质量高一些，一个是免费的，叫CommSec，用来提携新人，议题质量相对比较次，每个议题分享时间也比较短，最多半小时。&lt;/p&gt;
&lt;p&gt;之前去新加坡参加过一次HITB，人数不多，场地也不大，但可以感受到与国内安全会议的区别：更注重技术交流，而非搞关系。&lt;/p&gt;
&lt;p&gt;2018年开始，HITB也开始与京东合作，在北京举办分会场，没去过，不作评价，但国际会议本土化，总会产生一些差异的。&lt;/p&gt;
&lt;h3 id=&quot;4、InfiltrateCon&quot;&gt;&lt;a href=&quot;#4、InfiltrateCon&quot; class=&quot;headerlink&quot; title=&quot;4、InfiltrateCon&quot;&gt;&lt;/a&gt;4、InfiltrateCon&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511134410680.png&quot; alt=&quot;image-20190511134410680&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://infiltratecon.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://infiltratecon.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从2011年开始举办的，已经走过8个年头。&lt;/p&gt;
&lt;p&gt;看了今年的议题，还是有干货的，但只有4个议题ppt在twitter上公开。&lt;/p&gt;
&lt;p&gt;以前，会后都会在官网上公开PPT和视频，但目前官方还没公开。&lt;/p&gt;
&lt;p&gt;今年的议题涉及Chrome RCE、iOS与Android提权、Pwn TEE、浏览器JS Fuzzing等等，只能坐等官方公开PPT了。&lt;/p&gt;
&lt;h3 id=&quot;5、Chaos-Communication-Congress-C3&quot;&gt;&lt;a href=&quot;#5、Chaos-Communication-Congress-C3&quot; class=&quot;headerlink&quot; title=&quot;5、Chaos Communication Congress(C3)&quot;&gt;&lt;/a&gt;5、Chaos Communication Congress(C3)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511141920353.png&quot; alt=&quot;image-20190511141920353&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://www.ccc.de/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.ccc.de/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;德国混淆黑客大会，常叫C3会议，常在C3前面加上第几届，比如今年第35届，所以叫35C3，历史非常悠久。&lt;/p&gt;
&lt;p&gt;以前大多是聚焦在无线电安全，所以一些什么2G\3G\4G短信、电话窃听经常出自该会议。熟悉无线电安全的同学，应该都听过。2018年也有一些不错的软件安全相关的议题，这些在之前写的文章&lt;a href=&quot;http://riusksk.me/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%AE%E9%A2%98/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《推荐今年C3黑客大会上的几个议题》&lt;/a&gt;介绍过了。&lt;/p&gt;
&lt;p&gt;除了大会议题，不得不提下他们的CTF，非常具有实战价值，比如2018年的题目，直接拿pwn2own漏洞当比赛，从safari代码执行到提权，还有VisualBox沙盒逃逸题目，需要利用到0Dday，出题者是ProjectZero的人，早就将其卖给ZDI，刷了不少VBox漏洞。这些CTF题目在网上都有相应的WriteUp可供学习。&lt;/p&gt;
&lt;p&gt;这些议题只有演讲视频公开，没有PPT，官方会放在&lt;a href=&quot;https://media/ccc.de，可在线或下载观看。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media/ccc.de，可在线或下载观看。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;都是在每年的12月份举办，2019的还有半年呢……&lt;/p&gt;
&lt;h3 id=&quot;6、CanSecWest&quot;&gt;&lt;a href=&quot;#6、CanSecWest&quot; class=&quot;headerlink&quot; title=&quot;6、CanSecWest&quot;&gt;&lt;/a&gt;6、CanSecWest&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511143022033.png&quot; alt=&quot;image-20190511143022033&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://cansecwest.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cansecwest.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CanSecWest都是与Pwn2Own一块出现的，以前议题PPT都是放在&lt;a href=&quot;https://www.slideshare.net/上分享，但从2018年开始又不搞了。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.slideshare.net/上分享，但从2018年开始又不搞了。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每年议题不多，但质量还是可以的，不过感觉这两年的质量略有下降。&lt;/p&gt;
&lt;p&gt;今年3月的议题也没看到有下载，也是混Twitter找ppt的，只看了《&lt;strong&gt;vs com.apple.security.sandbox&lt;/strong&gt;》这个议题，今年我感兴趣的议题没几个，大家根据自己喜好选择吧。&lt;/p&gt;
&lt;p&gt;如果你各个议题PPT，也欢迎分享下。&lt;/p&gt;
&lt;h3 id=&quot;7、MOSEC-移动安全技术峰会&quot;&gt;&lt;a href=&quot;#7、MOSEC-移动安全技术峰会&quot; class=&quot;headerlink&quot; title=&quot;7、MOSEC 移动安全技术峰会&quot;&gt;&lt;/a&gt;7、MOSEC 移动安全技术峰会&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/image-20190511145201148.png&quot; alt=&quot;image-20190511145201148&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://mosec.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mosec.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MOSEC是从2015年开始举办的，由盘古与韩国POC联合举办，聚集移动安全领域，包括Android、iOS、IoT以及无线电等领域。虽然起步晚，但议题干货满满的，应该是目前国内最好的安全会议了。&lt;/p&gt;
&lt;p&gt;今年的议题也已经陆续公开了，包括iOS越狱、Android提权、LTE、基带、卫星系统等等。&lt;/p&gt;
&lt;p&gt;官网是不公开大会的议题PPT，由演讲者选择，所以想学习的同学，可能还是得去参会。&lt;/p&gt;
&lt;p&gt;从2015年第一届我就开始参加，本月底还会去。去年参会，早上出酒店一辆车都打不到，又不在地铁口，最后骑了1个多小时的单车到会场，不容易啊……&lt;/p&gt;
&lt;h3 id=&quot;8、POC&quot;&gt;&lt;a href=&quot;#8、POC&quot; class=&quot;headerlink&quot; title=&quot;8、POC&quot;&gt;&lt;/a&gt;8、POC&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/poclogo.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://powerofcommunity.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://powerofcommunity.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;POC(PowerOfCommunity)起始于2006年，在韩国举办的。单从议题质量看，确实不错，大多漏洞研究领域的前沿技术，但它经常是”二手货”，也就是在其它安全会议讲过后，但去韩国观光旅游顺便讲下。&lt;/p&gt;
&lt;p&gt;还有个意思的现象就是，每年的议题超过一半是中国人讲的。&lt;/p&gt;
&lt;p&gt;所以，你推荐也对，你不推荐也没错。&lt;/p&gt;
&lt;p&gt;不过，有个好处就是，POC议题PPT都是提供下载的。有时在其它会议找不到PPT时，到POC官网翻下，偶有小惊喜。&lt;/p&gt;
&lt;p&gt;另外还有个会议叫ZeroNights，同一举办方，更多是面向老外的。&lt;/p&gt;
&lt;h2 id=&quot;那些未提及的知名大会&quot;&gt;&lt;a href=&quot;#那些未提及的知名大会&quot; class=&quot;headerlink&quot; title=&quot;那些未提及的知名大会&quot;&gt;&lt;/a&gt;那些未提及的知名大会&lt;/h2&gt;&lt;h3 id=&quot;1、Defcon&quot;&gt;&lt;a href=&quot;#1、Defcon&quot; class=&quot;headerlink&quot; title=&quot;1、Defcon&quot;&gt;&lt;/a&gt;1、Defcon&lt;/h3&gt;&lt;p&gt;很多时候，Defcon议题都是BlackHat挑剩的，有的人也会直接议题双投。上面的议题质量更是参差不齐，相对BlackHat要求更低，更开放。我很少看Defcon议题，偶而网上有人发才看。&lt;/p&gt;
&lt;h3 id=&quot;2、RSA&quot;&gt;&lt;a href=&quot;#2、RSA&quot; class=&quot;headerlink&quot; title=&quot;2、RSA&quot;&gt;&lt;/a&gt;2、RSA&lt;/h3&gt;&lt;p&gt;RSA是一个充满商业气息的大会，如果你看过官网的PPT，就会发现里面充满诸多广告，有的议题可能就几页图片，所以从技术角度来看，是没有多少学习的价值。&lt;/p&gt;
&lt;p&gt;但是，RSA有时也反应出的安全的风向标，虽有炒作的成分，但显然PR得甚是成功。比如当年的APT、数据可视化、威胁情报等等&lt;/p&gt;
&lt;p&gt;RSA的创新沙盒是一项不错的活动，很多创业公司把他们研发的新产品拿出来比赛，从中可以反映出一些行业发展的方向。&lt;/p&gt;
&lt;p&gt;所以，RSA比较适合管理者、创业者以及产品运营者。&lt;/p&gt;
&lt;h3 id=&quot;3、XCon&quot;&gt;&lt;a href=&quot;#3、XCon&quot; class=&quot;headerlink&quot; title=&quot;3、XCon&quot;&gt;&lt;/a&gt;3、XCon&lt;/h3&gt;&lt;p&gt;以前国内安全会议很少，基本唯XCon为首。以前参加都是为了跟圈内朋友相聚聊天，有时场外比场内还热闹。&lt;/p&gt;
&lt;p&gt;但这几年开始，XCon逐渐没落了。如果你参加过XCon2018，相信会有很大的体会，会场已经没几个人，有时在场人数可能达到个位数，找个同行聊天都难，且门票还是国内同类会议最贵的。&lt;/p&gt;
&lt;h3 id=&quot;4、KCon&quot;&gt;&lt;a href=&quot;#4、KCon&quot; class=&quot;headerlink&quot; title=&quot;4、KCon&quot;&gt;&lt;/a&gt;4、KCon&lt;/h3&gt;&lt;p&gt;KCon应该算是国内比较有自己特色的会议，2018年的议题质量也还可以，中场休息的摇滚音乐很赞，场地与音效很好。&lt;/p&gt;
&lt;p&gt;之前几届的议题质量忽上忽下，2019年的议题还没出来，大家可以关注下先。&lt;/p&gt;
&lt;p&gt;若是在2018年，我还是会给个推荐的。&lt;/p&gt;
&lt;h3 id=&quot;5、BlueHat&quot;&gt;&lt;a href=&quot;#5、BlueHat&quot; class=&quot;headerlink&quot; title=&quot;5、BlueHat&quot;&gt;&lt;/a&gt;5、BlueHat&lt;/h3&gt;&lt;p&gt;以前微软的闭门邀请制会议，从今年开始在上海举办国内版，议题列表已经放出，感觉质量一般。但跟MOSEC时间联着，可以考虑一并参加下。&lt;/p&gt;
&lt;h3 id=&quot;6、RECON&quot;&gt;&lt;a href=&quot;#6、RECON&quot; class=&quot;headerlink&quot; title=&quot;6、RECON&quot;&gt;&lt;/a&gt;6、RECON&lt;/h3&gt;&lt;p&gt;因为多数议题自己不感兴趣，它比较偏向于逆向工程，以及系统底层、硬件、固件等方向，对此方向感兴趣的话，依然可以看看。&lt;/p&gt;
&lt;h3 id=&quot;7、Syscan-Syscan360&quot;&gt;&lt;a href=&quot;#7、Syscan-Syscan360&quot; class=&quot;headerlink&quot; title=&quot;7、Syscan/Syscan360&quot;&gt;&lt;/a&gt;7、Syscan/Syscan360&lt;/h3&gt;&lt;p&gt;官网已经打不开了，聊啥……&lt;/p&gt;
&lt;h2 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h2&gt;&lt;p&gt;评价一个会议的好坏真是很容易，但要举办一个好的会议却是不容易，影响的因素特别多，且非一人之力可以搞定。&lt;/p&gt;
&lt;p&gt;无论最终质量如何，对于为行业提供沟通交流平台的一些会议，还是值得点赞的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;“2019年哪些安全大会值得参加？”或者这更符合多数人心中的标题，但为何不这么写呢？&lt;/p&gt;
&lt;p&gt;因为有些拥有好议题的大会一般都会公开PPT，尤其是国外会议，来回参会成本比较高，如果有现成的PPT供学习，自然不用每次都参加。当然，也有因作者拒绝公开的议题，这种只能现场听了
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="安全大会" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E5%A4%A7%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>读《一本小小的蓝色逻辑书》：识别常见的逻辑漏洞</title>
    <link href="http://riusksk.github.io/2019/05/03/%E8%AF%BB%E3%80%8A%E4%B8%80%E6%9C%AC%E5%B0%8F%E5%B0%8F%E7%9A%84%E8%93%9D%E8%89%B2%E9%80%BB%E8%BE%91%E4%B9%A6%E3%80%8B/"/>
    <id>http://riusksk.github.io/2019/05/03/读《一本小小的蓝色逻辑书》/</id>
    <published>2019-05-03T01:46:24.000Z</published>
    <updated>2019-05-03T07:37:01.000Z</updated>
    
    <content type="html">&lt;p&gt;最近读了一本书叫《一本小小的蓝色逻辑书》，算是逻辑推理入门书籍，觉得不错，推荐给大家。&lt;/p&gt;
&lt;p&gt;这本书在微信读书上可以找到，大概需要4个多小时的阅读时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nwae2o1hj30ku0engpd.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是逻辑推理&quot;&gt;&lt;a href=&quot;#什么是逻辑推理&quot; class=&quot;headerlink&quot; title=&quot;什么是逻辑推理&quot;&gt;&lt;/a&gt;什么是逻辑推理&lt;/h3&gt;&lt;p&gt;在生活、学习与工作中，我们总是要运用到逻辑推理能力，甚至我们自己也经常挂在嘴边，但若问什么是逻辑推理呢，估计没多少人能说清。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓”逻辑推理”，在广义上被定义为”我们评估信息的过程”。要想做出正确的决定，我们首先要占有充分的信息，而要想占有充分的信息，就必须提出正确的问题。所以那些擅长逻辑推理的人，往往也比较善于提出问题，搜集相关信息，用”正确的”方式对这些信息进行评估。最重要提，他们可以在不受他人干扰的情况下独立完成这一过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在我记忆中，整个学生时代，几乎没有过这门课程，大部分的逻辑推理能力都是基于以往的中学数学课程训练，比如真假命题、逆命题、证明题等等，本书中也有讲到这些。&lt;/p&gt;
&lt;p&gt;也许我们的日常数学真的只需要加减乘除的运算，但以前的数学课程培养出来的逻辑思维，却可以运用一生。&lt;/p&gt;
&lt;h3 id=&quot;推翻前提找答案&quot;&gt;&lt;a href=&quot;#推翻前提找答案&quot; class=&quot;headerlink&quot; title=&quot;推翻前提找答案&quot;&gt;&lt;/a&gt;推翻前提找答案&lt;/h3&gt;&lt;p&gt;这里说的”推翻前提找答案”，其实是想说”&lt;strong&gt;水平思考法&lt;/strong&gt;“，一种摆脱前提设想而进行创意思考的方式，不走寻常路，换个角度看待问题，而不是接受他人提出的前提条件。我们多数人一般都是使用“&lt;strong&gt;垂直思考法&lt;/strong&gt;”，却沿着原定的逻辑路线思考下去，就是我们俗语常说的“&lt;strong&gt;直脑筋&lt;/strong&gt;”，多少略带有点贬义。&lt;/p&gt;
&lt;p&gt;下面是两种思考方法的对比表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nws25a6hj30ps0eswht.jpg&quot; alt=&quot;image-20190503101519293&quot;&gt;&lt;/p&gt;
&lt;p&gt;可能还是太抽象了，因此作者讲了一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;许多年前，一个倒霉的商人欠了别人一大笔钱。由于没钱还债，商人很可能会被债主投进大牢。&lt;/p&gt;
&lt;p&gt;债主是个脾气又坏又丑的糟老头，但他却看上了商人年轻貌美的女儿。于是他告诉商人：”我有个办法，不仅可以把你的债务一笔勾销，还能让你的女儿免于因为你入狱而流落街头。”&lt;/p&gt;
&lt;p&gt;具体办法是：债主把一黑一白的小石头放进空袋子，让商人女儿摸一块。如果摸到白石头，则她父亲的债一笔勾销，她也无须嫁给债主；如果摸到的是黑石头，债务仍然可以一笔勾销，但她必须嫁给债主。如果她不答应这个游戏，那么她父亲会被立刻投进监狱。&lt;/p&gt;
&lt;p&gt;商人父女别无选择，只好答应。&lt;/p&gt;
&lt;p&gt;于是三人来到债主花园内铺满鹅卵石的小路上，债主俯身捡两块黑石头扔进袋子里，他自以为神不知鬼不觉，却不知这一切都被商人女儿看在眼里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果是个”直脑筋”的人，可能就想到下面两种做法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当场揭穿糟老头的阴谋，然后商人进监狱；&lt;/li&gt;
&lt;li&gt;女儿认命，抽到黑石头，嫁给糟老头，债务一笔勾销。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后的结局是这样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;商人的女儿摸出一块石头，但故意把它掉到地上，跟一堆鹅卵石混到一起。然后一边假装寻找石头，一边若有所思地说道，”但没关系，只要看看袋子里的那块石头是什么颜色，就可以判断我刚才摸出的那块石头是什么颜色了。”&lt;/p&gt;
&lt;p&gt;债主一时愣住了，不知道该说什么，只好让那个女孩拿出袋子里的石头，结果可想而知。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这就是水平思考法，我们可以回顾下这个故事，若要想免债的话，其中的”前提条件”是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提条件&lt;/strong&gt;：从袋子中摸出白石头。&lt;/p&gt;
&lt;p&gt;现在通过改变该前提条件来思考，比如这样：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从袋子中摸出&lt;strong&gt;&lt;code&gt;黑&lt;/code&gt;&lt;/strong&gt;石头：现场改变规则，摸出黑石头可免债。&lt;/li&gt;
&lt;li&gt;摸出石头后，&lt;strong&gt;根据剩下的石头颜色来判断是否摸到的是白石头&lt;/strong&gt;，正如故事中所做的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;日常生活中，阻碍我们进行创意思考的是，不假思索的程序性反应，就是不费脑子的事情，比如商店购物、开车等等，但有时遇到一些新情况，这些程序性反应就不灵了，这时就需要启动非程序性反应。&lt;/p&gt;
&lt;p&gt;书中还给了一道训练”水平思考法”的题目，大家可以先试着做下，一开始我也没做出来（答案见文末附录）：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用最多4条直线(笔尖不离纸)把下面的9个点连接起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nxsccj6aj30ck096t8z.jpg&quot; alt=&quot;image-20190503105014426&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有另一道题，是当年面试微信支付时被问到的类似题目，但微信的更难一点（拿3个桶倒出想要的重量），答案亦见文末附录：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;马戏团老板派小丑去附近河边打水给大象喝。因为想在里面加入一种特殊健康浓缩剂。所以需要整整7加仑水，不能多，也不能少。他给了小丑两个水桶，一个5加仑，一个3加仑，让小丑去打整整7加仑水。请问小丑该怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;效用概率做决策&quot;&gt;&lt;a href=&quot;#效用概率做决策&quot; class=&quot;headerlink&quot; title=&quot;效用概率做决策&quot;&gt;&lt;/a&gt;效用概率做决策&lt;/h3&gt;&lt;p&gt;如果大家经常逛知乎的话，会发现很多人在问：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;做安全需不需要考研？&lt;/li&gt;
&lt;li&gt;选择什么样的学校和专业好就业？&lt;/li&gt;
&lt;li&gt;选择什么样的职业更适合自己？&lt;/li&gt;
&lt;li&gt;其它…….&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;相信很多人做决策的时候，多会先分析出各项选择的优缺点再打分对比，选择出最佳方案，这叫&lt;strong&gt;利弊分析法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有时，我们又会先列出在意的点，根据重要程度作个加权值，然后给个选择打分，根据分数高低来排序选择，这叫&lt;strong&gt;加权排序法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还有决策法、矩阵分析法、概率树等等多种决策分析方法，在我们在决策时，能够给我们提供很大的帮助。&lt;/p&gt;
&lt;p&gt;不过我在这里，重点是想介绍下&lt;strong&gt;效用分析法&lt;/strong&gt;，即分析某个结果对我们的价值，通常跟概率一块使用。&lt;/p&gt;
&lt;p&gt;打个比方，一名大四学生在规划自己的人生。摆在他面前的有三种选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;成为旅行作家；&lt;/li&gt;
&lt;li&gt;加入外交部；&lt;/li&gt;
&lt;li&gt;成为公司销售人员。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里肯定不能只从金钱回报来考虑这个问题，因为这名学生真正看重的并不是赚多少钱，而是自己从事这份工作时的内心感受。&lt;/p&gt;
&lt;p&gt;若是以前，我可能会列出收入、职业前景、兴趣、工作环境等多个维度来考虑。但是某些场景下，我们常常忽略实现这一结果的概率，比如我想当皇帝，这种不是靠努力就能实现的。&lt;/p&gt;
&lt;p&gt;因此这里最好的办法就是去计算每份职业的期望值（Expected Value, 简称EV）。EV计算公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EV = 效用(某种结果带给我们的心理满足度) x 出现这种结果的概率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据上述公式，我们得到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nzxuyujbj30lj088jsm.jpg&quot; alt=&quot;image-20190503120444342&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里每种结果存在实现概率，是因为该结果要求一定的技能，而这名学生此时并不完全具备这些技能。&lt;/p&gt;
&lt;p&gt;根据上面的分析，该学生选择加入外部部的期望值最高，所以理性地说，他应该选择这份工作。&lt;/p&gt;
&lt;h3 id=&quot;五大常见推理漏洞&quot;&gt;&lt;a href=&quot;#五大常见推理漏洞&quot; class=&quot;headerlink&quot; title=&quot;五大常见推理漏洞&quot;&gt;&lt;/a&gt;五大常见推理漏洞&lt;/h3&gt;&lt;p&gt;通常说的推理漏洞，大多是指那些跟我们所做假设相关的漏洞。书中列举出五大常见推理漏洞：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;比较和类比假设漏洞：偷换概念&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;把两个虽然不同，但逻辑上却相等的事物进行对比。&lt;/p&gt;
&lt;p&gt;比如拿橘子和苹果作比较。再比如说，医学院校经常拿小白鼠做实验，然后把在动物身上得到的实验结果当作参考，但是若因小白鼠身上实验某种药物时发生某种并发症，就认为人类在使用这种药物时也会出现同样的并发症，就是错误的。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;代表性假设漏洞：以偏概全&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不能拿特殊案例来代表整体，统计的样本要足够多才行，否则它就会弱化我们的论断。&lt;/p&gt;
&lt;p&gt;比如《思考，快与慢》中曾举过一个例子：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近，某大医院出生婴儿1000人， 某小医院出生婴儿50人， 问哪家医院生男婴的比例大于60%的可能性较大？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们都知道生男生女的概率分别是50%，统计样本越多就越会接进这个数值，但如果你若去小医院，它的波动概率就很大，可能生男80%，也可以40%，所以小医院生男婴的比例就越有可能大于60%。&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;“好证据”假设漏洞：对相关证据视而不见&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们不经验证就想当然地认为自己的证据有效时，就很容易犯此错误。那些比较客观、相关、精确、真实的证据有利于强化我们的论述；而主观、不具代表性、不精确的论据则只会弱化我们的论述。&lt;/p&gt;
&lt;p&gt;比如，一个不愿意戒烟的人总是会看到吸烟有利的一面，而对那些支持戒烟的事实会视而不见。&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;strong&gt;因果假设漏洞：混淆因果关系&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们错误地做出因果假设，或者在没有证据的情况下就认定一件事会导致另外一件事时，就会犯这种错误。&lt;/p&gt;
&lt;p&gt;比如，每个活过百岁的人都喝过白开水，所以就认定经常喝白开水就能长命百岁，这显然是错误，它们不存在直接的因果关系。很多学术界的社会/生物健康调查相关的报导就经常出现这种错误。&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;strong&gt;实施假设漏洞：在执行计划时没有提前考虑可能出现的瓶颈&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们没有预料到计划实施过程可能出一的瓶颈，或者盲目地相信自己的计划会轻而易举地得到落实时，我们就会犯这种错误。&lt;/p&gt;
&lt;p&gt;比如，几年前，西方某旅行杂志曾登过一篇文章说：”因为如今搭乘飞机很方便，而且人们手头余钱也越来越多，所以很快大家都会去非洲看狮子了。”&lt;/p&gt;
&lt;p&gt;这显然就是错误的，去不去非洲看狮子，并非单纯考虑金钱和交通就行，比如先问问你有没有年假再说吧！&lt;/p&gt;
&lt;h3 id=&quot;识别常见的逻辑漏洞&quot;&gt;&lt;a href=&quot;#识别常见的逻辑漏洞&quot; class=&quot;headerlink&quot; title=&quot;识别常见的逻辑漏洞&quot;&gt;&lt;/a&gt;识别常见的逻辑漏洞&lt;/h3&gt;&lt;p&gt;根据书中列举的常见逻辑漏洞，我画了张思维导图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://riusksk.me/media/常见逻辑漏洞识别.svg&quot; alt=&quot;常见逻辑漏洞识别&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;附录&quot;&gt;&lt;a href=&quot;#附录&quot; class=&quot;headerlink&quot; title=&quot;附录&quot;&gt;&lt;/a&gt;附录&lt;/h3&gt;&lt;p&gt;1、9点连线的答案：多数人会受限于前提条件：只能在9个点内形成的长方形之内画线，如果能够摆脱该前提条件，那么答案就会有很多种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nyan53h1j30440a73yu.jpg&quot; alt=&quot;image-20190503110749773&quot;&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nz31v5o9j30900akwfd.jpg&quot; alt=&quot;image-20190503113506286&quot;&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nz1dfjtvj30af071t93.jpg&quot; alt=&quot;image-20190503113329718&quot;&gt;&lt;/p&gt;
&lt;p&gt;2、水桶题目的答案：先倒满5加仑的水桶，再把它倒进3加仑水桶，把3加仑水桶里的水倒掉，把5加仑水桶里剩下的2加仑水倒进3加仑水桶里，重新装满5加仑水桶（5加仑 + 2加仑 = 7加仓）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近读了一本书叫《一本小小的蓝色逻辑书》，算是逻辑推理入门书籍，觉得不错，推荐给大家。&lt;/p&gt;
&lt;p&gt;这本书在微信读书上可以找到，大概需要4个多小时的阅读时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://riusksk.me/media/006tNc79gy1g2nw
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="逻辑" scheme="http://riusksk.github.io/tags/%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>RSS: 优秀的个人情报来源</title>
    <link href="http://riusksk.github.io/2019/03/30/RSS-%E4%BC%98%E7%A7%80%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%83%85%E6%8A%A5%E6%9D%A5%E6%BA%90/"/>
    <id>http://riusksk.github.io/2019/03/30/RSS-优秀的个人情报来源/</id>
    <published>2019-03-30T01:42:03.000Z</published>
    <updated>2019-03-30T02:45:21.000Z</updated>
    
    <content type="html">&lt;p&gt;早些年，关注了一些技术博客，但不知道它是否更新文章，就只好偶而去翻翻看。关注的博客量少的时候，还应付得来，一旦多了，就觉得甚是费时间。&lt;/p&gt;
&lt;p&gt;后来才发现有RSS（聚合内容）这款神器，大大地节省时间，不用再不停地翻看别人的博客，一有更新，在自己的订阅网站或app上就可以查看到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1g1kl77qw0pj30ku11244m.jpg&quot; alt=&quot;image-20190330095736471&quot;&gt;&lt;/p&gt;
&lt;p&gt;以前用Google Reader，现在用Inoreader（&lt;a href=&quot;https://www.inoreader.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.inoreader.com&lt;/a&gt;），还提供手机APP，特别适合利用碎片时间查看和学习。&lt;/p&gt;
&lt;p&gt;我现在基本保持每天翻看，一定要把未读消息消灭掉。&lt;/p&gt;
&lt;p&gt;由于多年订阅源的收集积累，每天都有不少更新的消息，即使前天刚把失效的订阅源清理掉，也还有700多个。&lt;/p&gt;
&lt;p&gt;以前曾看到某同事的RSS订阅，上千条未读消息，平时看得少，结果越堆越多，导致未能发挥RSS应有的价值。&lt;/p&gt;
&lt;p&gt;我觉得RSS应该是每个想保持学习进步的人应该必备的工具。&lt;/p&gt;
&lt;p&gt;对于我个人而言，RSS有以下作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;应急响应&lt;/strong&gt;：及时获取外部曝光的漏洞，包括公司产品漏洞，以及可能影响公司产品的第三方通用组件/开源项目漏洞，以便能够及时响应处理；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;刷CVE&lt;/strong&gt;：及时获知某些主流软件的攻击面，或者一些漏洞挖掘技巧，然后主动尝试去挖掘。以前有不少人在乌云上曝光某一通用漏洞，就经常有一大堆去刷SRC，或者在乌云上不停地刷别人的漏洞，这种行为我觉得挺无聊的。这里刷CVE主要是指Microsoft、Apple、Adobe等一系列主流厂商的产品的0day，而不是以往乌云上这种相同漏洞在不同平台刷洞的行为。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术与工具的收集&lt;/strong&gt;：包括技术文章和工具的收集与学习，对于好的工具，会下载学习其源码，并应用实践；对于好的文章，会保存到印象笔记，方便以后查询复习。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全资讯&lt;/strong&gt;：看看一些发安全界发生哪些安全事件，比如入侵事件、facebook信息泄露事件等等，也学习下别人如何就应对此类事件。除此之外，当然也包括安全界的一些八卦。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新书资讯&lt;/strong&gt;：专门订阅一些出版社的相关博客/官网，以便能够及时获取即将出版的新书。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其它&lt;/strong&gt;：更多的用途靠自己去挖掘，毕竟每个人的期望的目标不一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于那些未提供RSS功能，又非常不错的网站，推荐使用Feed43(&lt;a href=&quot;https://feed43.com/feed.html?action=new)自定义规则来生成RSS，可直接导入到Inoreader，使用教程参考：《利用&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://feed43.com/feed.html?action=new)自定义规则来生成RSS，可直接导入到Inoreader，使用教程参考：《利用&lt;/a&gt; Feed43，将任意网页制作成 RSS 订阅源》&lt;a href=&quot;https://sspai.com/post/34320&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://sspai.com/post/34320&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后分享一下个人收集的RSS，共731个，Inoreader免费版最多支持500个，不想付费的可以找下其它免费RSS工具，或者选择部分订阅。&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://riusksk.me/media/riusksk_RSS_20190330.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riusksk.me/media/riusksk_RSS_20190330.xml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g1km7tyayfj30qv0eztc8.jpg&quot; alt=&quot;image-20190330103252935&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;早些年，关注了一些技术博客，但不知道它是否更新文章，就只好偶而去翻翻看。关注的博客量少的时候，还应付得来，一旦多了，就觉得甚是费时间。&lt;/p&gt;
&lt;p&gt;后来才发现有RSS（聚合内容）这款神器，大大地节省时间，不用再不停地翻看别人的博客，一有更新，在自己的订阅网站或app上就可
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>今年的OffensiveCon大会议题质量不错</title>
    <link href="http://riusksk.github.io/2019/02/22/%E4%BB%8A%E5%B9%B4%E7%9A%84OffensiveCon%E5%A4%A7%E4%BC%9A%E8%AE%AE%E9%A2%98%E4%B8%8D%E9%94%99/"/>
    <id>http://riusksk.github.io/2019/02/22/今年的OffensiveCon大会议题不错/</id>
    <published>2019-02-22T13:15:48.000Z</published>
    <updated>2019-02-23T06:28:04.000Z</updated>
    
    <content type="html">&lt;p&gt;年前曾在微博上推荐过OffensiveCon 2019大会议题，议题列表与介绍可参见官网（&lt;a href=&quot;https://www.offensivecon.org/agenda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.offensivecon.org/agenda/&lt;/a&gt;），很多专注于漏洞挖掘与利用的干货分享，目前只有部分议题ppt公开，文末附打包下载链接（包含8个议题），包括ppt、paper和code。&lt;/p&gt;
&lt;p&gt;会议结束后，Twitter上赞声一片，议题质量很赞。&lt;/p&gt;
&lt;p&gt;本文主要聊聊已公开的一些议题，学习下思路。&lt;/p&gt;
&lt;h3 id=&quot;议题列表&quot;&gt;&lt;a href=&quot;#议题列表&quot; class=&quot;headerlink&quot; title=&quot;议题列表&quot;&gt;&lt;/a&gt;议题列表&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. Modern Source Fuzzing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. IPC You Outside the Sandbox: One bug to Rule the Chrome Broker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 3D Accelerated Exploitation &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. Bugs so Nice they Patched them Twice! A (Continuing)? Story About Failed Patches &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. Attacking Hardware Root of Trust from UEFI Firmware&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6. OSX XPC Revisited - 3rd Party Application Flaws&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7. Growing Hypervisor 0day with Hyperseed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8. Attacking Edge Through the JavaScript Just-In-Time compiler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9. Coverage-Guided USB Fuzzing with Syzkaller&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10. Updated Analysis of PatchGuard on Windows RS4: Is the Mouse Finally Caught?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11. iOS Dual Booting Demystified&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12. macOS: How to Gain Root with CVE-2018-4193 in &amp;lt; 10s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13. Reverse Engineering of Error-Correcting Codes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14. Glitch in the Matrix: Exploiting Bitcoin Hardware Wallets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15. Attack Surface of a Connected Vehicle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16. Bypass Windows Exploit Guard ASR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17. FuzzIL: Guided Fuzzing for JavaScript Engines&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Modern-Source-Fuzzing&quot;&gt;&lt;a href=&quot;#Modern-Source-Fuzzing&quot; class=&quot;headerlink&quot; title=&quot;Modern Source Fuzzing&quot;&gt;&lt;/a&gt;Modern Source Fuzzing&lt;/h3&gt;&lt;p&gt;这是作者Ned Willliamson在353c大会上的《Attack Chrome IPC》议题的扩展补充，我之前还写过&lt;a href=&quot;https://mp.weixin.qq.com/s/WrSZpqgq6gvZwEIqghqggg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《安全研究者的自我修养》&lt;/a&gt;一文，里面介绍的就是作者提及的二进制漏洞研究的学习思路。&lt;/p&gt;
&lt;p&gt;目前作者没公开这次会议的ppt，大家还是看353C的演讲视频吧：&lt;a href=&quot;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##IPC You Outside the Sandbox: One bug to Rule the Chrome Broker&lt;/p&gt;
&lt;p&gt;作者已经在github上公布此漏洞的利用代码hack2win-chrome，点击”阅读原文“可下载到。&lt;/p&gt;
&lt;p&gt;本议题讲的是Chrome沙盒逃逸漏洞，漏洞位于应用缓存（AppCache）子系统上，主要方便从本地读取数据进行离线浏览，访问速度更快，还能缓解服务器压力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g49kv5o5j30uu0gqjta.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;AppCache位于沙盒之外的高权限进程browser，沙盒内低权限的renderer进程通过发送IPC消息与browser进程交互的，当AppCache出漏洞时，就有可能逃逸出沙盒。&lt;/p&gt;
&lt;h4 id=&quot;漏洞成因&quot;&gt;&lt;a href=&quot;#漏洞成因&quot; class=&quot;headerlink&quot; title=&quot;漏洞成因&quot;&gt;&lt;/a&gt;漏洞成因&lt;/h4&gt;&lt;p&gt;这次的ppt写得比较模糊，没那么清楚，还是直接看patch diff：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g4jvylq6j30n409gab8.jpg&quot; alt=&quot;image-20190223095905435&quot;&gt;&lt;/p&gt;
&lt;p&gt;移动&lt;code&gt;CancelUpdate()&lt;/code&gt;函数到&lt;code&gt;newest_complete_cache_=nullptr;&lt;/code&gt;之后，直接看看CancelUpdate里面的逻辑：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g4mnl13hj31da0lf7co.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;在调用&lt;code&gt;AppCacheGroup::RemoveCache&lt;/code&gt;清除缓存时，&lt;code&gt;newest_complete_cache_&lt;/code&gt;指向的是被销毁的对象，所以后面才要把它置空，但在销毁之前调用了&lt;code&gt;CancelUpdate&lt;/code&gt; =&amp;gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;AppCacheUPdateJob::~AppCacheUpdateJob&lt;/code&gt; =&amp;gt; &lt;code&gt;AppCacheGroup::SetUpdateAppCacheStatus&lt;/code&gt; =&amp;gt; &lt;code&gt;AppCacheHost::OnupdateComplete&lt;/code&gt; =&amp;gt; &lt;/p&gt;
&lt;p&gt;&lt;code&gt;SetSwappableCache&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后的&lt;code&gt;SetSwappableCache&lt;/code&gt;用于设置新的交换缓存（swap cache），会引用到&lt;code&gt;newest_complete_cache_&lt;/code&gt;，而此时它还未被置NULL，导致出现Use After Free漏洞。&lt;/p&gt;
&lt;p&gt;####漏洞利用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;【泄露地址】&lt;/strong&gt;：使用与&lt;code&gt;AppCache&lt;/code&gt;对象大小相同的&lt;code&gt;net::CanonicalCookie&lt;/code&gt;对象来占用释放对象的内存，而&lt;code&gt;CanonicalCookie&lt;/code&gt;对象开头是个cookie名称，即字符串指针，再从浏览器中读取cookie信息来达到信息泄露的目的，从而拿到可控数据的堆地址绕过ASLR。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;【代码执行】&lt;/strong&gt;：使用与&lt;code&gt;AppCache&lt;/code&gt;对象大小相同的&lt;code&gt;Blob&lt;/code&gt;对象对占用释放内存，再伪造&lt;code&gt;AppCacheGroup&lt;/code&gt;对象，当它析构释放时，在&lt;code&gt;~AppCacheGroup&lt;/code&gt;中会调用到已被填充控制的虚函数指针，再结合ROP绕过DEP，从而达到代码执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整个过程还是需要自己动手调试一遍才比较清楚，估计足够调上几天了，国内似乎也没有一遍完整的文章分析过该漏洞的利用细节，期待有人分享。&lt;/p&gt;
&lt;h3 id=&quot;3D-Accelerated-Exploitation&quot;&gt;&lt;a href=&quot;#3D-Accelerated-Exploitation&quot; class=&quot;headerlink&quot; title=&quot;3D Accelerated Exploitation&quot;&gt;&lt;/a&gt;3D Accelerated Exploitation&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g92avay4j30q90epmyq.jpg&quot; alt=&quot;image-20190223123509759&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0g92kdcraj30qw0evmz6.jpg&quot; alt=&quot;image-20190223123527727&quot;&gt;&lt;/p&gt;
&lt;p&gt;该议题主要介绍VirsualBox 3D加速器的攻击面和漏洞利用，由于VBox是开源的，因此可以直接使用AFL 去Fuzzing，fuzz目标就是通过发送畸形chromium messages来触发漏洞。他们应该是自己写个构造发送消息的程序，输入文件即chromium messages内容，样本可能是收集550操作码的信息去构造，也可能通过hook去直接抓取真实数据作为样本，然后用 afl去跑。更具体的实现方式，作者也没细说。&lt;/p&gt;
&lt;p&gt;MWR Labs这几年经常曝光一些Pwn2Own级别的漏洞，分享很多经典文章，还开源了不少Fuzzer工具，连ppt都做得非常工整，具有独特风格，哪怕没logo，你看一眼都能猜出是他们写的。具备牛X的技能能力，又乐分享，这点是比较难得的。&lt;/p&gt;
&lt;h3 id=&quot;Attacking-Edge-Through-the-JavaScript-Just-In-Time-compiler&quot;&gt;&lt;a href=&quot;#Attacking-Edge-Through-the-JavaScript-Just-In-Time-compiler&quot; class=&quot;headerlink&quot; title=&quot;Attacking Edge Through the JavaScript Just-In-Time compiler&quot;&gt;&lt;/a&gt;Attacking Edge Through the JavaScript Just-In-Time compiler&lt;/h3&gt;&lt;p&gt;一直以来，chakra被曝的漏洞非常多，导致微软最终还是放弃了。&lt;/p&gt;
&lt;p&gt;从今年开始，微软将打算把Edge的Chakra引擎改用Google Chromium引擎，估计最近这两个月就会发布，以后就可能没什么人再搞Chakra内核了。&lt;/p&gt;
&lt;p&gt;这议题里面讲了很多chakra的js对象内存结构等基础知识，重点讲了JIT优化编译器的漏洞原理与利用技巧，整个ppt有120页，很多。&lt;/p&gt;
&lt;p&gt;我没搞过chakra，未来可能也用不上了，有兴趣的同学可以看下，作者把exploit代码也公布了，我已附在本文的打包资料里面。&lt;/p&gt;
&lt;h3 id=&quot;Coverage-Guided-USB-Fuzzing-with-Syzkaller&quot;&gt;&lt;a href=&quot;#Coverage-Guided-USB-Fuzzing-with-Syzkaller&quot; class=&quot;headerlink&quot; title=&quot;Coverage-Guided USB Fuzzing with Syzkaller&quot;&gt;&lt;/a&gt;Coverage-Guided USB Fuzzing with Syzkaller&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1g0g9s9xi19j30l30bxt9q.jpg&quot; alt=&quot;image-20190223130009940&quot;&gt;&lt;/p&gt;
&lt;p&gt;搞过Linux/Android内核漏洞挖掘的人，应该都知道Syzkaller这款神器，发现超过2500个内核bug，它是基于代码覆盖率+API调用模板来Fuzzing内核的工具，对于发现崩溃的漏洞，还能自动生成C代码帮助复现，是由Google的Dmitry Vyukov开发的，已在Github上开源多年（&lt;a href=&quot;https://github.com/google/syzkaller&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/syzkaller&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;这次作者用syzkaller fuzz USB驱动共发现了80+个bug，它先开启kcov去收集代码覆盖率信息，写了两个usb操作的描述模板（vusb.txt用来生成usb消息，vusb_ids.txt用于提取与USB设备驱动相匹配的USB ID列表），ppt里面有链接，所有的usb fuzzer代码都已经嵌入到syzkaller项目里面了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1g0ga2by0rlj30me0c9q4g.jpg&quot; alt=&quot;image-20190223130949191&quot;&gt;&lt;/p&gt;
&lt;p&gt;整个syzkaller的使用过程就是先去寻找内核的攻击面，然后构造api调用模板，剩下交由syzkaller基于代码覆盖驱动的方式去Fuzzing，有点类似api fuzzing。只是这里作者又写了个USB内核模块，方便通过用户层发送USB消息去测试。&lt;/p&gt;
&lt;p&gt;作者还专门搞了个树莓派来重现漏洞，演示通过USB去让Windows/Linux系统崩溃。&lt;/p&gt;
&lt;h3 id=&quot;FuzzIL-Guided-Fuzzing-for-JavaScript-Engines&quot;&gt;&lt;a href=&quot;#FuzzIL-Guided-Fuzzing-for-JavaScript-Engines&quot; class=&quot;headerlink&quot; title=&quot;FuzzIL: Guided Fuzzing for JavaScript Engines&quot;&gt;&lt;/a&gt;FuzzIL: Guided Fuzzing for JavaScript Engines&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1g0gbap9yltj30m40brwg6.jpg&quot; alt=&quot;image-20190223135223721&quot;&gt;&lt;/p&gt;
&lt;p&gt;这议题最大的亮点在于：自定义一套中间语言IL，通过IL可以翻译成JS代码，然后通过变异IL来生成JS代码，与以往基于JS语法模板生成代码的方式不同。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1g0gbd32purj30ll0aitai.jpg&quot; alt=&quot;image-20190223135445955&quot;&gt;&lt;/p&gt;
&lt;p&gt;直接通过一行行删除IL的方式来验证是否崩溃或产生新路径，以此用来精简样本。&lt;/p&gt;
&lt;p&gt;整个Fuzzing过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1g0gbmzq8rqj30l50c4wg5.jpg&quot; alt=&quot;image-20190223140416987&quot;&gt;&lt;/p&gt;
&lt;p&gt;作者未来会在github上开源（&lt;a href=&quot;https://github.com/googleprojectzero/fuzzilli&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/googleprojectzero/fuzzilli&lt;/a&gt;），拭目以待。&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;访问 &lt;a href=&quot;https://github.com/riusksk/SecConArchive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/riusksk/SecConArchive&lt;/a&gt;可获取议题的打包资料，除上述推荐的议题资料外，还有3个议题，包括”Bypass_Windows_Defender_ASR“、”macOS-How to Gain Root with CVE-2018-4193“，以及”OSX Privileged Helper Tool“，有兴趣的同学自行下载阅读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1g0gbyta5c9j307107oq3x.jpg&quot; alt=&quot;image-20190223141538809&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;年前曾在微博上推荐过OffensiveCon 2019大会议题，议题列表与介绍可参见官网（&lt;a href=&quot;https://www.offensivecon.org/agenda/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.of
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>winafl中基于插桩的覆盖率反馈原理</title>
    <link href="http://riusksk.github.io/2019/02/02/winafl%E4%B8%AD%E5%9F%BA%E4%BA%8E%E6%8F%92%E6%A1%A9%E7%9A%84%E8%A6%86%E7%9B%96%E7%8E%87%E5%8F%8D%E9%A6%88%E5%8E%9F%E7%90%86/"/>
    <id>http://riusksk.github.io/2019/02/02/winafl中基于插桩的覆盖率反馈原理/</id>
    <published>2019-02-02T09:07:54.000Z</published>
    <updated>2019-02-02T09:08:43.000Z</updated>
    
    <content type="html">&lt;p&gt;最近&lt;code&gt;winafl&lt;/code&gt;增加支持对&lt;code&gt;Intel PT&lt;/code&gt;的支持的，但是只支持&lt;code&gt;x64&lt;/code&gt;，且覆盖率计算不全，比如条件跳转等，所以它现在还是不如直接用插桩去hook的方式来得准确完整，这里主要想分析也是基于    &lt;code&gt;DynamoRIO&lt;/code&gt;插桩的覆盖率反馈原理。&lt;/p&gt;
&lt;p&gt;之前曾有人在《初识 Fuzzing 工具 WinAFL》（&lt;a href=&quot;https://paper.seebug.org/323/#32）中“3.2.2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://paper.seebug.org/323/#32）中“3.2.2&lt;/a&gt; 插桩模块”一节中简单分析过其插桩原理，但没有找到我想要的答案，因此只好自动动手分析下源码。&lt;/p&gt;
&lt;p&gt;比如，我想知道：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过循环调用fuzzing的目标函数来提高速度，但&lt;code&gt;DynamoRIO&lt;/code&gt;的覆盖率信息是如何同步给fuzzer主进程的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体是如何实现寄存器环境的记录与恢复，从而实现目标函数的不断循环？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;覆盖率信息是如何记录与分析的？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;覆盖率信息记录与分析原理&quot;&gt;&lt;a href=&quot;#覆盖率信息记录与分析原理&quot; class=&quot;headerlink&quot; title=&quot;覆盖率信息记录与分析原理&quot;&gt;&lt;/a&gt;覆盖率信息记录与分析原理&lt;/h4&gt;&lt;p&gt;第3个问题发现已经有人分析过&lt;code&gt;afl&lt;/code&gt;，可以参见这里《AFL内部实现细节小记》（&lt;a href=&quot;http://rk700.github.io/2017/12/28/afl-internals/），简单总结下&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://rk700.github.io/2017/12/28/afl-internals/），简单总结下&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AFL在编译源码时，为每个代码生成一个随机数，代表位置地址;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在二元组中记录分支跳转的源地址与目标地址，将两者异或的结果为该分支的key，保存每个分支的执行次数，用1字节来储存；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存分支的执行次数实际上是一张大小为64K的哈希表，位于共享内存中，方便target进程与fuzzer进程之间共享，对应的伪代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cur_location = &amp;lt;COMPILE_TIME_RANDOM&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shared_mem[cur_location ^ prev_location]++; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prev_location = cur_location &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fuzzer进程通过buckets哈希桶来归类这些分支执行次数，如下结构定义，左边为执行次数，右边为记录值trace_bits：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; u8 count_class_lookup8[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]           = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]           = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]           = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]           = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]     = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;]    = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;]   = &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;127&lt;/span&gt;]  = &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt; ... &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于是否触发新路径，主要通过计算各分支的trace_bits的hash值（算法：&lt;code&gt;u32 cksum **=** hash32(trace_bits, MAP_SIZE常量, HASH_CONST常量);&lt;/code&gt;）是否发生变化来实现的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;覆盖信息的传递原理&quot;&gt;&lt;a href=&quot;#覆盖信息的传递原理&quot; class=&quot;headerlink&quot; title=&quot;覆盖信息的传递原理&quot;&gt;&lt;/a&gt;覆盖信息的传递原理&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先在fuzzer进程中先创建命名管道，其中fuzzer_id为随机值：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//afl-fuzz.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pipe_name = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)alloc_printf(&lt;span class=&quot;string&quot;&gt;&quot;\\\\.\\pipe\\afl_pipe_%s&quot;&lt;/span&gt;, fuzzer_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; pipe_handle = CreateNamedPipe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pipe_name,                &lt;span class=&quot;comment&quot;&gt;// pipe name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PIPE_ACCESS_DUPLEX |     &lt;span class=&quot;comment&quot;&gt;// read/write access &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FILE_FLAG_OVERLAPPED,    &lt;span class=&quot;comment&quot;&gt;// overlapped mode &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,                        &lt;span class=&quot;comment&quot;&gt;// max. instances&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;,                      &lt;span class=&quot;comment&quot;&gt;// output buffer size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;512&lt;/span&gt;,                      &lt;span class=&quot;comment&quot;&gt;// input buffer size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;number&quot;&gt;20000&lt;/span&gt;,                    &lt;span class=&quot;comment&quot;&gt;// client time-out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);                    &lt;span class=&quot;comment&quot;&gt;// default security attribute&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建drrun进程去运行目标程序并Hook，在childpid_(%fuzzer_id%).txt的文件中记录子进程id，即目标进程ID，然后等待管道连接，并通过读取上述txt文件以获取目标进程id，主要用来后面超时中断进程的：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//afl-fuzz.c    &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pidfile = alloc_printf(&lt;span class=&quot;string&quot;&gt;&quot;childpid_%s.txt&quot;&lt;/span&gt;, fuzzer_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (persist_dr_cache) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cmd = alloc_printf(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;&quot;%s\\drrun.exe -pidfile %s -no_follow_children -persist -persist_dir \&quot;%s\\drcache\&quot; -c winafl.dll %s -fuzzer_id %s -drpersist -- %s&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dynamorio_dir, pidfile, out_dir, client_params, fuzzer_id, target_cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cmd = alloc_printf(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;&quot;%s\\drrun.exe -pidfile %s -no_follow_children -c winafl.dll %s -fuzzer_id %s -- %s&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dynamorio_dir, pidfile, client_params, fuzzer_id, target_cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!CreateProcess(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, cmd, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, inherit_handles, CREATE_SUSPENDED, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &amp;amp;si, &amp;amp;pi)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FATAL(&lt;span class=&quot;string&quot;&gt;&quot;CreateProcess failed, GLE=%d.\n&quot;&lt;/span&gt;, GetLastError());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!OverlappedConnectNamedPipe(pipe_handle, &amp;amp;pipe_overlapped)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      FATAL(&lt;span class=&quot;string&quot;&gt;&quot;ConnectNamedPipe failed, GLE=%d.\n&quot;&lt;/span&gt;, GetLastError());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  watchdog_enabled = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(drioless == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//by the time pipe has connected the pidfile must have been created&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fp = fopen(pidfile, &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!fp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      FATAL(&lt;span class=&quot;string&quot;&gt;&quot;Error opening pidfile.txt&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fseek(fp,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,SEEK_END);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pidsize = ftell(fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fseek(fp,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,SEEK_SET);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buf = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(pidsize+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fread(buf, pidsize, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buf[pidsize] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose(fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    remove(pidfile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child_pid = atoi(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ck_free(pidfile);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child_pid = pi.dwProcessId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在插桩模块winafl.dll中打开前面创建的命名管道，然后通过管道与fuzzer主进程进行交互：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//winafl.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setup_pipe() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pipe = CreateFile(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         options.pipe_name,   &lt;span class=&quot;comment&quot;&gt;// pipe name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         GENERIC_READ |  &lt;span class=&quot;comment&quot;&gt;// read and write access&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         GENERIC_WRITE,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,              &lt;span class=&quot;comment&quot;&gt;// no sharing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,           &lt;span class=&quot;comment&quot;&gt;// default security attributes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         OPEN_EXISTING,  &lt;span class=&quot;comment&quot;&gt;// opens existing pipe&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,              &lt;span class=&quot;comment&quot;&gt;// default attributes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);          &lt;span class=&quot;comment&quot;&gt;// no template file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pipe == INVALID_HANDLE_VALUE) DR_ASSERT_MSG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;error connecting to pipe&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReadCommandFromPipe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DWORD num_read;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ReadFile(pipe, &amp;amp;result, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;num_read, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WriteCommandToPipe&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; cmd)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	DWORD num_written;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	WriteFile(pipe, &amp;amp;cmd, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;num_written, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当插桩模块winafl.dll监测到程序首次运行至目标函数入口时，&lt;code&gt;pre_fuzz_handler&lt;/code&gt;函数会被执行，然后通过管道写入’P’命令，代表开始进入目标函数，afl-fuzz.exe进程收到命令后，会向目标进程写入管道命令’F’，并监测超时时间和循环调用次数。afl-fuzz.exe与目标进程正是通过读写管道命令来交互的，主要有’F’（退出目标函数）、’P’（进入目标函数）、’K’（超时中断进程）、’C’（崩溃）、’Q’（退出进程）。覆盖信息通过文件映射方法（内存共享）写入&lt;code&gt;winafl_data.afl_area&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//winafl.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pre_fuzz_handler(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *wrapcxt, INOUT &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **user_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!options.debug_mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		WriteCommandToPipe(&lt;span class=&quot;string&quot;&gt;&#39;P&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		command = ReadCommandFromPipe();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(command != &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(command == &lt;span class=&quot;string&quot;&gt;&#39;Q&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dr_exit_process(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                DR_ASSERT_MSG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;unrecognized command received over pipe&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        debug_data.pre_hanlder_called++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr_fprintf(winafl_data.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;In pre_fuzz_handler\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(winafl_data.afl_area, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, MAP_SIZE);	&lt;span class=&quot;comment&quot;&gt;// 用于存储覆盖率信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(options.coverage_kind == COVERAGE_EDGE || options.thread_coverage) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **thread_data = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; **)drmgr_get_tls_field(drcontext, winafl_tls_field);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        thread_data[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        thread_data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = winafl_data.afl_area;	&lt;span class=&quot;comment&quot;&gt;//如果开启-thread_coverage选项，则会将覆盖率信息写入线程TLS中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//winafl.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setup_shmem() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   HANDLE map_file;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   map_file = OpenFileMapping(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   FILE_MAP_ALL_ACCESS,   &lt;span class=&quot;comment&quot;&gt;// read/write access&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   FALSE,                 &lt;span class=&quot;comment&quot;&gt;// do not inherit the name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   options.shm_name);     &lt;span class=&quot;comment&quot;&gt;// name of mapping object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (map_file == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) DR_ASSERT_MSG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;error accesing shared memory&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   winafl_data.afl_area = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *) MapViewOfFile(map_file, &lt;span class=&quot;comment&quot;&gt;// handle to map object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               FILE_MAP_ALL_ACCESS,  &lt;span class=&quot;comment&quot;&gt;// read/write permission&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               MAP_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (winafl_data.afl_area == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) DR_ASSERT_MSG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;error accesing shared memory&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;篡改目标函数循环调用的原理&quot;&gt;&lt;a href=&quot;#篡改目标函数循环调用的原理&quot; class=&quot;headerlink&quot; title=&quot;篡改目标函数循环调用的原理&quot;&gt;&lt;/a&gt;篡改目标函数循环调用的原理&lt;/h3&gt;&lt;p&gt;此步的关键就在于进入目标函数前调用的&lt;code&gt;pre_fuzz_handler&lt;/code&gt;函数，以及函数退出后调用的&lt;code&gt;post_fuzz_handler&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;进入&lt;code&gt;pre_fuzz_handler&lt;/code&gt;函数时，winafl.dll会先获取以下信息&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app_pc target_to_fuzz = drwrap_get_func(wrapcxt);	&lt;span class=&quot;comment&quot;&gt;//获取目标函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dr_mcontext_t&lt;/span&gt; *mc = drwrap_get_mcontext_ex(wrapcxt, DR_MC_ALL);	&lt;span class=&quot;comment&quot;&gt;//获取目标函数当前内存上下文信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drcontext = drwrap_get_drcontext(wrapcxt);	&lt;span class=&quot;comment&quot;&gt;//获取DynamoRIO上下文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fuzz_target.xsp = mc-&amp;gt;xsp;	&lt;span class=&quot;comment&quot;&gt;// 保存栈指针,xsp是各平台下的通用标记变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fuzz_target.func_pc = target_to_fuzz;	&lt;span class=&quot;comment&quot;&gt;// 目标函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中内存上下文信息支持各平台的寄存器记录：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;dr_mcontext_t&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The size of this structure.  This field must be set prior to filling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * in the fields to support forward compatibility.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The valid fields of this structure.  This field must be set prior to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * filling in the fields.  For input requests (dr_get_mcontext()), this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * indicates which fields should be written.  Writing the multimedia fields&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * frequently can incur a performance hit.  For output requests&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * (dr_set_mcontext() and dr_redirect_execution()), this indicates which&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * fields will be copied to the actual context.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dr_mcontext_flags_t&lt;/span&gt; flags;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; AARCHXX&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r0;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r0 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r1;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r1 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r2;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r2 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r3;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r3 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r4;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r4 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r5;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r5 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r6;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r6 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r7;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r7 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r8;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r8 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r9;   &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r9 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r10;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r10 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r11;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r11 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r12;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r12 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; X64 &lt;span class=&quot;comment&quot;&gt;/* 64-bit */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r13;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r13 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r14;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r14 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r15;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r15 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r16;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r16 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r17;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r17 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r18;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r18 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r19;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r19 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r20;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r20 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r21;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r21 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r22;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r22 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r23;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r23 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r24;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r24 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r25;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r25 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r26;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r26 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r27;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r27 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r28;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r28 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r29;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r29 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r30; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r30 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; lr;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The link register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for r30/lr register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r31; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r31 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; sp;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The stack pointer register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xsp; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for the stack pointer register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for r31/sp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The program counter.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * \note This field is not always set or read by all API routines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte *pc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint xflags; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for condition flags. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            uint nzcv; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; Condition flags (status register). */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            uint fpcr; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; Floating-Point Control Register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            uint fpsr; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; Floating-Point Status Register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; AArch64 flag registers. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for flag registers. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 32-bit */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r13; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r13 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; sp;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The stack pointer register.*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xsp; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for the stack pointer register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for r13/sp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r14; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r14 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; lr;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The link register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for r14/lr register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The anonymous union of alternative names for r15/pc register.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * \note This field is not always set or read by all API routines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r15; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r15 register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte *pc;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The program counter. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint xflags; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full APSR register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint apsr; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The application program status registers in AArch32. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uint cpsr; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The current program status registers in AArch32. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for apsr/cpsr register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 64/32-bit */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The SIMD registers.  We would probably be ok if we did not preserve the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * callee-saved registers (q4-q7 == d8-d15) but to be safe we preserve them&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * all.  We do not need anything more than word alignment for OP_vldm/OP_vstm,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * and dr_simd_t has no fields larger than 32 bits, so we have no padding.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dr_simd_t&lt;/span&gt; simd[NUM_SIMD_SLOTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* X86 */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xdi; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rdi/edi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rdi, edi); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rdi/edi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rdi/edi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xsi; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rsi/esi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rsi, esi); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rsi/esi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rsi/esi register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xbp; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rbp/ebp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rbp, ebp); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rbp/ebp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rbp/ebp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xsp; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rsp/esp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rsp, esp); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rsp/esp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rsp/esp register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xbx; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rbx/ebx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rbx, ebx); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rbx/ebx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rbx/ebx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xdx; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rdx/edx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rdx, edx); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rdx/edx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rdx/edx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xcx; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rcx/ecx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rcx, ecx); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rcx/ecx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rcx/ecx register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xax; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rax/eax register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rax, eax); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rax/eax register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rax/eax register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; X64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r8;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r8 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r9;  &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r9 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r10; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r10 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r11; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r11 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r12; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r12 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r13; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r13 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r14; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r14 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; r15; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The r15 register. \note For 64-bit DR builds only. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; xflags; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                           full rflags/eflags register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;reg_t&lt;/span&gt; IF_X64_ELSE(rflags, eflags); &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                                rflags/eflags register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The anonymous union of alternative names for rflags/eflags register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Anonymous union of alternative names for the program counter /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * instruction pointer (eip/rip). \note This field is not always set or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * read by all API routines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte *xip; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent name for full rip/eip register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        byte *pc; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-independent alt name for full rip/eip register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;byte *&lt;span class=&quot;title&quot;&gt;IF_X64_ELSE&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(rip, eip)&lt;/span&gt;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The platform-dependent name for&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;                                          rip/eip register. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    byte padding[PRE_XMM_PADDING]; &lt;span class=&quot;comment&quot;&gt;/**&amp;lt; The padding to get ymm field 32-byte aligned. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * The SSE registers xmm0-xmm5 (-xmm15 on Linux) are volatile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * (caller-saved) for 64-bit and WOW64, and are actually zeroed out on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Windows system calls.  These fields are ignored for 32-bit processes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * that are not WOW64, or if the underlying processor does not support&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * SSE.  Use dr_mcontext_xmm_fields_valid() to determine whether the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * fields are valid.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * When the fields are valid, on processors with AVX enabled (i.e.,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * proc_has_feature(FEATURE_AVX) returns true), these fields will&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * contain the full ymm register values; otherwise, the top 128&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * bits of each slot will be undefined.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dr_ymm_t&lt;/span&gt; ymm[NUM_SIMD_SLOTS];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ARM/X86 */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;dr_mcontext_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来就是获取和设置fuzzed的目标函数参数：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//save or restore arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!options.no_loop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (fuzz_target.iteration == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; options.num_fuz_args; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            options.func_args[i] = drwrap_get_arg(wrapcxt, i);	&lt;span class=&quot;comment&quot;&gt;//首次运行先获取运行参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; options.num_fuz_args; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            drwrap_set_arg(wrapcxt, i, options.func_args[i]);	&lt;span class=&quot;comment&quot;&gt;//设置运行参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当目标函数退出后，执行&lt;code&gt;post_fuzz_handler&lt;/code&gt;函数，会恢复栈顶指针和pc地址，以此实现目标函数的循环调用：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;post_fuzz_handler(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *wrapcxt, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *user_data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dr_mcontext_t&lt;/span&gt; *mc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mc = drwrap_get_mcontext(wrapcxt);	&lt;span class=&quot;comment&quot;&gt;//获取上下文信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!options.debug_mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		WriteCommandToPipe(&lt;span class=&quot;string&quot;&gt;&#39;K&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        debug_data.post_handler_called++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr_fprintf(winafl_data.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;In post_fuzz_handler\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* We don&#39;t need to reload context in case of network-based fuzzing. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (options.no_loop)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;	&lt;span class=&quot;comment&quot;&gt;//网络型Fuzzing无需重载上下文信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//超过循环次数就退出进程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fuzz_target.iteration++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fuzz_target.iteration == options.fuzz_iterations) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dr_exit_process(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mc-&amp;gt;xsp = fuzz_target.xsp;			&lt;span class=&quot;comment&quot;&gt;//恢复栈顶指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mc-&amp;gt;pc = fuzz_target.func_pc;		&lt;span class=&quot;comment&quot;&gt;//篡改pc地址加原目标函数地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	drwrap_redirect_execution(wrapcxt);	&lt;span class=&quot;comment&quot;&gt;//篡改执行流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;总结下整个&lt;code&gt;winafl&lt;/code&gt;执行流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;afl-fuzz.exe通过创建命名管道与内存映射来实现与目标进程交互，其中管道用来发送和接收命令相互操作对方进程，内存映射主要用来记录覆盖率信息；&lt;/li&gt;
&lt;li&gt;覆盖率记录主要通过&lt;code&gt;drmgr_register_bb_instrumentation_event&lt;/code&gt;去设置BB执行的回调函数，通过&lt;code&gt;instrument_bb_coverage&lt;/code&gt;或者&lt;code&gt;instrument_edge_coverage&lt;/code&gt;来记录覆盖率情况，如果发现新的执行路径，就将样本放入队列目录中，用于后续文件变异，以提高代码覆盖率；&lt;/li&gt;
&lt;li&gt;目标进程执行到目标函数后，会调用&lt;code&gt;pre_fuzz_handler&lt;/code&gt;来存储上下文信息，包括寄存器和运行参数；&lt;/li&gt;
&lt;li&gt;目标函数退出后，会调用&lt;code&gt;post_fuzz_handler&lt;/code&gt;函数，记录恢复上下文信息，以执行回原目标函数，又回到第2步；&lt;/li&gt;
&lt;li&gt;目录函数运行次数达到指定循环调用次数时，会中断进程退出。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近&lt;code&gt;winafl&lt;/code&gt;增加支持对&lt;code&gt;Intel PT&lt;/code&gt;的支持的，但是只支持&lt;code&gt;x64&lt;/code&gt;，且覆盖率计算不全，比如条件跳转等，所以它现在还是不如直接用插桩去hook的方式来得准确完整，这里主要想分析也是基于    &lt;c
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="winafl" scheme="http://riusksk.github.io/tags/winafl/"/>
    
  </entry>
  
  <entry>
    <title>聊聊那些黑客小说</title>
    <link href="http://riusksk.github.io/2019/01/27/%E8%81%8A%E8%81%8A%E9%82%A3%E4%BA%9B%E9%BB%91%E5%AE%A2%E5%B0%8F%E8%AF%B4/"/>
    <id>http://riusksk.github.io/2019/01/27/聊聊那些黑客小说/</id>
    <published>2019-01-27T02:24:03.000Z</published>
    <updated>2019-01-27T06:18:10.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;系统宕，&lt;br&gt;资料泄，&lt;br&gt;挂马黑站何时了？&lt;br&gt;安全知多少！&lt;br&gt;告警昨夜又响起，&lt;br&gt;往事不堪回首月明中。&lt;br&gt;漏洞应犹在，&lt;br&gt;只是域名改。&lt;br&gt;问君能有几多愁？&lt;br&gt;恰似行行代码错误留。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;黑客小说：培养对信息安全的兴趣&quot;&gt;&lt;a href=&quot;#黑客小说：培养对信息安全的兴趣&quot; class=&quot;headerlink&quot; title=&quot;黑客小说：培养对信息安全的兴趣&quot;&gt;&lt;/a&gt;黑客小说：培养对信息安全的兴趣&lt;/h3&gt;&lt;p&gt;之前在《漏洞战争》的前言里面有提到，鄙人初入象牙塔之时，曾看过多本黑客小说，包括《黑客传说》、《地狱黑客》（后改名为《禁区之门》，参考凯文·米特尼克事迹写的，后来又出了第2部，但好像没写完）、《指间的黑客》等等，后来也因此对安全产生兴趣，入了这行道。&lt;/p&gt;
&lt;p&gt;但，道归道，兴趣归兴趣！&lt;/p&gt;
&lt;p&gt;因为曾有多少人，来了兴趣多年，却未曾自学过。&lt;/p&gt;
&lt;p&gt;“我对安全很感兴趣，求师傅教教我！”这种老套路的提问，大家见得还少吗？&lt;/p&gt;
&lt;p&gt;正如许多人宁愿被动受苦，也不愿主动吃苦学习一样，这个问题在知乎上也曾被热烈讨论过。被动受苦大多不用多动脑，久而久之，身体也会慢慢地适应，也就逐渐被生活、被制度所驯化。&lt;/p&gt;
&lt;p&gt;不过，此处想说的重点是，黑客小说可以培养人们对信息安全的兴趣，而学习的过程本身就是孤独单调的，如有兴趣相伴，则更易独行久远！&lt;/p&gt;
&lt;h3 id=&quot;行业人写小说：有始无终，多半夭折&quot;&gt;&lt;a href=&quot;#行业人写小说：有始无终，多半夭折&quot; class=&quot;headerlink&quot; title=&quot;行业人写小说：有始无终，多半夭折&quot;&gt;&lt;/a&gt;行业人写小说：有始无终，多半夭折&lt;/h3&gt;&lt;p&gt;安全圈里面其实也有一些人写过黑客小说，不乏某些知名人士，但基本上都是开了个头，却没多久就夭折收场。反正，我是没见过有人写完出版的。&lt;/p&gt;
&lt;p&gt;于是，我上Google搜索了下起点网，通过一些安全专业名词进行搜索，找到几部相关小说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;　　“第一节操作系统原理、第二节系统及命令详解、第三节溢出漏洞原理、第四节web原理、第五节http协议、tcp/ip协议第六节sql注入原理、上传漏洞、XSS、CSRF……”                           &lt;/p&gt;
&lt;p&gt;​                                                                          ——《别说我是黑客》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;　　过了十多分钟，jsky的界面左侧刷出来许多asp文件和几个目录。右栏则是标注着绿色和红色叹号的几列英文。&lt;br&gt;　　看到扫描结果出来，杨风面带微笑进行下一步操作。他的运气不错，得到了xss与sqlinjection漏洞，这是网站暴露出来的跨站脚本漏洞和sql注入漏洞。&lt;br&gt;　　杨风转到育民高中主页，随手选取了一个注入地址，提交上引号。&lt;br&gt;　　返回错误。&lt;br&gt;　　接着提交and1=1语句。&lt;br&gt;　　返回正常。&lt;br&gt;　　继续提交and1=2语句。&lt;br&gt;　　返回错误。&lt;br&gt;　　杨风做这两步，主要是测试网站程序设计者是否在其中过滤了关键字，如果过滤就不能被注入。&lt;/p&gt;
&lt;p&gt;​                                                                                ——《黑客记事本》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;   ​        “尊敬的孙诚先生，请允许我对你和你的团队–塞伯坦工作室致以敬意。我们的检测人员已经验证了你所寄过来的数据，并证实了ios漏洞的存在，在对你们表示感谢的同时，Zerodium会按照约定，向你的团队支付共计五万四千美元的报酬，并希望你们能尽快将后续数据补完。在邮件中，你们提到找到了ios的两处极为隐秘的高危漏洞，Zerodium上下都对此非常感兴趣。希望能够尽快收到你的回复，报酬方面请不用担心，Zerodium是一个非常有信誉的平台！”&lt;/p&gt;
&lt;p&gt;   ​                                                                      ——《从变形金刚开始》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;   “我明白了，灵根这个电源，就相当于是有着固定编码的反编译器，每个灵根都有一个固定编码，就是所谓的灵根属性。灵根可以把跟自己编码一样的灵气团，进行逆向反编译，把编译好的灵气团分解成单纯由0和1构成的信息流，就是所谓的灵力！”&lt;/p&gt;
&lt;p&gt;   ​                                                                       ——《程序员修真之路》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从教你用jsky黑站（PS：为啥不推荐wvs呢），到黑客穿越、程序员修仙等，各种奇思妙想，在网络小说领域也算是另类的存在。&lt;/p&gt;
&lt;p&gt;但是从这些专业名词看，作者即使不是安全圈的，至少也是IT技术行业的，对一些常见的安全事件、技术名词都比较了解。&lt;/p&gt;
&lt;p&gt;文学与IT技术本身就是两个不同的领域，要同时兼顾就有一定难度。如果算程序员里面写的小说，比较火的，应该是那本《疯狂的程序员》吧！&lt;/p&gt;
&lt;h3 id=&quot;懵懂之美：似懂非懂才是最大的乐趣&quot;&gt;&lt;a href=&quot;#懵懂之美：似懂非懂才是最大的乐趣&quot; class=&quot;headerlink&quot; title=&quot;懵懂之美：似懂非懂才是最大的乐趣&quot;&gt;&lt;/a&gt;懵懂之美：似懂非懂才是最大的乐趣&lt;/h3&gt;&lt;p&gt;我已经很久没看黑客小说，尤其是入了行之后，就更不看了。&lt;/p&gt;
&lt;p&gt;如果要推荐的话，还是开头提到的那3本小说：《黑客传说》、《禁区之门》、《指间的黑客》，不过那是我大学时的口味了，现在重新看也不一定就如当初那般喜欢。&lt;/p&gt;
&lt;p&gt;因为当你对安全行业熟悉后，再去看这些小说的时候，可能就容易较真，少了些许乐趣。&lt;/p&gt;
&lt;p&gt;我当初看上面的小说的时候，其实也还没入门安全，所以看得特别起劲。&lt;/p&gt;
&lt;p&gt;所以，如果要看这类小说，就把那些行业知识都抛诸脑后，享受那当初的懵懂之美，才是读小说的乐趣所在。&lt;/p&gt;
&lt;h3 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h3&gt;&lt;p&gt;也许是性格使然，在文字世界里，鄙人老喜欢委婉地批判人和事（俗称：骂人）。不过文学世界里，一千个读者就有一千个哈姆雷特，应该支持下这种多元文化。不然就像娱乐圈里，谁演孙悟空，都要被六小龄童骂一般，少了胸怀，甚至阻碍了行业发展。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;系统宕，&lt;br&gt;资料泄，&lt;br&gt;挂马黑站何时了？&lt;br&gt;安全知多少！&lt;br&gt;告警昨夜又响起，&lt;br&gt;往事不堪回首月明中。&lt;br&gt;漏洞应犹在，&lt;br&gt;只是域名改。&lt;br&gt;问君能有几多愁？&lt;br&gt;恰似行行代码错误留。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>安全研究者的自我修养（续）</title>
    <link href="http://riusksk.github.io/2019/01/12/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>http://riusksk.github.io/2019/01/12/安全研究者的自我修养（续）/</id>
    <published>2019-01-12T05:17:58.000Z</published>
    <updated>2019-01-12T09:23:54.000Z</updated>
    
    <content type="html">&lt;p&gt;接上篇继续聊安全研究者的自我修养，上篇重点讲技术修炼，本篇聊聊行业现象、谈谈沉淀、情怀等等。&lt;/p&gt;
&lt;h3 id=&quot;11、工具与方法论沉淀&quot;&gt;&lt;a href=&quot;#11、工具与方法论沉淀&quot; class=&quot;headerlink&quot; title=&quot;11、工具与方法论沉淀&quot;&gt;&lt;/a&gt;11、工具与方法论沉淀&lt;/h3&gt;&lt;p&gt;虽说代码审计是项必备技能，但终究是项体力活。&lt;/p&gt;
&lt;p&gt;有些漏洞（比如逻辑漏洞）可能就需要人工审计，但也有不少漏洞是可以自动化Fuzzing，一些能自动化或半自动化实现的，尽量写程序自动化。&lt;/p&gt;
&lt;p&gt;因为，纯人工审计终究熬不过年纪，熬不过团队人员的离散变迁，熬不过互联网的快速发展……&lt;/p&gt;
&lt;p&gt;比如，2012年刚开始写《漏洞战争》时，单身一人，从早上8点多起床吃饭，然后开始调代码、看代码，一直奋战到晚上12点，身体无压力。近7年过去了，现在要是这么折腾，身体就要散架了……&lt;/p&gt;
&lt;p&gt;比如，团队里的人分工做不同领域的代码审计，若无工具和方法论沉淀，那么有人走的话，此人对应的领域可能就无法持续产出；若有新人加入，代码审计的技能又不好传承，很多得自己重头来。所以，一直觉得，好的团队应该是，即使人员离散变迁，依然能够独立运作、持续产出的。&lt;/p&gt;
&lt;p&gt;比如，Linux内核在2018年净增87万行代码，很多类似复杂庞大的项目，看代码有时看都看不过来，一般都是针对性地挑模块作代码审计。&lt;/p&gt;
&lt;p&gt;比如，Fuzzer开发里面就有很多共用功能是可以直接做成框架沉淀下来，文件变异、崩溃监控、样本去重精简等等，很多时候有个新的攻击面需要测试，就可以直接在框架的基础上写fuzzer，将会高效很多。下文提到的一个IE漏洞挖掘案例就是基于这思路挖到的。&lt;/p&gt;
&lt;p&gt;我曾经想开发两个漏洞挖掘系统，一个二进制，一个Web，名字都想好了，合称”&lt;strong&gt;冰弓玄箭&lt;/strong&gt;“，但业余一直都没什么时间开发，仅写了个界面，希望2019年能够完成：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fz3shymb6cj30z90g2q9e.jpg&quot; alt=&quot;image-20190112143451515&quot;&gt;&lt;/p&gt;
&lt;p&gt;”冰弓“的Logo直接用的是“破甲弓”，感觉很酷……&lt;/p&gt;
&lt;p&gt;再说说方法论，这词虽有点虚，但其实本质上就是一种技术方法的总结而已。&lt;/p&gt;
&lt;p&gt;比如，渗透测试的时候，总有些人每次都能搞到RCE，无论啥网站，完全摆脱“随机挖洞”的命运。多数情况下，他们都会有一套自己测试方法，或者将一些经验转换成工具，测试时就拿自己的工具和以往总结的方法论开搞。&lt;/p&gt;
&lt;p&gt;比如，STRIDE威胁建模本身就是一套方法论，一套简单的风险助记符，当然我这里不是说安全研究要用它，只是举个方法论的例子，它也没有那么万能。&lt;/p&gt;
&lt;p&gt;写这么多，总结起来就一句话：多总结，多沉淀！&lt;/p&gt;
&lt;h3 id=&quot;12、漏洞研究风向标：安全公告&quot;&gt;&lt;a href=&quot;#12、漏洞研究风向标：安全公告&quot; class=&quot;headerlink&quot; title=&quot;12、漏洞研究风向标：安全公告&quot;&gt;&lt;/a&gt;12、漏洞研究风向标：安全公告&lt;/h3&gt;&lt;p&gt;如果大家有关注四大厂商（Google、Microsoft、Apple、Adobe）的安全公告的话，会发现有段时间会出现很多类似漏洞的公告，出现一个新的攻击面之后，一帮研究人员就蜂捅而上狂刷一波。&lt;/p&gt;
&lt;p&gt;这种情况一向是先下手为强，而上文提到的工具和方法论就更显得尤为重要了，否则最后都只能捡剩的。&lt;/p&gt;
&lt;p&gt;比如本周 Microsoft 安全公告出来后，我仔细分析了下，然后下班回家写了个Fuzzer，挂着跑了一天，出来个Crash，再用几分钟成功构造出PoC，实现IE浏览器的远程代码执行，可见也是个品相极佳的神洞：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fz3u7wx6a8j30jw0bvjsf.jpg&quot; alt=&quot;image-20190112153428430&quot;&gt;&lt;/p&gt;
&lt;p&gt;但不幸的是，我打了1月的补丁后，发现修复了，成功“撞洞”，真的是欲哭无泪……&lt;/p&gt;
&lt;p&gt;但至少证明，通过安全公告寻找新的攻击面，然后挖掘一些类似漏洞，一直是一种高效的漏洞研究方式。&lt;/p&gt;
&lt;h3 id=&quot;13、老一辈研究者都去哪儿了？&quot;&gt;&lt;a href=&quot;#13、老一辈研究者都去哪儿了？&quot; class=&quot;headerlink&quot; title=&quot;13、老一辈研究者都去哪儿了？&quot;&gt;&lt;/a&gt;13、老一辈研究者都去哪儿了？&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fz3vtt20n8j30hs0sn428.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近腾讯AILab张潼离职的事传得很火，还有之前各大厂聘请的AI科学家陆续辞职，回归学术界，很多人因此唱起科学家之于科技公司的无用论，主要有以下几点原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;研究成果无法落地为产品&lt;/strong&gt;：做安全研究也是如此，很多事情是无法落地的，圈内很多研究团队都是拿漏洞来打比赛赚影响力，真正能实现为公司营利的（打比赛赚奖金的忽略不计，因为那些都不够给研究者们的工资），我只知道有1个研究团队/实验室今年营利了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;长期无产出，KPI压力大&lt;/strong&gt;：研究了很长时间，最后仍一无所获，那KPI咋办、PPT怎么写、晋级怎么答辩。安全行业有句老话来形容安全研究工作，叫“三年不开锅，开锅吃三年”，但多数个人和企业都等不到三年。之前同事说王小云为何能破解出MD5，是因为她在学校里很长时间没搞出东西的时候，领导没找她麻烦，没有KPI压力，以致能够长期专注于此。具体原因我不确定，但学术界自然是没有企业有这般KPI压力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务数据不共享&lt;/strong&gt;：业务部门的产品数据基本不太可能共享给实验室作研究的，一般都是实验室以SDK的形式提供给业务用，数据由业务自主控制。这种情况对于安全研究的影响相对较少一些。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;头两点是多数安全研究者的困境，也跟圈内同行讨论过，下面聊聊这帮老一代“知青”最后都去哪儿了？这里我主要总结一些圈内人的应对方法（其实多数都是转型），具体不作点评，总结为主，也欢迎私信讨论（新注册的公众号已不允许留言）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;坚持研究&lt;/strong&gt;：这帮人主要还是那些研究能力较强的，且有一定研究成果的人，围观下各大实验室就知道个大概，不多说；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转型安全产品开发与运营&lt;/strong&gt;：有产品就能解决落地问题，帮助企业解决实际问题，有不少人走这条道，去做威胁情报系统、漏洞扫描器、WAF、云安全产品等等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转型业务安全&lt;/strong&gt;：跟研究工作差异较大，因为业务安全的主要问题很多时候并非漏洞，而是跟业务产品相关的黑灰产对抗等等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自由研究者&lt;/strong&gt;：国外很多此类研究者，靠拿漏洞赏金过活，俗称“赏金猎人”，国内相对少一些，也有一些国内自由研究者后来又进企业做研究的，这里讲的几种转型都可以来回转换，有些人就干过。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创业&lt;/strong&gt;：这里包括安全行业内的创业，也包括那些开淘宝店、奶茶店、服装生意、卖水果的……&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;14、个人终究干不过团队&quot;&gt;&lt;a href=&quot;#14、个人终究干不过团队&quot; class=&quot;headerlink&quot; title=&quot;14、个人终究干不过团队&quot;&gt;&lt;/a&gt;14、个人终究干不过团队&lt;/h3&gt;&lt;p&gt;有时想搞的研究太多了，但发现一个人根本搞不过来，需要多人协作才可能完成。但需要多人在研究领域上有交集，否则拉在一块也是各搞各的。&lt;/p&gt;
&lt;p&gt;前篇第7点讲到“进入研究者团队或社区，互相学习”，也是一大影响因素，互相学习也是一种提高效率和产出的方式。&lt;/p&gt;
&lt;p&gt;算了，不多说了！&lt;/p&gt;
&lt;h3 id=&quot;后话&quot;&gt;&lt;a href=&quot;#后话&quot; class=&quot;headerlink&quot; title=&quot;后话&quot;&gt;&lt;/a&gt;后话&lt;/h3&gt;&lt;p&gt;这次真的结束了，没有续篇了。&lt;/p&gt;
&lt;p&gt;思考了很多，总结了很多，有些也是写了删，删了写。&lt;/p&gt;
&lt;p&gt;安全研究领域一直也没人写过这些，出来唠叨几句，也欢迎大家私信讨论。&lt;/p&gt;
&lt;p&gt;最后奉一首酒桌上的《苦行僧》结束本话题，听过这首歌很多个版本，包括原唱，但终究还是觉得视频里这位老哥唱得更具江湖气、更具情感、更具感染力……旁边一老哥听着听着都偷偷抹泪了！&lt;/p&gt;
&lt;p&gt;之所以点这首歌，是因为：&lt;strong&gt;每一个研究者都是独立自行的苦行僧！&lt;/strong&gt;&lt;/p&gt;
&lt;video id=&quot;video&quot; controls preload=&quot;none&quot; poster=&quot;https://pic1.zhimg.com/v2-b1b3fa77c0d2ad60c2322b692b1941c8.jpg&quot;&gt;&lt;br&gt;      &lt;source id=&quot;mp4&quot; src=&quot;https://vdn2.vzuu.com/LD/d9c173e2-2941-11e8-a516-0242ac112a1d.mp4?disable_local_cache=1&amp;bu=com&amp;expiration=1547286438&amp;auth_key=1547286438-0-0-2b1341a2203264d9eebcdede98c1e6c5&amp;f=mp4&amp;v=bsy&quot; type=&quot;video/mp4&quot;&gt;&lt;br&gt;&lt;/video&gt;







</content>
    
    <summary type="html">
    
      &lt;p&gt;接上篇继续聊安全研究者的自我修养，上篇重点讲技术修炼，本篇聊聊行业现象、谈谈沉淀、情怀等等。&lt;/p&gt;
&lt;h3 id=&quot;11、工具与方法论沉淀&quot;&gt;&lt;a href=&quot;#11、工具与方法论沉淀&quot; class=&quot;headerlink&quot; title=&quot;11、工具与方法论沉淀&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="安全研究" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>安全研究者的自我修养</title>
    <link href="http://riusksk.github.io/2019/01/06/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E8%80%85%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <id>http://riusksk.github.io/2019/01/06/安全研究者的自我修养/</id>
    <published>2019-01-06T08:43:31.000Z</published>
    <updated>2019-01-06T12:58:53.000Z</updated>
    
    <content type="html">&lt;p&gt;在上篇文章《&lt;a href=&quot;http://riusksk.me/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%AE%E9%A2%98/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;推荐今年C3黑客大会上的几个议题&lt;/a&gt;》中提到”Attacking Chrome IPC“这个议题，我觉得该议题最大的亮点是在前半场，作者nedwill是之前在hack2win大赛上因攻破Chrome浏览器而一战成名，他讲了如何训练漏洞研究能力的过程，讲述自己这几年在漏洞研究上的历程和心得，很励志，其建议也非常具有可操作性，值得效仿学习。我反复看了多遍，对其作了一些总结和补充。&lt;/p&gt;
&lt;h3 id=&quot;1、刻意练习10000小时&quot;&gt;&lt;a href=&quot;#1、刻意练习10000小时&quot; class=&quot;headerlink&quot; title=&quot;1、刻意练习10000小时&quot;&gt;&lt;/a&gt;1、刻意练习10000小时&lt;/h3&gt;&lt;p&gt;这份“鸡汤”道理，想必大家都懂，就不解释了，不懂的自行百度，或者去读读《异类》这本经典书籍。&lt;/p&gt;
&lt;p&gt;作者建议以月为单位来制定研究目标，他曾连续花了6个月的时间来研究Chrome Sandbox，但最终一无所获。&lt;/p&gt;
&lt;p&gt;所以，有时坚持了不一定能达到目标，但不坚持，就更没戏了。&lt;/p&gt;
&lt;h3 id=&quot;2、训练挖洞的双技能&quot;&gt;&lt;a href=&quot;#2、训练挖洞的双技能&quot; class=&quot;headerlink&quot; title=&quot;2、训练挖洞的双技能&quot;&gt;&lt;/a&gt;2、训练挖洞的双技能&lt;/h3&gt;&lt;p&gt;（1）看洞：哪里看？历史漏洞的git log、bug报告、代码质量报告等等&lt;/p&gt;
&lt;p&gt;（2）识洞：就是肉眼看代码找漏洞，即代码审计，难点也就是在这上面，训练方法继续往下看&lt;/p&gt;
&lt;h3 id=&quot;3、代码审计训练&quot;&gt;&lt;a href=&quot;#3、代码审计训练&quot; class=&quot;headerlink&quot; title=&quot;3、代码审计训练&quot;&gt;&lt;/a&gt;3、代码审计训练&lt;/h3&gt;&lt;p&gt;（1）根据自己目标定位，寻找相应的历史漏洞案例进行学习，比如要搞chrome就找chrome的历史漏洞&lt;/p&gt;
&lt;p&gt;（2）掌握漏洞所在的模块或子系统，但不看完整的漏洞细节描述，尝试在漏洞版本中找出对应的漏洞&lt;/p&gt;
&lt;p&gt;（3）如果（2）中未能找出漏洞，就去看漏洞细节描述，对比自己的审计过程，看遗漏了哪一步骤&lt;/p&gt;
&lt;p&gt;（4）不断重复上述训练，直至相信：挖洞只是体力消耗，而非能力问题&lt;/p&gt;
&lt;p&gt;这第4点说得，非常励志，因为挖洞挖久了，有时真的容易怀疑自己的能力，目标难度越大，越容易打击人。&lt;/p&gt;
&lt;p&gt;作者第一次训练的漏洞是j00ru（Project Zero成员）的IDA漏洞：&lt;a href=&quot;https://j00ru.vexillium.org/2014/10/secure-2014-slide-deck-and-hex-rays-ida-pro-advisories-published/，2014年的文章了&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://j00ru.vexillium.org/2014/10/secure-2014-slide-deck-and-hex-rays-ida-pro-advisories-published/，2014年的文章了&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;4、3-5年的训练计划&quot;&gt;&lt;a href=&quot;#4、3-5年的训练计划&quot; class=&quot;headerlink&quot; title=&quot;4、3~5年的训练计划&quot;&gt;&lt;/a&gt;4、3~5年的训练计划&lt;/h3&gt;&lt;p&gt;1~2年：做做 CTF 或 WarGames 题目，网上有很多CTF writeup可以参考学习&lt;/p&gt;
&lt;p&gt;2~3年：简单点的目标，就是找相对容易挖的产品&lt;/p&gt;
&lt;p&gt;3~5年：困难点的目标&lt;/p&gt;
&lt;p&gt;目标的难易程度可以直接参考相应的产品的漏洞奖励计划或私有市场的价格，挑选出一份目标清单，按难易程度排序，逐一去实现它。&lt;/p&gt;
&lt;h3 id=&quot;5、Fuzzing训练&quot;&gt;&lt;a href=&quot;#5、Fuzzing训练&quot; class=&quot;headerlink&quot; title=&quot;5、Fuzzing训练&quot;&gt;&lt;/a&gt;5、Fuzzing训练&lt;/h3&gt;&lt;p&gt;作者代码审计2年后，才开始尝试Fuzzer开发。&lt;/p&gt;
&lt;p&gt;（1）拿已公开的历史漏洞问自己：如何写fuzzer挖掘到此漏洞？&lt;/p&gt;
&lt;p&gt;（2）如果自己不知道此漏洞，那又能够挖掘到呢？&lt;/p&gt;
&lt;p&gt;（3）不断重复训练并改进fuzzer，相信会有更多漏洞被意外发现&lt;/p&gt;
&lt;h3 id=&quot;6、努力往往比运气和天赋更重要&quot;&gt;&lt;a href=&quot;#6、努力往往比运气和天赋更重要&quot; class=&quot;headerlink&quot; title=&quot;6、努力往往比运气和天赋更重要&quot;&gt;&lt;/a&gt;6、努力往往比运气和天赋更重要&lt;/h3&gt;&lt;p&gt;虽然挖洞也需要一定运气和天赋，但多数你认为的挖洞天才，其实只不过是花了比你多100倍，甚至更多的时间在这项技术研究上而已&lt;/p&gt;
&lt;h3 id=&quot;7、进入研究者团队或社区，互相学习&quot;&gt;&lt;a href=&quot;#7、进入研究者团队或社区，互相学习&quot; class=&quot;headerlink&quot; title=&quot;7、进入研究者团队或社区，互相学习&quot;&gt;&lt;/a&gt;7、进入研究者团队或社区，互相学习&lt;/h3&gt;&lt;p&gt;国外的交流氛围会比国内的更好一些，也更愿意分享。&lt;/p&gt;
&lt;p&gt;很多时候自己的交流圈，大多是一些熟识的同行，或者同事，一般可交流的人还是比较少的。&lt;/p&gt;
&lt;p&gt;经常在网上看到不少人会问，如何认识xx大牛、黑客，但其实很多时候却是：&lt;/p&gt;
&lt;p&gt;努力提高自己的专业能力，圈子最终会吸纳你进去认识更多圈内人。&lt;/p&gt;
&lt;h3 id=&quot;8、建立自己的漏洞信息来源&quot;&gt;&lt;a href=&quot;#8、建立自己的漏洞信息来源&quot; class=&quot;headerlink&quot; title=&quot;8、建立自己的漏洞信息来源&quot;&gt;&lt;/a&gt;8、建立自己的漏洞信息来源&lt;/h3&gt;&lt;p&gt;RSS订阅无疑是自己最好的方式，这个需要依赖平时自己去不断收集订阅。&lt;/p&gt;
&lt;p&gt;很多漏洞相关的博文，往往曝露出某些软件新的攻击面，抢占先机就显得尤为重要，比如当年Android stagefirght mp4漏洞、word公式编辑器、adobe图片转换器等等，如果能及时关注并尝试去挖掘，往往可以收获不少漏洞的。&lt;/p&gt;
&lt;h3 id=&quot;9、收集和学习开源的漏洞挖掘工具&quot;&gt;&lt;a href=&quot;#9、收集和学习开源的漏洞挖掘工具&quot; class=&quot;headerlink&quot; title=&quot;9、收集和学习开源的漏洞挖掘工具&quot;&gt;&lt;/a&gt;9、收集和学习开源的漏洞挖掘工具&lt;/h3&gt;&lt;p&gt;比如afl、honggfuzz、libfuzzer等很多优秀的漏洞挖掘工具，都是值得好好阅读代码，学习其中的fuzzing思路，可以更好地应用到未来的漏洞挖掘研究上。&lt;/p&gt;
&lt;h3 id=&quot;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot;&gt;&lt;a href=&quot;#10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot; class=&quot;headerlink&quot; title=&quot;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&quot;&gt;&lt;/a&gt;10、很多不愿搞研究工作的挖洞人，只不过是为了权衡利弊&lt;/h3&gt;&lt;p&gt;在《从0到1：开启商业与未来的秘密》一书中有一章叫做“秘密”，漏洞研究可以当作挖掘秘密，为什么人们不探索秘密呢？书中提到4种原因，我觉得同样适用于漏洞研究领域：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;渐进主义&lt;/strong&gt;：把目标定得低一些，更容易取得好成绩；&lt;/p&gt;
&lt;p&gt;（2）&lt;strong&gt;风险规避&lt;/strong&gt;：人们害怕秘密是因为怕犯错，除此之外，可能也担心KPI没法完成，又或者挖洞拿到的奖金又该如何跟公司“分赃”呢？&lt;/p&gt;
&lt;p&gt;（3）&lt;strong&gt;自满&lt;/strong&gt;：很多时候，某些人可以坐享其成，又何必自己去挖掘秘密；国内研究氛围又喜欢搞营销吹牛逼，牛逼吹多了吹大了，有时连自己都信了；&lt;/p&gt;
&lt;p&gt;（4）&lt;strong&gt;扁平化&lt;/strong&gt;：任何一个拥有雄心壮志的人，在涉及某一研究领域之前都会问自己一个问题：如果有可能挖掘到漏洞，难道全球人才库中更加聪明、更加有技术能力的人还没有发现吗？这种怀疑的声音阻止了不少人去探索秘密，从事研究工作，因为身处的世界似乎大到任何个人都无法做出独特的贡献。&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;今年因个人原因，已从安全研究转向业务安全，深知研究的不易。&lt;/p&gt;
&lt;p&gt;相信安全领域有秘密的存在，虽会导致黑产的诞生，但肯定也会因此诞生一些优秀的研究者。&lt;/p&gt;
&lt;p&gt;最后以白桦的《船》致谢所有仍在安全研究道路上前进的人：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我有过多次这样的奇遇，&lt;br&gt;从天堂到地狱只在瞬息之间：&lt;br&gt;每一朵可爱、温柔的浪花&lt;br&gt;都成了突然崛起、随即倾倒的高山。&lt;/p&gt;
&lt;p&gt;每一滴海水都变脸色，&lt;br&gt;刚刚还是那样的美丽、蔚蓝；&lt;br&gt;旋涡纠缠着旋涡，&lt;br&gt;我被抛向高空又投进深渊……&lt;/p&gt;
&lt;p&gt;当时我甚至想到过轻生，&lt;br&gt;眼前一片苦海无边；&lt;br&gt;放弃了希望就像放弃了舵柄，&lt;br&gt;在暴力之下只能沉默和哀叹。&lt;/p&gt;
&lt;p&gt;今天我才有资格嘲笑昨天的自己，&lt;br&gt;为昨天落叶似的惶恐感到羞惭；&lt;br&gt;虚度了多少年华，&lt;br&gt;船身多次被礁石撞穿……&lt;/p&gt;
&lt;p&gt;千万次在大洋里撒网，&lt;br&gt;才捕获到一点点生活的经验，&lt;br&gt;才恍然大悟，&lt;br&gt;啊！道理原是如此浅显；&lt;/p&gt;
&lt;p&gt;你要航行吗&lt;br&gt;必然会有千妖百怪出来阻拦；&lt;br&gt;暴虐的欺凌是它们的游戏，&lt;br&gt;制造灭亡是它们唯一的才干。&lt;/p&gt;
&lt;p&gt;命中注定我要常常和它们相逢，&lt;br&gt;因为我的名字叫做船；&lt;br&gt;面对强大于自身千万倍的对手，&lt;br&gt;能援救自己的只有清醒和勇敢。&lt;/p&gt;
&lt;p&gt;恐惧只能使自己盲目，&lt;br&gt;盲目只能夸大魔鬼的狰狞嘴脸；&lt;br&gt;也许我的样子比它们更可怕，&lt;br&gt;当我以命相拼，一往无前！&lt;/p&gt;
&lt;p&gt;只要我还有一根完整的龙骨，&lt;br&gt;绝不驶进避风的港湾；&lt;br&gt;把生命放在征途上，&lt;br&gt;让勇敢来决定道路的宽窄、长短。&lt;/p&gt;
&lt;p&gt;我完完全全的自由了，&lt;br&gt;船头成为埋葬它们的铁铲；&lt;br&gt;我在波浪中有节奏地跳跃，&lt;br&gt;就像荡着一个巨大的秋千。&lt;/p&gt;
&lt;p&gt;即使它们终于把我撕碎，&lt;br&gt;变成一些残破的木片，&lt;br&gt;我不会沉沦，决不！&lt;br&gt;我还会在浪尖上飞旋。&lt;/p&gt;
&lt;p&gt;后来者还会在残片上认出我，&lt;br&gt;未来的诗人会唱然长叹：&lt;br&gt;“这里有一个幸福的灵魂，&lt;br&gt;它曾经是一艘前进着的航船……”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在上篇文章《&lt;a href=&quot;http://riusksk.me/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="安全研究" scheme="http://riusksk.github.io/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>推荐今年C3黑客大会上的几个议题</title>
    <link href="http://riusksk.github.io/2018/12/30/%E6%8E%A8%E8%8D%90%E4%BB%8A%E5%B9%B4C3%E9%BB%91%E5%AE%A2%E5%A4%A7%E4%BC%9A%E4%B8%8A%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%AE%E9%A2%98/"/>
    <id>http://riusksk.github.io/2018/12/30/推荐今年C3黑客大会上的几个议题/</id>
    <published>2018-12-30T11:06:31.000Z</published>
    <updated>2018-12-30T14:18:00.000Z</updated>
    
    <content type="html">&lt;p&gt;最近几天在德国举办的 The 35th Chaos Communication Congress (35C3) 黑客大会，在Twitter上传得火热，在国内却无人问津。&lt;/p&gt;
&lt;p&gt;从这可以看出同为微博的安全圈氛围是完全不同的，新浪微博还是偏娱乐些的，而且国外的圈子自然比天朝的要大得多，很多国家的人在上面交流。&lt;/p&gt;
&lt;p&gt;所以，我现在经常混Twitter，当作获取安全资讯的途径，新浪微博就真的当作看新闻的了……&lt;/p&gt;
&lt;h3 id=&quot;德国C3混沌黑客大会&quot;&gt;&lt;a href=&quot;#德国C3混沌黑客大会&quot; class=&quot;headerlink&quot; title=&quot;德国C3混沌黑客大会&quot;&gt;&lt;/a&gt;德国C3混沌黑客大会&lt;/h3&gt;&lt;p&gt;Chaos Communication Congress（C3）大会是每年在德国举办的黑客大会，直译过来就是”混沌通信大会“，圈内通常叫”C3“，今年是第35届，所以叫35c3，今年还有CTF比赛，一些打过pwn2own的人出了一些浏览器实际漏洞的题目，也蛮具有实战价值的。&lt;/p&gt;
&lt;p&gt;每年这大会都会以演讲视频的方式分享出各个议题，以前大多是聚焦在无线电安全，所以一些什么2G\3G\4G短信、电话窃听经常出自该会议。今年也有一些不错的软件安全相关的议题，下面推荐几个鄙人自认为不错的几个议题。&lt;/p&gt;
&lt;h3 id=&quot;From-Zero-to-Zero-Day&quot;&gt;&lt;a href=&quot;#From-Zero-to-Zero-Day&quot; class=&quot;headerlink&quot; title=&quot;From Zero to Zero Day&quot;&gt;&lt;/a&gt;From Zero to Zero Day&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyp0431o6oj30ju0hxtft.jpg&quot; alt=&quot;image-20181230193447667&quot;&gt;&lt;/p&gt;
&lt;p&gt;大会上有个议题叫 “From Zero to Zero Day”，演讲者是位高中生，讲述他自己如何在一年之内，从无任何安全基础到挖掘到第一枚Edge浏览器远程执行代码漏洞的经历。&lt;/p&gt;
&lt;p&gt;总结来讲就是：&lt;/p&gt;
&lt;p&gt;1、学习编程语言（C/C++、asm等等）&lt;/p&gt;
&lt;p&gt;2、学习操作系统原理&lt;/p&gt;
&lt;p&gt;3、学习常见二进制漏洞原理&lt;/p&gt;
&lt;p&gt;4、打打CTF，写写write-up&lt;/p&gt;
&lt;p&gt;5、学习并实践去分析真实的漏洞案例，就是直接看代码，调代码&lt;/p&gt;
&lt;p&gt;6、不断重复上述练习&lt;/p&gt;
&lt;p&gt;我直接帖几张关键截图，也推荐大家去听听（视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9657-from_zero_to_zero_day）：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9657-from_zero_to_zero_day）：&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyozsxuptzj30hz0aatcu.jpg&quot; alt=&quot;image-20181230192405638&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyozt7f18tj30jf0avwjw.jpg&quot; alt=&quot;image-20181230192425929&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwgy1fyozqdnwdwj30k30axgoz.jpg&quot; alt=&quot;image-20181230192131880&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fyozs2o8i2j30k70awtb3.jpg&quot; alt=&quot;image-20181230192320182&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwgy1fyozrme322j30k50atadg.jpg&quot; alt=&quot;image-20181230192254473&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Attack-Chrome-IPC&quot;&gt;&lt;a href=&quot;#Attack-Chrome-IPC&quot; class=&quot;headerlink&quot; title=&quot;Attack Chrome IPC&quot;&gt;&lt;/a&gt;Attack Chrome IPC&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/Users/riusksk/Library/Application Support/typora-user-images/image-20181230193950157.png&quot; alt=&quot;image-20181230193950157&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个议题之前作者在韩国PoC大会上讲过，并在网上公布过pdf（&lt;a href=&quot;https://data.hackinn.com/ppt/2018韩国POC安全大会/ned.pdf），主要讲他之前在Hack2Win&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://data.hackinn.com/ppt/2018韩国POC安全大会/ned.pdf），主要讲他之前在Hack2Win&lt;/a&gt; bevx黑客大赛上用于黑掉Chrome浏览器的IPC漏洞，此次C3大会的演讲视频参见：&lt;a href=&quot;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9579-attacking_chrome_ipc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这议题里面讲了作者一些研究二进制漏洞的一些学习和研究的方法，比如做代码审计、打CTF，也介绍了他这几年的安全研究历程，比国内流行晒crash+CVE的方式更接地气。&lt;/p&gt;
&lt;p&gt;最后介绍如何使用 libfuzzer+libprotobuf-mutator去fuzz chrome IPC，并开源fuzzer代码合并到chroium项目中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyp0grvcxuj30wk0g3aej.jpg&quot; alt=&quot;image-20181230194648886&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Jailbreaking-iOS-From-past-to-present&quot;&gt;&lt;a href=&quot;#Jailbreaking-iOS-From-past-to-present&quot; class=&quot;headerlink&quot; title=&quot;Jailbreaking iOS From past to present&quot;&gt;&lt;/a&gt;Jailbreaking iOS From past to present&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fyp4tb6ppej30lb0c04cb.jpg&quot; alt=&quot;image-20181230202552499&quot;&gt;&lt;/p&gt;
&lt;p&gt;讲iOS越狱发展史的，可以学习到iOS上各种安全机制的原理以及绕过方法，画了不少原理图，通俗易懂不少。对于想了解整个iOS越狱技术发展历程的同学，这确实是份不错的资料。&lt;/p&gt;
&lt;p&gt;作者这次也在推持上放出了pdf和视频：&lt;/p&gt;
&lt;p&gt;pdf: &lt;a href=&quot;https://api.tihmstar.net/35c3slides.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://api.tihmstar.net/35c3slides.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;video: &lt;a href=&quot;https://media.ccc.de/v/35c3-9618-jailbreaking_ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9618-jailbreaking_ios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;整个议题主要围绕以下几点展开：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;越狱类型（非完美越狱、完美越狱……）&lt;/li&gt;
&lt;li&gt;Exploit mitigations (ASLR, iBoot-level AES, KPP, KTRR, PAC) &lt;/li&gt;
&lt;li&gt;Kernel patches (h3lix) &lt;/li&gt;
&lt;li&gt;Kppless jailbreaks&lt;/li&gt;
&lt;li&gt;越狱的未来趋势&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;The-Layman’s-Guide-to-Zero-Day-Engineering&quot;&gt;&lt;a href=&quot;#The-Layman’s-Guide-to-Zero-Day-Engineering&quot; class=&quot;headerlink&quot; title=&quot;The Layman’s Guide to Zero-Day Engineering&quot;&gt;&lt;/a&gt;The Layman’s Guide to Zero-Day Engineering&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fyp2wxxr28j30yw0ihgr0.jpg&quot; alt=&quot;image-20181230211151217&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ret2公司分享如何寻找webkit攻击面并fuzz的方法，是基于MozillaSecurity的dharma语法生成框架写的js fuzzer，以及如何借助IDA+&lt;a href=&quot;https://github.com/gaasedelen/lighthouse&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lighthouse&lt;/a&gt;开源插件（正是Ret2团队开发的，曾获得过IDA插件比赛的二等奖）来分析代码覆盖率问题。&lt;/p&gt;
&lt;p&gt;除此之外，也介绍如何利用frida去hook mach_msg，用来fuzz WindowServer，最后用WindowServer的漏洞来实现root提权。&lt;/p&gt;
&lt;p&gt;他们在其博客（&lt;a href=&quot;https://blog.ret2.io）上也分享过不少漏洞研究方面的干货，这次分享的内容也大部分就是来自博客上的一些文章。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.ret2.io）上也分享过不少漏洞研究方面的干货，这次分享的内容也大部分就是来自博客上的一些文章。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面还提到长亭的real world ctf比赛了。&lt;/p&gt;
&lt;p&gt;这里有张比较有意思的图，发出来给大伙看下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fyp3j3xqdgj30z00jn4qp.jpg&quot; alt=&quot;image-20181230213304029&quot;&gt;&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9979-the_layman_s_guide_to_zero-day_engineering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9979-the_layman_s_guide_to_zero-day_engineering&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Modern-Windows-Userspace-Exploitation&quot;&gt;&lt;a href=&quot;#Modern-Windows-Userspace-Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Modern Windows Userspace Exploitation&quot;&gt;&lt;/a&gt;Modern Windows Userspace Exploitation&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fyp3yvr0eaj30tl0i815k.jpg&quot; alt=&quot;image-20181230214817405&quot;&gt;&lt;/p&gt;
&lt;p&gt;视频链接：&lt;a href=&quot;https://media.ccc.de/v/35c3-9660-modern_windows_userspace_exploitation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://media.ccc.de/v/35c3-9660-modern_windows_userspace_exploitation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微软MSRC的人过来分享下windows平台下的一些二进制漏洞利用方法，包括ROP绕过DEP、信息泄露绕过ASLR、绕过CFG、ACG、CIG等等，并现场给了一些演示，不过看起来像是一些CTF赛题，演示的相关代码已放在作者的github上：&lt;a href=&quot;https://github.com/saaramar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/saaramar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;都是一些利用系统漏洞防御技术的原理与绕过技术的总结，连各种漏洞缓解机制绕过的微软奖励都给大家标注上了，其实有点类似上面Jailbreaking iOS议题的Windows版本。&lt;/p&gt;
&lt;p&gt;最后来张Exploit Mitigations清单：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fyp4b42qn5j30rs0hvdir.jpg&quot; alt=&quot;image-20181230215938958&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h3&gt;&lt;p&gt;后面官方可能还会继续更新演讲视频，可以关注官方twitter（@c3voc_releases）获取消息。&lt;/p&gt;
&lt;p&gt;另外，对于英语不好的同学，不妨下个”腾讯翻译“同声翻译试下，虽然中文翻译没那么准确，但看看显示的英文单词也能知道个大意：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fyp0n9b99lj31400u0b29.jpg&quot; alt=&quot;image-20181230195201468&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近几天在德国举办的 The 35th Chaos Communication Congress (35C3) 黑客大会，在Twitter上传得火热，在国内却无人问津。&lt;/p&gt;
&lt;p&gt;从这可以看出同为微博的安全圈氛围是完全不同的，新浪微博还是偏娱乐些的，而且国外的圈子自然比
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>2018年读过的书</title>
    <link href="http://riusksk.github.io/2018/12/28/2018%E5%B9%B4%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    <id>http://riusksk.github.io/2018/12/28/2018年读过的书/</id>
    <published>2018-12-28T12:17:12.000Z</published>
    <updated>2018-12-28T12:17:48.000Z</updated>
    
    <content type="html">&lt;p&gt;从2018年开始一直坚持每月读2本书以上，庆幸自己坚持下来了，共读了38本书，也希望明年能够继续坚持。&lt;/p&gt;
&lt;p&gt;有些是实体书，有些是在微信读书上看的电子版，在手机app上看书确实会高效很多，今年有一半的书是在微信读书上看的，非常适合空闲时间阅读，以及像坐地铁、等地铁这种零碎的时间。&lt;/p&gt;
&lt;p&gt;下面是我今年读过的书单，分别都打个分数，8分及以上的代表推荐，6分以下的别看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;《人性的弱点》（6分）&lt;/li&gt;
&lt;li&gt;《代码整洁之道》（8分）&lt;/li&gt;
&lt;li&gt;《如何阅读一本书》（8分）&lt;/li&gt;
&lt;li&gt;《两晋南北朝那些事》（7分）&lt;/li&gt;
&lt;li&gt;《软技能：代码之外的生存指南》（8分）&lt;/li&gt;
&lt;li&gt;《秋叶：如何高效读懂一本书》（6分）&lt;/li&gt;
&lt;li&gt;《横向领导力》（7分）&lt;/li&gt;
&lt;li&gt;《程序员成长课》（8分）&lt;/li&gt;
&lt;li&gt;《英语写作手册》（8分）&lt;/li&gt;
&lt;li&gt;《爆款文案》（7分）&lt;/li&gt;
&lt;li&gt;《运营之光》（8分）&lt;/li&gt;
&lt;li&gt;《威胁建模》（7分）&lt;/li&gt;
&lt;li&gt;《程序员的英语》（7分）&lt;/li&gt;
&lt;li&gt;《冰鉴全鉴》（2分）&lt;/li&gt;
&lt;li&gt;《内向者沟通圣经》（4分）&lt;/li&gt;
&lt;li&gt;《灰度决策》（4分）&lt;/li&gt;
&lt;li&gt;《启功行书技法》（8分）&lt;/li&gt;
&lt;li&gt;《见识》（9分）&lt;/li&gt;
&lt;li&gt;《半小时漫画中国史1、2》（7分）&lt;/li&gt;
&lt;li&gt;《Web安全之机器学习入门》（6分）&lt;/li&gt;
&lt;li&gt;《秦崩》（8分）&lt;/li&gt;
&lt;li&gt;《启功给你讲书法》（8分）&lt;/li&gt;
&lt;li&gt;《思考，快与慢》（10分）&lt;/li&gt;
&lt;li&gt;《三国志》（8分）&lt;/li&gt;
&lt;li&gt;《季羡林谈写作》（6分）&lt;/li&gt;
&lt;li&gt;《Android应用安全防护与逆向分析》（7分）&lt;/li&gt;
&lt;li&gt;《精进：如何成为一个很厉害的人》（8分）&lt;/li&gt;
&lt;li&gt;《非暴力沟通》（9分）&lt;/li&gt;
&lt;li&gt;《系统架构设计》（7分）&lt;/li&gt;
&lt;li&gt;《人人都是产品经理》（8分）&lt;/li&gt;
&lt;li&gt;《漏洞》（7分）&lt;/li&gt;
&lt;li&gt;《风格感觉：21世纪写作指南》（8分）&lt;/li&gt;
&lt;li&gt;《态度》（8分）&lt;/li&gt;
&lt;li&gt;《高效阅读》（5分）&lt;/li&gt;
&lt;li&gt;《写给大家看的设计书》（10分）&lt;/li&gt;
&lt;li&gt;《硅谷钢铁侠：埃隆·马斯克的冒险人生》（8分）&lt;/li&gt;
&lt;li&gt;《八卦医学史2》（6分）&lt;/li&gt;
&lt;li&gt;《从0到1：开启商业与未来的秘密》（7分）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 所以8分以上的推荐书籍有：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《代码整洁之道》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《如何阅读一本书》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《软技能：代码之外的生存指南》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《程序员成长课》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《英语写作手册》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《运营之光》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《启功行书技法》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《见识》（9分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《秦崩》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《启功给你讲书法》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《思考，快与慢》（10分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《三国志》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《精进：如何成为一个很厉害的人》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《非暴力沟通》（9分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《人人都是产品经理》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《风格感觉：21世纪写作指南》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《态度》（8分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《写给大家看的设计书》（10分）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《硅谷钢铁侠：埃隆·马斯克的冒险人生》（8分）&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从2018年开始一直坚持每月读2本书以上，庆幸自己坚持下来了，共读了38本书，也希望明年能够继续坚持。&lt;/p&gt;
&lt;p&gt;有些是实体书，有些是在微信读书上看的电子版，在手机app上看书确实会高效很多，今年有一半的书是在微信读书上看的，非常适合空闲时间阅读，以及像坐地铁、等地铁这
    
    </summary>
    
      <category term="随笔杂谈" scheme="http://riusksk.github.io/categories/%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="书籍" scheme="http://riusksk.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Bochspwn漏洞挖掘技术深究(2)：内核未初始化漏洞检测</title>
    <link href="http://riusksk.github.io/2018/12/22/bochspwn-reloaded/"/>
    <id>http://riusksk.github.io/2018/12/22/bochspwn-reloaded/</id>
    <published>2018-12-22T00:13:28.000Z</published>
    <updated>2018-12-22T03:21:13.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要介绍&lt;a href=&quot;https://github.com/googleprojectzero/bochspwn-reloaded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bochspwn Reloaded&lt;/a&gt;内核未初始化漏洞检测技术，它采用污点追踪对内核层向用户层泄露数据的行为进行检测。&lt;/p&gt;
&lt;p&gt;关于bochs插桩技术参考&lt;a href=&quot;http://riusksk.me/2018/12/01/bochspwn1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Bochspwn漏洞挖掘技术深究(1)：Double Fetches 检测》&lt;/a&gt;，此处不再赘述。&lt;/p&gt;
&lt;p&gt;直接先看下instrument.h中实现插桩函数有哪些：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs初始化CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs析构CPU对象时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_exit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Bochs每次执行中断操作（软件中断、硬件中断或异常）时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_interrupt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs执行指令前的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs执行指令后的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_after_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bochs访问线性内存时的回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// WRMSR指令（写模式定义寄存器）被执行时的回调函数，MSR寄存器数与值作为参数传递给回调函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_wrmsr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; addr, Bit64u value)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;初始化工作&quot;&gt;&lt;a href=&quot;#初始化工作&quot; class=&quot;headerlink&quot; title=&quot;初始化工作&quot;&gt;&lt;/a&gt;初始化工作&lt;/h3&gt;&lt;p&gt;第一篇中讲过&lt;code&gt;bx_instr_initialize&lt;/code&gt;主要用来加载配置信息，针对不同的系统环境设置不同的数据结构偏移地址，用来提供需要的进程/线程等重要信息。在这里它另外增加污点追踪功能的初始化工作：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize the taint subsystem.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;taint::initialize();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Initialize helper taint allocations.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;globals::pool_taint_alloc = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(globals::pool_taint_alloc, kPoolTaintByte, kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;globals::stack_taint_alloc = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(globals::stack_taint_alloc, kStackTaintByte, kTaintHelperAllocSize);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要作一些用于污点信息记录的内存结构分配与VEH异常处理回调设置：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Reserve a memory region for the taint data.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  taint_area = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)VirtualAlloc(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, kTaintAreaSize, MEM_RESERVE, PAGE_READWRITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// Register a VEH handler to commit taint memory touched in other taint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// functions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  AddVectoredExceptionHandler(&lt;span class=&quot;comment&quot;&gt;/*FirstHandler=*/&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, OvercommitHandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;VEH回调函数实现如下，当发生访问违例时，若异常地址不在污点内存区域，则将其设置为可读写内存，然后继续执行：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; LONG CALLBACK &lt;span class=&quot;title&quot;&gt;OvercommitHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;  _In_ PEXCEPTION_POINTERS ExceptionInfo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ExceptionInfo-&amp;gt;ExceptionRecord-&amp;gt;ExceptionCode == EXCEPTION_ACCESS_VIOLATION) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *excp_address = (&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)ExceptionInfo-&amp;gt;ExceptionRecord-&amp;gt;ExceptionInformation[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (excp_address &amp;gt;= taint_area &amp;amp;&amp;amp; excp_address &amp;lt; &amp;amp;taint_area[kTaintAreaSize]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (VirtualAlloc((&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)((&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt;)excp_address &amp;amp; (~&lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;)), &lt;span class=&quot;number&quot;&gt;0x10000&lt;/span&gt;, MEM_COMMIT, PAGE_READWRITE)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXCEPTION_CONTINUE_EXECUTION;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; EXCEPTION_CONTINUE_SEARCH;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;中断响应&quot;&gt;&lt;a href=&quot;#中断响应&quot; class=&quot;headerlink&quot; title=&quot;中断响应&quot;&gt;&lt;/a&gt;中断响应&lt;/h3&gt;&lt;p&gt;再看下&lt;code&gt;bx_instr_interrupt&lt;/code&gt;函数实现，主要是发生中断时，检测该中断地址是否可写，并设置全局标志：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_interrupt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::bp_active &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    write_lin_mem(pcpu, globals::bp_address, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &amp;amp;globals::bp_orig_byte);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::bp_active = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;污点标记与追踪&quot;&gt;&lt;a href=&quot;#污点标记与追踪&quot; class=&quot;headerlink&quot; title=&quot;污点标记与追踪&quot;&gt;&lt;/a&gt;污点标记与追踪&lt;/h3&gt;&lt;p&gt;bochspwn-reloaded会对内核分配的stack/heap/pools作污点标记：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwgy1fyf9luidhdj30jy09m75c.jpg&quot; alt=&quot;image-20181222092741926&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、栈污点标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检测修改ESP寄存器的指令，比如：&lt;code&gt;ADD ESP, ...&lt;/code&gt; &lt;code&gt;SUB ESP, ...&lt;/code&gt; &lt;code&gt;AND ESP, …&lt;/code&gt;，若在执行后（&lt;code&gt;bx_instr_after_execution&lt;/code&gt;）ESP发生递减，则调用&lt;code&gt;taint::set_taint(new_rsp, length, /*tainted=*/true)&lt;/code&gt;标记为污点&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_before_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; opcode = i-&amp;gt;getIaOpcode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_SUB_EqId:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_SUB_GqEq: &lt;span class=&quot;comment&quot;&gt;/* Stack allocation handling */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_PUSH_Eq: &lt;span class=&quot;comment&quot;&gt;/* Allocator prologue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_after_execution&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bxInstruction_c *i)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  globals::rep_movs = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rsp_change) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; new_rsp = pcpu-&amp;gt;gen_reg[BX_64BIT_REG_RSP].rrx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (new_rsp &amp;lt; globals::rsp_value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; length = globals::rsp_value - new_rsp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (length &amp;lt;= kTaintHelperAllocSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        taint::set_taint(new_rsp, length, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write_lin_mem(pcpu, new_rsp, length, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)globals::stack_taint_alloc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::config.track_origins) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          taint::set_origin(new_rsp, length, pcpu-&amp;gt;prev_rip);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::rsp_change = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::rsp_value = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;2、堆/Pools污点标记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;检测内核内存分配操作的指令，则调用&lt;code&gt;taint::set_taint(address, size, /*tainted=*/true)&lt;/code&gt;进行污点标记，主要通过&lt;code&gt;bx_instr_wrmsr&lt;/code&gt;函数来实现，当写入的地址是&lt;code&gt;MSR_LSTAR&lt;/code&gt;寄存器时，它代表着syscall调用：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; MSR_LSTAR	0xc0000082 &lt;span class=&quot;comment&quot;&gt;/* long mode SYSCALL target */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_wrmsr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; addr, Bit64u value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (addr == MSR_LSTAR) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    globals::nt_base = value - globals::config.KiSystemCall64_offset; &lt;span class=&quot;comment&quot;&gt;// ntoskrnl.exe中nt!KiSystemCall64偏移地址，用于获取内核基址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; globals::config.pool_alloc_prologues.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      globals::config.pool_alloc_prologues[i] += globals::nt_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set_breakpoints_bulk(globals::config.pool_alloc_prologues, BP_POOL_ALLOC_PROLOGUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; globals::config.pool_alloc_epilogues.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      globals::config.pool_alloc_epilogues[i] += globals::nt_base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set_breakpoints_bulk(globals::config.pool_alloc_epilogues, BP_POOL_ALLOC_EPILOGUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中&lt;code&gt;pool_alloc_prologues&lt;/code&gt;与&lt;code&gt;pool_alloc_epilogues&lt;/code&gt;分别代表alloc函数的前序与后序函数，以下是windows-x64系统配置下的地址：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pool_alloc_prologues  = 0x1E0590&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pool_alloc_epilogues  = 0x1E07AD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;3、污点清除&lt;/strong&gt;&lt;br&gt;当栈顶弹出或者堆块调用free函数前序指令（Linux下配置地址），以及内存拷贝的目标地址是内核地址时，均将其污点标记清除，如果是win平台则主要依靠&lt;code&gt;bx_instr_lin_access&lt;/code&gt;来实现：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bx_instr_lin_access&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; cpu, bx_address lin, bx_address phy,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                         &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; len, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; memtype, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; rw)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  BX_CPU_C *pcpu = BX_CPU(cpu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; pc = pcpu-&amp;gt;prev_rip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rw != BX_WRITE &amp;amp;&amp;amp; rw != BX_RW) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!pcpu-&amp;gt;long_mode() || !windows::check_kernel_addr(pc) || !windows::check_kernel_addr(lin)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rep_movs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; rsp = pcpu-&amp;gt;gen_reg[BX_64BIT_REG_RSP].rrx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (globals::rsp_locked.find(rsp) != globals::rsp_locked.end()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  taint::set_taint(lin, len, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;4、污点传播&lt;/strong&gt;&lt;br&gt;在&lt;code&gt;bx_instr_before_execution&lt;/code&gt;中主要对以下操作指令作检测，指令形式主要为 &lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;，用于污点传播追踪：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; opcode = i-&amp;gt;getIaOpcode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_MOV_GqEq: &lt;span class=&quot;comment&quot;&gt;/* Standard library memcpy() prologue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSB_YbXb:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSW_YwXw:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSD_YdXd:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSQ_YqXq: &lt;span class=&quot;comment&quot;&gt;/* Inline memcpy handling */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (opcode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSB_YbXb: mult = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSW_YwXw: mult = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSD_YdXd: mult = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_REP_MOVSQ_YqXq: mult = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;; &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; BX_IA_RET_Op64: &lt;span class=&quot;comment&quot;&gt;/* Allocator and memcpy() epilogue handling. */&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于非&lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;指令的内存访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写操作：清除内存污点标记，标记为已初始化；&lt;/li&gt;
&lt;li&gt;读操作：检测污点标记，如果shadow memory中标记为未初始化读取，则在guest memory中验证：标记不匹配则清除污点，否则若真为未初始化读取就当漏洞报告出来&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* src_in_kernel */&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; tainted_offset = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    taint::access_type type = taint::check_taint(pcpu, src, size, &amp;amp;tainted_offset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == taint::METADATA_MARKER_MISMATCH) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      taint::set_taint(src, size, &lt;span class=&quot;comment&quot;&gt;/*tainted=*/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (type == taint::ACCESS_INVALID) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      process_bug_candidate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          pcpu, i, pcpu-&amp;gt;prev_rip, src, size, dst, taint::get_origin(src + tainted_offset));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;总结起来，是否为漏洞主要基于以下几点：&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;&amp;lt;REP&amp;gt; MOVS{B,D}&lt;/code&gt;中 源地址为内核，目标地址为用户地址，从内核输出数据到用户&lt;/p&gt;
&lt;p&gt;2、源地址被标记为污点&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍&lt;a href=&quot;https://github.com/googleprojectzero/bochspwn-reloaded&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bochspwn Reloaded&lt;/a&gt;内核未初始化漏洞检测技术，它
    
    </summary>
    
      <category term="技术分享" scheme="http://riusksk.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Bochspwn" scheme="http://riusksk.github.io/tags/Bochspwn/"/>
    
  </entry>
  
</feed>
